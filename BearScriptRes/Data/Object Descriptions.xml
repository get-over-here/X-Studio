<?xml version="1.0" encoding="utf-8" ?>
<language id="44">

  
  
  
  
<page id="2003" title="X2:The Threat - Command Descriptions">

<!-- ********************************************************************************** -->
<!-- ********************************** X2 To Classify ********************************** -->
<!-- ********************************************************************************** -->
  
<!--goto label $0:-->
<t id="100">Unconditionally jumps to the line of code containing the label specified by $0</t>


<!--$0 get player ship-->
<t id="743">Returns the SHIP containing the player</t>


<!-- ********************************************************************************** -->
<!-- ********************************** X2  ARRAYS   ********************************** -->
<!-- ********************************************************************************** -->

<!--$0 array alloc: size=$1-->
<t id="128">Creates and returns a new ARRAY with $1 elements.

{ABOUT_COPYING_ARRAYS}
The {COMMAND:array alloc:} command generates a distinct, independent copy of an ARRAY.

{HEADING:Information}

All ARRAY indicies are zero based.

{RELATED_SCRIPT_OBJECT_LIST:Data Types,Data Types}</t>


<!--$0 $1[$2]-->
<t id="129">Returns the value stored at index $2 of the ARRAY $1.

{HEADING:Information}

All ARRAY indicies are zero based.</t>


<!--$0[$1] = $2-->
<t id="130">Stores the value $2 into the ARRAY $0 at index $1.

{HEADING:Information}

All ARRAY indicies are zero based.</t>


<!--$0 size of array $1-->
<t id="131">Returns the number of elements in the ARRAY $1.

{HEADING:Information}

The number of elements in the ARRAY is one based.</t>


<!--$0 clone array $1 : index $2x ... $3y-->
<t id="132">Creates and returns a new ARRAY containing a subset of the elements in the ARRAY $1.  The new ARRAY contains the elements stored at indicies $2x, $3y and all elements in between, if any.  This command can be used to copy a subset of elements or all of the elements from ARRAY $1.

You can clone an entire ARRAY by using NULL for indicies $2x and $3y.

{ABOUT_COPYING_ARRAYS}
The {COMMAND:clone array} command generates a distinct, independent copy of an ARRAY.

{HEADING:Information}

All ARRAY indicies are zero based.{CORRECTION:Jack08}</t>


<!--copy array $2x index $3x ... $4y into array $0y at index $1z-->
<t id="133">Copies a subset of elements from ARRAY $2x into ARRAY $0y.  The elements at indicies $3x, $4y and all elements in between, are copied from ARRAY $2x into element $1z and all subsequent elements of ARRAY $0y

You can copy all the elements in ARRAY $2x with this command or just a subset.  The order of the copied elements is not changed.

{HEADING:Information}

The ARRAY $2x is not resized by this command, you must ensure it is large enough to hold all the required elements.  All ARRAY indicies are zero based.</t>


<!--insert $2 into array $0 at index $1-->
<t id="134">Creates a new element in ARRAY $0 at index $1 with the value $2.  The previous element at index $1 is shifted to the `right`, as are any elements following it, increasing their indicies by one.

{HEADING:Information}

All ARRAY indicies are zero based.</t>


<!--append $1 to array $0-->
<t id="135">Stores the value $1 in a new element added to the end of the ARRAY $0.</t>


<!--remove element from array $0 at index $1-->
<t id="136">Destroys the element at index $1 of the ARRAY $0.  All elements following $1 are shifted to the `left`, reducing their indicies by one.  Elements preceeding $1 are unaffected.

{HEADING:Information}

All ARRAY indicies are zero based.</t>


<!--resize array $0 to $1-->
<t id="137">Sets the number of elements in ARRAY $0 to $1.  If the ARRAY is being enlarged then new elements are appended and the previous elements are preserved.  If the ARRAY is being shrunk then elements at the end of the ARRAY are destroyed.

{HEADING:Information}

The number of elements in the ARRAY is one based.</t>

<!-- ********************************************************************************** -->
<!-- ********************************** X2    MACROS   ********************************** -->
<!-- ********************************************************************************** -->

<!--dim $0 = $1-->
<t id="250">Creates and returns a new ARRAY $0 containing an unlimited number of elements, starting with $1.  Each element must be separated with a comma.

{ABOUT_MACROS}

{VARIABLE:$Array} = {COMMAND:array alloc: size} = 3
{VARIABLE:$Array}{COMMAND:\[0\]} = $1x
{VARIABLE:$Array}{COMMAND:\[1\]} = $1y
{VARIABLE:$Array}{COMMAND:\[2\]} = $1a</t>


<!--for each $0 in array $1-->
<t id="251">Loops through each element $0 in the ARRAY $1, starting at the last element and working backwards toward zero.

{ABOUT_MACROS}

{VARIABLE:$iterator} = {COMMAND:size of array} $1
{KEYWORD:while} {VARIABLE:$iterator}
\t{COMMAND:dec} {VARIABLE:$iterator}
\t$0 = $1\[ {VARIABLE:$iterator} \]
\t...{CORRECTION:Jack08}</t>


<!--for each $0x in array $1 using counter $2y-->
<t id="252">Loops through each element $0x in the ARRAY $1, starting at the last element and working backwards toward zero.

This macro allows you to access the {PROPERTY:index} of the current element through $2y.

{ABOUT_MACROS}

$2y = {COMMAND:size of array} $1
{KEYWORD:while} $2y
\t{COMMAND:dec} $2y
\t$0x = $1\[ $2y \]
\t...{CORRECTION:Jack08}</t>


<!--for $0 = $1x to $2y step $3-->
<t id="253">Loops through each number $0 between and including the numbers $1x and $2y, increasing or decreasing with each iteration by the INTEGER $3.

If the INTEGER $3 is positive the count increases with each iteration, and if $3 is negative the count decreases with each iteration.

{ABOUT_MACROS}

{VARIABLE:$iterator} = $1x ± $3
{KEYWORD:while} {VARIABLE:$iterator} &lt; $2y
\t{VARIABLE:$iterator} = {VARIABLE:$iterator} ± $3
\t...</t>

<!-- ********************************************************************************** -->
<!-- ********************************** X2    MATHS    ********************************** -->
<!-- ********************************************************************************** -->

<!--$0 random value from zero to $1-->
<t id="106">Returns a random INTEGER that could be zero, the INTEGER $1, or any INTEGER in between</t>


<!--$0 random value between $1x and $2y-->
<t id="110">Returns a random INTEGER that could be the INTEGER $1x, the INTEGER $2y or any INTEGER in between</t>


<!--inc $0-->
<t id="142">Increments the INTEGER $0 by one.  This is commonly used to create code loops.

{HEADING:Example}

{VARIABLE:$iIndex} = 0
{KEYWORD:while} \({VARIABLE:$iIndex} &lt; 5\)
\t...
\t{COMMAND:inc} {VARIABLE:$iIndex}
{KEYWORD:end}.

{RELATED_COMMAND:To decrease the value of an INTEGER,dec,Maths}</t>


<!--dec $0-->
<t id="143">Decreases the INTEGER $0 by one.  This is commonly used to create code loops.

{HEADING:Example}

{VARIABLE:$iIndex} = 5
{KEYWORD:while} \({VARIABLE:$iIndex} &gt;= 0\)
\t...
\t{COMMAND:dec} {VARIABLE:$iIndex}
{KEYWORD:end}.

{RELATED_COMMAND:To increase the value of an INTEGER,inc,Maths}</t>

<!-- ********************************************************************************** -->
<!-- ********************************** X2 OBJECT ACTIONS ***************************** -->
<!-- ********************************************************************************** -->

<!--%0 send signal %1 : arg1=%2, arg2=%3, arg3=%4, arg4=%5-->
<!--<t id="515">write me!</t>-->


<!--<t id="538">%0 set command: %1  target=%2 target2=%3 par1=%4 par2=%5</t>-->


<!--set position of sector object %0 : x=%1 y=%2 z=%3-->
<t id="769">Sets the co-ordinates of the SECTOROBJECT $0.</t>


<!--set safe position of sector object %0 : x=%1 y=%2 z=%3-->
<t id="770">Sets the co-ordinates of the SECTOROBJECT $0.  If another OBJ is already occupying this space, the SECTOROBJECT $0 is placed nearby.</t>


<!--set rotation of sector object %0 : x=%1 y=%2 z=%3-->
<t id="771">Sets the {PROPERTY:yaw}, {PROPERTY:pitch} and {PROPERTY:roll} of the SECTOROBJECT $0.

{ABOUT_OBJECT_ROTATION}</t>


<!-- ********************************************************************************** -->
<!-- ********************************** X2 OBJECT PROPERTIES  ************************* -->
<!-- ********************************************************************************** -->

<!--%0 set local variable: name=%1 value=%2-->
<t id="155">Sets the {PROPERTY:local variable} with the name $1, stored the OBJ $0, to the value $2.

{ABOUT_LOCAL_AND_GLOBAL_VARIABLES}</t>


<!--%2%0 get local variable: name=%1-->
<t id="156">Returns the value of the {PROPERTY:local variable} with the name $1, stored on the OBJ $0.

{ABOUT_LOCAL_AND_GLOBAL_VARIABLES}</t>



<!--%1%0 is docking allowed at %2-->
<t id="513">Returns TRUE if the SHIP $0 is permitted to dock at the {CLASS:Carrier} or STATION $2, otherwise it returns FALSE.</t>


<!--%0 set command: %1-->
<t id="524">Informs the OBJ $0 that it is currently executing the {TYPE:command} $1 and should display the {PROPERTY:command name} to the user.

{HEADING:Information}

This command does not order the OBJ $0 to execute the {TYPE:command} $1, it only displays the {PROPERTY:command name} to the user.

This command can only be executed by an OBJ upon itself, using {VARIABLE:\[THIS\]}.</t>


<!--%1%0 get command-->
<t id="525">Returns the {TYPE:command} currently being executed by the OBJ $0.  

This must have been previously set by the {COMMAND:set command:} command or activated by the user through the user interface.</t>


<!--%0 set command target: %1-->
<t id="526">Informs the OBJ $0 that the {PROPERTY:primary target} of the {TYPE:command} it is executing is the OBJ $1, and displays this information to the user.

{HEADING:Information}

This does not change the true {PROPERTY:target} of the current {TYPE:command}, it only displays the {PROPERTY:primary command target} to the user.

This command can only be executed by an OBJ upon itself, using {VARIABLE:\[THIS\]}.</t>


<!--%1%0 get command target-->
<t id="527">Returns the {PROPERTY:primary target} of the {TYPE:command} currently being executed by the OBJ $0.  

This must have been previously set using the {COMMAND:set command target:} command.</t>


<!--%0 set command target2: %1-->
<t id="528">Informs the OBJ $0 that the {PROPERTY:secondary target} of the {TYPE:command} it is executing is the OBJ $1, and displays this information to the user.

{HEADING:Information}

This does not change the true {PROPERTY:target} of the current {TYPE:command}, it only displays the {PROPERTY:secondary command target} to the user.

This command can only be executed by an OBJ upon itself, using {VARIABLE:\[THIS\]}.</t>


<!--%1%0 get command target2-->
<t id="529">Returns the {PROPERTY:secondary target} of the {TYPE:command} currently being executed by the OBJ $0.  

This must have been previously set by the {COMMAND:set command target2:} command.</t>


<!--%1%0 find nearest missile aiming to me-->
<t id="558">Returns the nearest MISSILE aiming at the OBJ $0, if any, otherwise it returns NULL.</t>


<!--%0 get number of subtypes of maintype %1-->
<t id="658">Returns the number of SUBTYPES within the MAINTYPE $1.

{ABOUT_MAINTYPES_AND_SUBTYPES}</t>


<!--$1 $0 get maintype-->
<t id="659">Returns the MAINTYPE of the OBJ $0.

{ABOUT_MAINTYPES_AND_SUBTYPES}

{HEADING:Usage}

You can access any MAINTYPE as a constant eg. {CONSTANT:SSTYPE_SHIP}, {CONSTANT:SSTYPE_FACTORY} or {CONSTANT:SSTYPE_ASTEROID}.  Alternatively you can access them as INTEGERS.

{RELATED_SCRIPT_OBJECT_LIST:MainTypes,Constants}</t>


<!--$1 $0 get subtype-->
<t id="660">Returns the SUBTYPE of the OBJ $0.

{ABOUT_MAINTYPES_AND_SUBTYPES}

{HEADING:Usage}

You can only access a SUBTYPE as an INTEGER.  These are defined by their order within their own TFILE.

{HEADING:Type Files}

The {TYPE:objects} in each MAINTYPE are defined by a comma delimited text file in the `Types` subfolder of the game folder hierarchy.  X_EDITOR is recommended for viewing or editing these files.</t>


<!--$1 $0 get object class-->
<t id="700">Returns the OBJCLASS of the OBJ $0.

{ABOUT_OBJECT_CLASSES}

{RELATED_SCRIPT_OBJECT_LIST:Object Classes,Object Classes}</t>


<!--%1%0 get owner race-->
<t id="701">Returns the RACE that is the {PROPERTY:owner} of the OBJ $0.</t>


<!--%1%0 get environment-->
<t id="702">Returns the current {PROPERTY:environment} of the OBJ $0.

{ABOUT_ENVIRONMENT}</t>


<!--%1%0 get sector-->
<t id="703">Returns the SECTOR containing the OBJ $0.

If $0 is a SHIP that is DOCKED, then this command returns the SECTOR containing the {CLASS:Carrier} or STATION within which $0 is DOCKED.</t>


<!--$1 $0 is of class $2-->
<t id="705">Determines whether the OBJ $0 is of the OBJCLASS $2.

Returns TRUE if the OBJ $0 is of the OBJCLASS $2, otherwise it returns FALSE.

{ABOUT_OBJECT_CLASSES}

{RELATED_SCRIPT_OBJECT_LIST:Object Classes,Object Classes}</t>


<!--$1 $0 exists-->
<t id="706">Determines whether the OBJ $0 has been destroyed.

Returns TRUE if the OBJ $0 exists, and FALSE otherwise.</t>


<!--%1%0 get ware type code of object-->
<t id="707">Retrieves the WARE corresponding to the OBJ $0.  If the OBJ $0 is not represented by any WARE, this command returns {TYPE:Unknown Object}.</t>


<!--$1 $0 is of type $2-->
<t id="710">Determines whether the OBJ $0 is a specific OBJTYPE, such as {OBJECT:Argon Buster} or {OBJECT:Royal Boron Trading Station}.

Returns TRUE if the OBJ $0 is of the OBJTYPE $2, otherwise it returns FALSE.</t>


<!--$1 $0 get current shield strength-->
<t id="714">Returns the current {PROPERTY:shield energy} of the OBJ $0, in {UNITS:Joules}.

{RELATED_GAME_OBJECT_LIST:Shields,Shields}</t>


<!--$1 $0 get maximum shield strength-->
<t id="715">Returns the maximum {PROPERTY:shield energy} of the OBJ $0, in {UNITS:Joules}.

{RELATED_GAME_OBJECT_LIST:Shields,Shields}</t>


<!--$1 $0 get current laser strength-->
<t id="716">Returns the current {PROPERTY:laser energy} of the LASER currently in use by the OBJ $0, in {UNITS:Joules}.

{RELATED_GAME_OBJECT_LIST:Lasers,Lasers}</t>


<!--$1 $0 get maximum laser strength-->
<t id="717">Returns the maximum {PROPERTY:laser energy} of the LASER currently in use by the OBJ $0, in {UNITS:Joules}.

{RELATED_GAME_OBJECT_LIST:Lasers,Lasers}</t>


<!--%1%0 get max. shield type that can be installed-->
<t id="718">%1%0 get max. shield type that can be installed</t>


<!--%1%0 get max. laser type that can be installed-->
<t id="719">%1%0 get max. laser type that can be installed</t>


<!--$1 $0 get number of shield bays-->
<t id="720">Returns the maximum number of SHIELDS that can be installed on the OBJ $0.

{RELATED_GAME_OBJECT_LIST:Shields,Shields}</t>


<!--$1 $0 get number of laser bays-->
<t id="721">Returns the maximum number of LASERS that can be installed on the OBJ $0.

{RELATED_GAME_OBJECT_LIST:Lasers,Lasers}</t>


<!--%1%0 get max. missile type that can be installed-->
<t id="722">Returns the most powerful MISSILE WARE that can be installed on the SHIP $0.</t>


<!--%1%0 get relation to object %2-->
<t id="723">Returns whether the OBJ $2 is a {PROPERTY:friend}, {PROPERTY:enemy} or {PROPERTY:neutral} towards the OBJ $2. </t>


<!--%1%0 get relation to race %2-->
<t id="724">Returns whether the {PROPERTY:owner race} of the OBJ $0 is generally a {PROPERTY:friend}, {PROPERTY:enemy} or {PROPERTY:neutral} towards the RACE $2.</t>


<!--$1 $0 is $2 a enemy-->
<t id="727">Determines the {PROPERTY:relationship} between two {TYPE:objects}.  Return TRUE if the OBJ $0 is an {PROPERTY:enemy} of the object $2, otherwise FALSE.

{RELATED_SCRIPT_OBJECT_LIST:Relations,Relations}</t>


<!--$1 $0 is $2 a friend-->
<t id="728">Determines the {PROPERTY:relationship} between two {TYPE:objects}.  Return TRUE if the OBJ $0 is a {PROPERTY:friend} of the object $2, otherwise FALSE.

{RELATED_SCRIPT_OBJECT_LIST:Relations,Relations}</t>


<!--%1%0 is %2 neutral to me-->
<t id="729">Determines the {PROPERTY:relationship} between two {TYPE:objects}.  Return TRUE if the OBJ $0 is {PROPERTY:neutral} towards the object $2, otherwise FALSE.

{RELATED_SCRIPT_OBJECT_LIST:Relations,Relations}</t>


<!--%1%0 get shield type in bay %2-->
<t id="730">Returns the SHIELD in {PROPERTY:bay} $2 of the OBJ $0.</t>


<!--%1%0 get laser type in bay %2-->
<t id="731">Returns the currently installed LASER in {TYPE:turret 0} of the OBJ $0.</t>


<!--%1%0 has same environment as %2-->
<t id="732">Determines whether the OBJ $0 has the same {PROPERTY:environment} as the OBJ $2.

{ABOUT_ENVIRONMENT}</t>


<!--%1%0 is in same sector as %2-->
<t id="733">Returns TRUE if the OBJ $0 is in the same SECTOR as the OBJ $2, otherwise it returns FALSE.</t>


<!--%1%0 is landed-->
<t id="734">Returns TRUE if the SHIP $0 is DOCKED within a STATION or larger SHIP, otherwise it returns FALSE.</t>

<!--%1%0 is in a sector-->
<t id="735">Returns FALSE if the OBJ $0 is DOCKED, otherwise it returns TRUE.</t>


<!--%1%0 get attacker-->
<t id="736">Returns the OBJ attacking the OBJ $0, if any, otherwise it returns NULL.</t>


<!--%0 set attacker to %1-->
<t id="737">Marks the OBJ $1 as being the {PROPERTY:attacker} of the OBJ $0.

This also occurs automatically when one OBJ attacks another.</t>


<!--%1%0 get x position-->
<t id="740">Returns the x co-ordinate of the OBJ $0.</t>


<!--%1%0 get y position-->
<t id="741">Returns the y co-ordinate of the OBJ $0.</t>


<!--%1%0 get z position-->
<t id="742">Returns the z co-ordinate of the OBJ $0.</t>


<!--%0 set relation against %1 to %2-->
<t id="744">Sets the {PROPERTY:relation} of the OBJ $0 towards the OBJ $1 to a {TYPE:relation} $2.

This may have to be done in both directions.</t>


<!--$1 $0 is docked-->
<t id="745">Returns TRUE if the SHIP $0 is DOCKED within a STATION or DOCKED outside a STATION, otherwise it returns FALSE.</t>


<!--%1%0 is docking possible of %2-->
<t id="746">Returns TRUE if the {CLASS:Carrier} or STATION $0 is physically able to dock at the SHIP $2, otherwise it returns FALSE.{CORRECTION:DrBullwinkle}</t>


<!--$1 $0 is disabled-->
<t id="759">{NOT_IMPLEMENTED}</t>


<!--VARIATION     %1%0 get SectorObject ID-->
<t id="761">Returns the unique ID of the SECTOROBJECT $0.

{ABOUT_SECTOR_OBJECTS}

{COMPATIBILITY_2:X2,X3R}</t>


<!--%1 get ware type of SectorObject %0-->
<t id="762">{UNDOCUMENTED}</t>



<!--%1 exists SectorObject %0-->
<t id="763">Determines whether a SECTOROBJECT has been destroyed.

Return TRUE if the SECTOROBJECT $0 exists, otherwise it returns FALSE.

{ABOUT_SECTOR_OBJECTS}</t>


<!--%1 get object from SectorObject %0-->
<t id="764">Retrieves the OBJ represented by the SECTOROBJECT $0.

{ABOUT_SECTOR_OBJECTS}</t>


<!--%0 set position: x=%1 y=%2 z=%3-->
<t id="767">Sets the co-ordinates of the OBJ $0.</t>


<!--%0 set rotation: alpha=%1 beta=%2 gamma=%3-->
<t id="768">Sets the {PROPERTY:yaw}, {PROPERTY:pitch} and {PROPERTY:roll} of the OBJ $0.

{ABOUT_OBJECT_ROTATION}</t>


<!--%1%0 get rot alpha-->
<t id="777">Returns the {PROPERTY:yaw} \(x-axis\) of the OBJ $0, in {UNITS:integer degrees}

{ABOUT_OBJECT_ROTATION}
{HEADING:Integer Degrees}

All angles between 0º and 360º are expressed as INTEGERS between 0 and 65,536.</t>


<!--%1%0 get rot beta-->
<t id="778">Returns the {PROPERTY:pitch} \(y-axis\) of the OBJ $0, in {UNITS:integer degrees}

{ABOUT_OBJECT_ROTATION}
{HEADING:Integer Degrees}

All angles between 0º and 360º are expressed as INTEGERS between 0 and 65,536.</t>


<!--%1%0 get rot gamma-->
<t id="779">Returns the {PROPERTY:roll} \(z-axis\) of the OBJ $0, in {UNITS:integer degrees}

{ABOUT_OBJECT_ROTATION}
{HEADING:Integer Degrees}

All angles between 0º and 360º are expressed as INTEGERS between 0 and 65,536.</t>


<!--%1%0 get size of object-->
<t id="780">Returns the radius of the bounding sphere of the OBJ $0, multiplied by 222.</t>


<!--$1 $0 get max hull-->
<t id="786">Returns the maximum {PROPERTY:hull energy} of the OBJ $0.</t>


<!--$1 $0 get hull-->
<t id="787">Returns the current {PROPERTY:hull energy} of the OBJ $0.</t>


<!--%1%0 get dock bay size-->
<t id="789">Returns the number of SHIPS that can be DOCKED at the {CLASS:Carrier} or STATION $0.

For STATIONS this is fixed at one million.</t>


<!--%1%0 get number of landed ships-->
<t id="790">Returns the number of SHIPS {PROPERTY:docked} within the {CLASS:Carrier} or STATION $0.</t>


<!--%0 set ship disabled to %1-->
<t id="793">{NOT_IMPLEMENTED}</t>


<!--%1%0 get hull percent-->
<t id="900">Returns the current {PROPERTY:hull energy} of the OBJ $0 as a percentage.</t>


<!--%1%0 get shield percent-->
<t id="901">Returns the current {PROPERTY:shield energy} of the OBJ $0 as a percentage.</t>


<!--%1%0 get shield and hull percent-->
<t id="902">Returns the total of the current {PROPERTY:hull energy} and {PROPERTY:shield energy} of the OBJ $0, as a percentage.</t>


<!--%1%0 is landing-->
<t id="904">Returns TRUE if the OBJ $0 is on "final approach" to a STATION, {CLASS:Carrier}, or JUMPGATE, otherwise this command returns FALSE.</t>


<!--%1%0 is starting-->
<t id="905">Returns TRUE if the OBJ $0 is launching from a STATION or {CLASS:Carrier}, otherwise FALSE.</t>


<!--VARIATION       %1%0 has a free big ship dock slot-->
<t id="1019">Returns TRUE if a {CLASS:Big Ship} is capable of docking at the OBJ $0 and there is a free docking slot available, otherwise it returns FALSE.

{COMPATIBILITY_1:X2}</t>


<!--%1%0 can be controlled by race logic-->
<t id="1020">Returns TRUE if the OBJ $0 can be controlled by {TERMINOLOGY:Race Logic}, otherwise it returns FALSE.

{ABOUT_RACE_LOGIC}</t>


<!--%0 set race logic control enabled to %1-->
<t id="1021">Enables or disables the use of {TERMINOLOGY:Race Logic} on the OBJ $0.

{ABOUT_RACE_LOGIC}</t>


<!--%1%0 can execute StartAction-->
<t id="1022">Returns TRUE if the OBJ $0 can execute it`s {TERMINOLOGY:Start Action}, otherwise it returns FALSE.

{ABOUT_START_ACTIONS}</t>


<!--%0 set StartAction enabled to %1-->
<t id="1023">Enables or disables the {TERMINOLOGY:Start Action} of the OBJ $0.

{ABOUT_START_ACTIONS}</t>

<!--%1%0 get name-->
<t id="1028">Returns the {PROPERTY:name} of the OBJ $0.</t>


<!--%0 set name to %1-->
<t id="1029">Sets the {PROPERTY:name} of the OBJ $0 to $1.</t>


<!--%0 set owner race to %1-->
<t id="1030">Changes the {PROPERTY:owner} of the OBJ $0 to the RACE $1.</t>


<!--%1%0 get ID code-->
<t id="1036">Returns the unique code of an OBJ displayed in the {TERMINOLOGY:Sector Map} that is meant to represent it`s registry within the game universe. eg. YM2XL-21.</t>



<!-- ********************************************************************************** -->
<!-- ********************************** X2  PLAYER ************************************ -->
<!-- ********************************************************************************** -->

<!--<t id="141">%0playing time</t>-->

<!--add money to player: %0-->
<t id="662">Adds $0 {UNITS:credits} to the {PROPERTY:player account}.

If $0 is a negative INTEGER, the {UNITS:credits} are deducted.</t>


<!--player loses police licence for race %0-->
<t id="791">Causes the player to lose their {PROPERTY:police licence} issued by the RACE $0.</t>


<!--%0get player money-->
<t id="626">Returns the number of {UNITS:credits} in the {PROPERTY:account} of the player.</t>


<!-- ********************************************************************************** -->
<!-- ********************************** X2  SHIP  ACTIONS ***************************** -->
<!-- ********************************************************************************** -->

<!--%1%0 fly to home base-->
<t id="500">Commands the SHIP $0 to undock, fly to, and dock at it`s HOMEBASE.

{RETURNS_FLIGHT_CODE}

{CONSTANT:\[FLRET_LANDED\]} - The SHIP docked at it`s HOMEBASE successfully
{FLIGHT_INTERRUPTED:flight}
{FLIGHT_BREAK:flight}
{FLIGHT_ERROR:flight}
{CONSTANT:\[FLRET_ERROR\]} - The SHIP has no HOMEBASE

{COMMAND_INTERRUPTABLE}

{RELATED_SCRIPT_OBJECT_LIST:Flight Return Codes,Flight Returns}</t>


<!--%1%0 fly to station %2-->
<t id="501">Commands the SHIP $0 to undock, fly to, and dock at the STATION $2.

{RETURNS_FLIGHT_CODE}

{CONSTANT:\[FLRET_LANDED\]} - The SHIP docked at the STATION $2 successfully
{FLIGHT_INTERRUPTED:flight}
{FLIGHT_BREAK:flight}
{FLIGHT_ERROR:flight}

{COMMAND_INTERRUPTABLE}

{RELATED_SCRIPT_OBJECT_LIST:Flight Return Codes,Flight Returns}</t>


<!--%1%0 fly to sector %2-->
<t id="502">Commands the SHIP $0 to undock and fly to the SECTOR $2.

If the SECTOR is invalid then the SHIP will fly to the SECTOR with co-ordinates \(0, 0\).

{RETURNS_FLIGHT_CODE}

{FLIGHT_NOCOMMANDS:flight}
{CONSTANT:\[FLRET_NOCOMMANDS\]} - The SECTOR $2 is unreachable
{FLIGHT_INTERRUPTED:flight}
{FLIGHT_INVALIDPARAMS}
{FLIGHT_BREAK:flight}

{COMMAND_INTERRUPTABLE}

{RELATED_SCRIPT_OBJECT_LIST:Flight Return Codes,Flight Returns}</t>



<!--%1%0 fire lasers on target %2 using turret %3-->
<t id="505">Fires the LASER installed in TURRET $3 of the OBJ $0 at the target OBJ $2.

If the LASER was fired successfully this command returns TRUE.

If the OBJ $2 is not within the {PROPERTY:firing arc} of the LASER, or the LASER is `cooling down` after the last shot, this command returns FALSE.</t>



<!--%1%0 attack run on target %2 : timeout=%3 ms-->
<t id="506">Commands the SHIP $0 to accelerate to {PROPERTY:maximum speed} and manoeuvre within {PROPERTY:firing range} of the OBJ $2 within a period of $3 {UNITS:milliseconds}.

{RETURNS_FLIGHT_CODE}

{CONSTANT:\[FLRET_FIREFREE\]} - The target OBJ is within range
{FLIGHT_TIMEOUT:3}
{CONSTANT:\[FLRET_BREAK\]} - The target OBJ is invalid
{CONSTANT:\[FLRET_BREAK\]} - The attack run was overriden by the collision avoidance routines
{FLIGHT_INTERRUPTED:attack run}
{FLIGHT_INVALIDPARAMS}

{HEADING:Information}

You can use this command repeatedly within the same attack run.  If the SHIP $0 is still in range, it will return {CONSTANT:\[FLRET_FIREFREE\]}.

{COMMAND_INTERRUPTABLE}

{RELATED_SCRIPT_OBJECT_LIST:Flight Return Codes,Flight Returns}</t>


<!--%1%0 move around %2 ms-->
<t id="507">Commands the SHIP $0 to move around randomly for the period $2 {UNITS:milliseconds}.

{RETURNS_FLIGHT_CODE}

{FLIGHT_NOCOMMANDS:movement}
{FLIGHT_INVALIDPARAMS}

{COMMAND_INTERRUPTABLE}

{RELATED_SCRIPT_OBJECT_LIST:Flight Return Codes,Flight Returns}</t>


<!--%1%0 escort ship %2-->
<t id="508">Commands the SHIP $0 to escort the SHIP $2 until that SHIP is destroyed or jumps to another SECTOR.

{RETURNS_FLIGHT_CODE}

{FLIGHT_BREAK_JUMPED:2}
{FLIGHT_INTERRUPTED:escort}
{FLIGHT_INVALIDPARAMS}

{HEADING:Egosoft Warning}

It is very difficult to cause this command to return.  Unlike most `fly` commands, this will not return {CONSTANT:FLRET_BREAK} if another process executes a different `fly` command on the SHIP $0.

You can regain control of the SHIP $0 from a different script using the the {COMMAND:set follow mode} FALSE command, but the {COMMAND:escort ship} command in the original script will not return.

Unless the target SHIP $2 jumps to another SECTOR or is destroyed, you must terminate the script or interrupt it with another script.

{SEE_HANDBOOK_PAGE:47}

{COMMAND_INTERRUPTABLE}

{RELATED_SCRIPT_OBJECT_LIST:Flight Return Codes,Flight Returns}</t>


<!--%1%0 follow object %2 with precision %3 m-->
<t id="516">Commands the SHIP $0 to move within a distance of $3 {UNITS:meters} of the the SHIP $2.

{RETURNS_FLIGHT_CODE}

{CONSTANT:\[FLRET_TARGETREACHED\]} - The SHIP has moved within range successfully
{FLIGHT_BREAK_JUMPED:2}
{FLIGHT_INTERRUPTED:movement}
{FLIGHT_INVALIDPARAMS}

{HEADING:Egosoft Warning}

It is very difficult to cause this command to return.  Unlike most `fly` commands, this will not return {CONSTANT:FLRET_BREAK} if another process executes a different `fly` command on the SHIP $0.

You can regain control of the SHIP $0 from a different script using the the {COMMAND:set follow mode} FALSE command, but the {COMMAND:escort ship} command in the original script will not return.

Unless the target SHIP $2 jumps to another SECTOR or is destroyed, you must terminate the script or interrupt it with another script.

{SEE_HANDBOOK_PAGE:49}

{COMMAND_INTERRUPTABLE}

{RELATED_SCRIPT_OBJECT_LIST:Flight Return Codes,Flight Returns}</t>



<!--$1 $0 move to position: x=$2x y=$3y z=$4z with precision $5a m-->
<t id="523">Commands the SHIP $0 to move within $5a {UNITS:meters} of the {PROPERTY:position} with co-ordinates \(x, y, z\).

You should use a larger value for the distance $5a if the SHIP $0 is particularly large, or the co-ordinates \(x, y, z\) are near other OBJS.

{RETURNS_FLIGHT_CODE}

{FLIGHT_NOCOMMANDS:movement}
{FLIGHT_INTERRUPTED:movement}
{FLIGHT_INVALIDPARAMS}

{HEADING:Egosoft Warning}

If another process executes a different `fly` command on the SHIP $0, this command will never return.  {SEE_HANDBOOK_PAGE:51}

{COMMAND_INTERRUPTABLE}

{RELATED_SCRIPT_OBJECT_LIST:Flight Return Codes,Flight Returns}</t>

<!--$1 $0 turn turret $3x to target $2 : timeout=$4y ms-->
<t id="539">Commands TURRET $3x of the SHIP $0 to turn to face the OBJ $2 within a period of $4y {UNITS:milliseconds}.

{RETURNS_FLIGHT_CODE}

{CONSTANT:\[FLRET_FIREFREE\]} - The {TYPE:turret} has turned to face the OBJ successfully
{FLIGHT_TIMEOUT:4y}
{FLIGHT_INTERRUPTED:turn}
{CONSTANT:\[FLRET_NOCOMMANDS\]} - One or more of the arguments is invalid

{HEADING:Egosoft Warning}

This command introduces a delay of around 250ms between aiming and firing which reduces the effective rate-of-fire of fast recharging LASERS.

{SEE_HANDBOOK_PAGE:45}

{COMMAND_INTERRUPTABLE}

{ABOUT_GUNS_AND_TURRETS}

{RELATED_SCRIPT_OBJECT_LIST:Flight Return Codes,Flight Returns}</t>


<!--%1%0 move to ware object %2 for collecting: timeout=%3 ms-->
<t id="540">Commands the SHIP $0 to move within collection range of the WARE $2 and point the SHIP towards it within a period of $3 {UNITS:milliseconds}.

{RETURNS_FLIGHT_CODE}

{CONSTANT:\[FLRET_FIREFREE\]} - The SHIP has moved within range successfully
{FLIGHT_BREAK:movement}
{FLIGHT_TIMEOUT:3}
{FLIGHT_INTERRUPTED:movement}
{FLIGHT_INVALIDPARAMS}

{COMMAND_INTERRUPTABLE}

{RELATED_SCRIPT_OBJECT_LIST:Flight Return Codes,Flight Returns}</t>


<!--%1%0 catch ware object %2-->
<t id="541">Transfers the WARE $2 into the cargo bay of the SHIP $0.  If the WARE will not fit into the cargo bay of the SHIP, the WARE is destroyed.

This command returns TRUE if the WARE $0 was successfully transferred to the SHIP $0, otherwise it returns FALSE.</t>


<!--%1%0 fire missile %3 on %2-->
<t id="542">Fires the MISSILE WARE $3 at the target OBJ $2.

Returns TRUE if the MISSILE was fired, otherwise this command returns FALSE.</t>


<!--%1%0 launch %2 fight drones: protect me or attack target=%3-->
<t id="546">Command the SHIP $0 to launch $2 {OBJECT:Fighter Drones}, either to protect itself or attack the OBJ $3.

If the OBJ $3 is NULL then the {OBJECT:Fighter Drones} will protect the SHIP $0, otherwise they will attack the OBJ $3.

Returns TRUE if the {OBJECT:Fighter Drones} were launched successfully, otherwise this command returns FALSE.</t>


<!--%1%0 escort ship %2: timeout=%3 ms-->
<t id="562">Commands the SHIP $0 to escort the SHIP $2 for a period of $3 {UNITS:milliseconds} or until that SHIP is destroyed or jumps to another SECTOR.

{RETURNS_FLIGHT_CODE}

{FLIGHT_BREAK_JUMPED:2}
{FLIGHT_TIMEOUT:3}
{FLIGHT_INTERRUPTED:escort}
{FLIGHT_INVALIDPARAMS}

{COMMAND_INTERRUPTABLE}

{RELATED_SCRIPT_OBJECT_LIST:Flight Return Codes,Flight Returns}</t>


<!--%1%0 follow object %2 with precision %3 m : timeout=%4 ms-->
<t id="563">Commands the SHIP $0 to move within a distance of $3 {UNITS:meters} of the the SHIP $2 within a period of $3 {UNITS:milliseconds}.

{RETURNS_FLIGHT_CODE}

{CONSTANT:\[FLRET_TARGETREACHED\]} - The SHIP has moved within range successfully
{FLIGHT_BREAK_JUMPED:2}
{FLIGHT_TIMEOUT:3}
{FLIGHT_INTERRUPTED:escort}
{FLIGHT_INVALIDPARAMS}

{COMMAND_INTERRUPTABLE}

{RELATED_SCRIPT_OBJECT_LIST:Flight Return Codes,Flight Returns}</t>



<!--%1%0 defensive move: type=%2, intensity=%3, timeout=%4ms, avoid object=%5-->
<t id="565">Commands the SHIP $0 to perform a defensive manoeuvre for the period of $4 {UNITS:milliseconds}.  This command will return NULL if the SHIP does not exist.

Custom {PROPERTY:manoeuvre types} are not supported and should always be NULL.

{HEADING:Optional Parameters}

Command the SHIP to manoeuvre away from the OBJ $5
Define the sharpness of the turns with the {PROPERTY:intensity} {UNITS:percentage} of $3

{RETURNS_FLIGHT_CODE}

{FLIGHT_NOCOMMANDS:manoeuvre}
{FLIGHT_INTERRUPTED:manoeuvre}

{COMMAND_INTERRUPTABLE}

{RELATED_SCRIPT_OBJECT_LIST:Flight Return Codes,Flight Returns}</t>


<!--%1%0 decouple ships-->
<t id="560">Commands the {OBJECT:Kh`aak Cluster} $0 to break apart.

Returns TRUE if successful, and FALSE otherwise.</t>


<!--%1%0 is decoupled ships leader-->
<t id="561">Returns TRUE if the SHIP $0 is the FORMATIONLEADER of a decoupled {OBJECT:Kh`aak Cluster}.</t>


<!--%0 add default items to ship-->
<t id="645">Installs the default SHIELD, LASER and {TYPE:ammunition} WARES to the SHIP $0.</t>


<!--$0 switch laser in turret $2 gun $3x to $1y-->
<t id="648">Installs the GUN $1y in {PROPERTY:gun slot} $3x of TURRET $2 on the SHIP $0.

{ABOUT_GUNS_AND_TURRETS}</t>


<!--%1%0 use jump drive: target=%2-->
<t id="566">Commands the SHIP $0 to jump to the SECTOR or JUMPGATE $2.

Return TRUE if successful, otherwise FALSE.</t>


<!--%1%0 check, select and fire missile on %2-->
<t id="568">Commands the SHIP $0 to fire a MISSILE on the OBJ $2, if the {PROPERTY:missile fire probability} of the SHIP indicates it is appropriate to do so.

Returns TRUE if a MISSILE was fired, and FALSE otherwise.</t>

<!-- ********************************************************************************** -->
<!-- ******************************** X2 SHIP PROPERTIES ****************************** -->
<!-- ********************************************************************************** -->

<!--%0 set formation %1-->
<t id="509">Sets the FORMATION of the {PROPERTY:followers} of the SHIP $0 to the FORMATION $1.

{RELATED_SCRIPT_OBJECT_LIST:Formations,Formations}</t>


<!--%0 add to formation with leader %1-->
<t id="510">Adds the SHIP $0 to the FORMATION whose {PROPERTY:leader} is the SHIP $1.

{HEADING:Information}

{TYPE:Ships} that are in a FORMATION receive special {TYPE:signals}.

{RELATED_SCRIPT_OBJECT_LIST:Signals,Signals}</t>


<!--%0 remove from any formation-->
<t id="511">Removes the SHIP $0 from any FORMATION it may be in.</t>


<!--%1%0 get formation leader-->
<t id="512">Returns the SHIP that is the {PROPERTY:leader} of the FORMATION to which the SHIP $0 belongs.  If the SHIP $0 belongs to no FORMATION, the command returns NULL.</t>


<!--%0 set follow mode %1-->
<t id="517">Enables or disables {PROPERTY:follow mode} on the SHIP $0, allowing a different script to take control of the SHIP while it is executing a {COMMAND:escort} or {COMMAND:follow} command.

Set $1 to TRUE to enable {PROPERTY:follow mode}, and FALSE to disable it.

{HEADING:Information}

This will not cause the {COMMAND:escort} or {COMMAND:follow} command to return {CONSTANT:\[FLTRET_BREAK\]}

{SEE_HANDBOOK_PAGE:50}</t>


<!--%1%0 get follow mode-->
<t id="518">Returns TRUE if the SHIP $0 is in {PROPERTY:follow mode}, and FALSE otherwise.</t>


<!--%0 set destination to %1-->
<t id="519">Sets the {PROPERTY:destination} of the SHIP $0 to the OBJ or SECTOR $1.

This does not change the true {PROPERTY:destination} of the SHIP $0, it only displays the {PROPERTY:destination} to the user.</t>


<!--%1%0 get destination-->
<t id="520">Returns the OBJ or SECTOR marked as the {PROPERTY:destination} of the SHIP $0.

This must have been previously set by the {COMMAND:set destination to ...} command.</t>


<!--%0 set attack target to %1-->
<t id="521">Sets the {PROPERTY:attack target} of the SHIP $0 to the OBJ $1.

This does not change the true {PROPERTY:target} of the SHIP $0, it only displays the {PROPERTY:target} to the user.</t>


<!--%1%0 get attack target-->
<t id="522">Returns the OBJ marked as the {PROPERTY:attack target} of the SHIP $0.

This must have been previously set by the {COMMAND:set attack target} command.</t>


<!--$1 $0 select new formation leader by: ship class=$2x strength=$3y min.speed=$4z-->
<t id="530">Searches a FORMATION of SHIPS for the strongest, slowest or OBJCLASS most appropriate to be new FORMATIONLEADER.  This is usually performed after the existing FORMATIONLEADER has been destroyed.

Set the desired property to TRUE and remaining properties to FALSE.

This command does not assign a new FORMATIONLEADER, it only determines the best candidate.

{RELATED_COMMAND:To assign a SHIP as FORMATIONLEADER,give formation leadership to,Ship Property}</t>


<!--%1%0 has formation ships-->
<t id="531">Returns TRUE if the SHIP $0 is a FORMATIONLEADER, otherwise it returns FALSE.</t>


<!--%0 give formation leadership to %1-->
<t id="532">Promotes the SHIP $0 to {PROPERTY:leader} of the FORMATION to which it belongs.

Returns TRUE if succesful, otherwise this command returns FALSE.</t>


<!--%1%0 is %2 in firing range of turret %3-->
<t id="536">Returns TRUE if the OBJ $2 is within {PROPERTY:firing range} of TURRET $3 of the SHIP $0, otherwise it returns FALSE.

{ABOUT_GUNS_AND_TURRETS}</t>


<!--%1%0 find enemy in firing range of turret %2-->
<t id="537">Returns a random {PROPERTY:enemy} SHIP within {PROPERTY:firing range} of TURRET $2 of the SHIP $0, if any, otherwise it returns NULL.

{ABOUT_GUNS_AND_TURRETS}</t>


<!--%1%0 get current missile-->
<t id="543">Returns the MISSILE WARE currently installed on the SHIP $0, if any, otherwise it returns NULL.</t>


<!--%1%0 find best missile for target %2-->
<t id="544">Returns the most appropriate MISSILE WARE with which to attack the OBJ $2, out of the current MISSILES aboard the SHIP $0.</t>


<!--%0 best missile type for target %1-->
<t id="545">Returns the most appropriate MISSILE WARE with which to attack the OBJ $1.</t>


<!--%1%0 is missile %2 ready to fire-->
<t id="547">Returns TRUE if the SHIP $0 has the MISSILE WARE $2 in it`s cargo bay and is capable of firing them, otherwise it returns FALSE.</t>


<!--%1%0 should a missile be fired-->
<t id="548">Checks the {PROPERTY:missile fire probability} of the SHIP $0 and determines whether a MISSILE should be fired.

Returns TRUE if a MISSILE should be fired, and FALSE otherwise.

{RELATED_COMMAND:To fire a MISSILE if approprate in a single command,check select and fire missile,Ship Action}</t>


<!--%1%0 get fire missile probability-->
<t id="549">Returns the {PROPERTY:missile fire probability} of the SHIP $0, as a {UNITS:percentage}.</t>


<!--%1%0 get fire missile time difference in seconds-->
<t id="550">{NOT_IMPLEMENTED}</t>


<!--%0 set fire missile probability to %1-->
<t id="551">Sets the {PROPERTY:missile fire probability} {UNITS:percentage} of the SHIP $0.</t>


<!--%0 set fire missile time difference to %1 s-->
<t id="552">{NOT_IMPLEMENTED}</t>


<!--%1%0 fits laser %2 into turret %3-->
<t id="553">Returns TRUE if the LASER $2 is compatible with TURRET $2 of the SHIP $0, otherwise this command returns FALSE.

{ABOUT_GUNS_AND_TURRETS}</t>


<!--%1%0 get max. number of lasers in turret %2-->
<t id="554">Returns the maximum number of GUNS that can be held in TURRET $2 of the SHIP $0.

{ABOUT_GUNS_AND_TURRETS}</t>


<!--$1 $0 get laser type in turret $2x at slot $3y-->
<t id="555">Returns the LASER WARE currently installed in {PROPERTY:gun slot} $3y of TURRET $2x on the SHIP $0.

If that {PROPERTY:gun slot} is currently empty, this command returns NULL.

{ABOUT_GUNS_AND_TURRETS}</t>


<!--%1%0 get number of turrets-->
<t id="556">Returns the number of TURRETS on the SHIP $0.

{ABOUT_GUNS_AND_TURRETS}</t>


<!--%1%0 get formation follower ships-->
<t id="559">Returns a new ARRAY containing all the SHIPS in the FORMATION of which the SHIP $0 is a member.  If the SHIP is not in a FORMATION, this command returns NULL.</t>


<!--%1%0 needed jump drive energy for jump to sector %2-->
<t id="567">Returns the {PROPERTY:ware quantity} of {OBJECT:Energy Cells} required to jump from the SECTOR containing the SHIP $0 to the SECTOR $2.

{HEADING:Information}

If the SHIP $0 is in the same SECTOR as $2, this command returns the {PROPERTY:ware quantity} of {OBJECT:Energy Cells} required to jump between adjacent SECTORS.</t>


<!--%1%0 get max trade jumps-->
<t id="644">Returns the maximum {PROPERTY:jump distance} that a SHIP $0, OWNEDBY to a STATION, will travel to buy or sell WARES.</t>


<!--%1%0 has illegal ware onboard: race=%2-->
<t id="654">Returns TRUE if the SHIP $0 has WARES onboard that are {PROPERTY:illegal} in the SECTORS OWNEDBY by the RACE $2, otherwise this command returns FALSE.</t>


<!--%0 set homebase to %1-->
<t id="713">Sets the {PROPERTY:homebase} of the SHIP $0 to the {CLASS:Carrier} or STATION $1.</t>


<!--%1%0 get max upgrades for upgrade %2-->
<t id="784">Returns the maximum number of {PROPERTY:upgrades} of the {PROPERTY:installed component} WARE $2 that can be installed on the SHIP $0.</t>


<!--%1%0 get homebase-->
<t id="704">Returns the {PROPERTY:homebase} of the SHIP $0, if any, otherwise this commands returns NULL.</t>


<!--$1 $0 get max speed-->
<t id="785">Returns the maximum {PROPERTY:speed} of the OBJ $0.</t>


<!--%1%0 get max upgraded speed-->
<t id="788">Returns the {PROPERTY:maximum speed} of the SHIP $0, assuming all {OBJECT:Engine Tunings} were installed.</t>


<!--%1%0 get max laser strength in turret %2-->
<t id="903">Returns the maximum {PROPERTY:laser energy}, in {UNITS:Joules}, of all the GUNS in the TURRET of the OBJ $0.</t>


<!--%0 set as player wingman: %1-->
<t id="1026">Adds or removes the SHIP $0 as the {PROPERTY:wingman} of the player`s SHIP.

Set $1 to TRUE to add the SHIP $0 as the {PROPERTY:wingman} and FALSE to remove.</t>


<!--%1%0 is player wingman-->
<t id="1027">Returns TRUE if the SHIP $0 if the {PROPERTY:wingman} of the player`s SHIP, and FALSE otherwise.</t>

<!-- ********************************************************************************** -->
<!-- ******************************** X2 SHIP TRADING ********************************* -->
<!-- ********************************************************************************** -->


<!--%1%0 buy %2 units of %3-->
<t id="601">Buys a {PROPERTY:ware quantity} of $2 {UNITS:units} of the WARE $3 into the cargo bay of the SHIP $0 from the STATION at which the SHIP is docked.

If there is insufficient {PROPERTY:cargo bay space} or the STATION does not have $2 {UNITS:units} for sale, the maximum allowable number of {UNITS:units} are transferred.

If the SHIP $0 has a {PROPERTY:homebase}, the cost of the purchase is deducted from the {PROPERTY:homebase account}, otherwise it is deducted from the {PROPERTY:player account}.

This command returns the actual number of {UNITS:units} bought.</t>


<!--$1 $0 buy $2x units of $3 to a max. price of $4y cr-->
<t id="602">Buys a {PROPERTY:ware quantity} of $2 {UNITS:units} of the WARE $3 into the cargo bay of the SHIP $0 from the STATION at which the SHIP is docked, but only if the {PROPERTY:ware price} is less than or equal to $4y credits.

If there is insufficient {PROPERTY:cargo bay space} or the STATION does not have $2 {UNITS:units} for sale, the maximum allowable number of {UNITS:units} are transferred.

If the SHIP $0 has a {PROPERTY:homebase}, the cost of the purchase is deducted from the {PROPERTY:homebase account}, otherwise it is deducted from the {PROPERTY:player account}.

This command returns the actual number of {UNITS:units} bought.</t>


<!--%1%0 sell %2 units of %3-->
<t id="603">Sells a {PROPERTY:ware quantity} of $2 {UNITS:units} of the WARE $3 from the cargo bay of the SHIP $0 to the STATION at which the SHIP is docked.

If $2 is more than the {PROPERTY:ware quantity} aboard the SHIP, or the STATION does not have enough {PROPERTY:cargo bay space} for $2 {UNITS:units}, the maximum allowable number of {UNITS:units} are transferred.

If the SHIP $0 has a {PROPERTY:homebase}, the money from the sale is added to the {PROPERTY:homebase account}, otherwise it is added to the {PROPERTY:player account}.

This command returns the actual number of {UNITS:units} sold.</t>


<!--%1%0 get max. ware transport class-->
<t id="610">Returns the largest {TYPE:transport class} that the SHIP $0 can hold.</t>


<!--%1%0 get cargo bay size-->
<t id="611">Returns the {PROPERTY:volume} of occupied and unoccupied cargo bay space of the SHIP $0.</t>


<!--%1%0 get free volume of cargo bay-->
<t id="612">Returns the {PROPERTY:volume} of the unoccupied cargo bay space of the SHIP $0.</t>


<!--%1%0 get volume of ware %2 in cargo bay-->
<t id="613">Returns the {PROPERTY:volume} occupied by the WARE $2 in the cargo bay and as {PROPERTY:installed components} of the SHIP $0.</t>


<!--%1%0 get true volume of ware %2 in cargo bay-->
<t id="614">Returns the {PROPERTY:volume} occupied by the WARE $2 in the cargo bay of the SHIP $0.</t>


<!--%1%0 get free volume of ware %2 in cargo bay-->
<t id="615">Returns the {PROPERTY:volume} of the WARE $2 that could potentially fit in the unoccupied cargo space of the SHIP $0.</t>


<!--%1%0 get total volume in cargo bay-->
<t id="616">Returns the {PROPERTY:volume} of the occupied cargo bay space of the SHIP $0.</t>


<!--%1%0 can transport ware %2-->
<t id="617">Returns TRUE if the SHIP $0 is capable of transporting the WARE $2, and FALSE otherwise.</t>


<!--%1%0 get amount of ware %2 in cargo bay-->
<t id="618">Returns the total {PROPERTY:ware quantity} of the WARE $2 in the cargo bay and as {PROPERTY:installed components} of the SHIP $0.</t>


<!--%1%0 get true amount of ware %2 in cargo bay-->
<t id="619">Returns the total {PROPERTY:ware quantity} of the WARE $2 in the cargo bay of the SHIP $0.</t>


<!--%1%0 get free amount of ware %2 in cargo bay-->
<t id="620">Returns the {PROPERTY:quantity} of the WARE $2 that could potentially fit in the unoccupied cargo space of the SHIP $0.</t>


<!--%1%0 get max amount of ware %2 that can be stored in cargo bay-->
<t id="621">Returns the potential {PROPERTY:quantity} of the WARE $2 that would be contained in the cargo bay of the SHIP $0, if all the remaining space were filled with the WARE $2.

This includes any of the WARE $2 that is already in the cargo bay.</t>


<!--%1%0 load %2 units of %3-->
<t id="639">Transfers a {PROPERTY:ware quantity} of $2 {UNITS:units} of the WARE $3 into the cargo bay of the SHIP $0 from the STATION at which the SHIP is docked.

If there is insufficient {PROPERTY:cargo bay space} or the STATION does not have $2 {UNITS:units} for sale, the maximum allowable number of {UNITS:units} are transferred.

No money is exchanged in this transaction.

This command returns the actual number of {UNITS:units} transferred.</t>


<!--%1%0 unload %2 units of %3-->
<t id="640">Transfers a {PROPERTY:ware quantity} of $2 {UNITS:units} of the WARE $3 from the cargo bay of the SHIP $0 to the STATION at which the SHIP is docked.

If $2 is more than the {PROPERTY:ware quantity} aboard the SHIP, or the STATION does not have enough {PROPERTY:cargo bay space} for $2 {UNITS:units}, the maximum allowable number of {UNITS:units} are transferred.

No money is exchanged in this transaction.

This command returns the actual number of {UNITS:units} transferred.</t>


<!--%1%0 add %2 units of %3-->
<t id="646">Adds a {PROPERTY:ware quantity} of $2 {UNITS:units} of the WARE $3 to the cargo bay of the SHIP $0.

If the {PROPERTY:ware quantity} $2 is a negative INTEGER, the WARES are removed.</t>


<!--%1%0 install %2 units of %3-->
<t id="647">Installs a {PROPERTY:ware quantity} of $2 {UNITS:units} of the WARE $3 to the SHIP $0 as {PROPERTY:installed components}.

If the {PROPERTY:ware quantity} $2 is a negative INTEGER, the WARES are removed.</t>


<!--%0 set wanted ware count to %1-->
<t id="649">Informs a SHIP that is executing a {CONSTANT:\[COMMAND_GET_WARE\]} or {CONSTANT:\[COMMAND_GET_WARE_BEST\]} command to display to the user, the {PROPERTY:ware quantity} $1 that it is seeking to purchase.

{HEADING:Information}

This command does not order the SHIP $0 to search for the WARE $1, it only displays the {PROPERTY:ware quantity} to the user.</t>


<!--%0 set wanted ware to %1-->
<t id="650">Informs a SHIP that is executing a {CONSTANT:\[COMMAND_GET_WARE\]} or {CONSTANT:\[COMMAND_GET_WARE_BEST\]} command to display to the user, the WARE $1 that it is seeking to purchase.

{HEADING:Information}

This command does not order the SHIP $0 to search for the WARE $1, it only displays the {PROPERTY:ware quantity} to the user.</t>


<!--%1%0 get wanted ware count-->
<t id="651">Returns the {PROPERTY:ware quantity} that is sought by the SHIP $0, when executing a {CONSTANT:\[COMMAND_GET_WARE\]} or {CONSTANT:\[COMMAND_GET_WARE_BEST\]} command.

This must have been previously set by the {COMMAND:set wanted ware count to ...} command.</t>


<!--%1%0 get wanted ware-->
<t id="652">Returns the WARE that is sought by the SHIP $0, when executing a {CONSTANT:\[COMMAND_GET_WARE\]} or {CONSTANT:\[COMMAND_GET_WARE_BEST\]} command.

This must have been previously set by the {COMMAND:set wanted ware to ...} command.</t>

<!-- ********************************************************************************** -->
<!-- ********************************* x2 STATION PROPERTIES ************************** -->
<!-- ********************************************************************************** -->

<!--%1%0 get best store amount of ware %2-->
<t id="622">Returns the maximum {PROPERTY:ware quantity} of the WARE $2 that can be stored in the DOCK $0.</t>


<!--%1%0 get max. store amount of ware %2-->
<t id="623">Returns the maximum {PROPERTY:ware quantity} of the WARE $2 that can be stored in the FACTORY $0.</t>


<!--%1%0 can buy ware %2-->
<t id="624">Returns TRUE if the STATION $0 can buy the WARE $2, and FALSE otherwise.</t>


<!--%1%0 can sell ware %2-->
<t id="625">Returns TRUE if the STATION $0 can sell the WARE $2, and FALSE otherwise.</t>


<!--$1 $0 get price of ware $2-->
<t id="627">Returns the current {PROPERTY:ware price} of the WARE $2 at the STATION $0, in {UNITS:credits}.</t>


<!--$1 $0 get average price of station ware $2-->
<t id="628">Returns the {PROPERTY:average ware price} of the WARE $2, sold at the STATION $0, in {UNITS:credits}.

{COMMAND_NAME_CHANGED:get average price of ware}</t>


<!--%0 set price of ware %1 to %2 cr-->
<t id="634">Sets the current {PROPERTY:ware price} of the WARE $2, sold at the STATION $0, to $1 {UNITS:credits}.</t>


<!--%1%0 uses ware %2 as primary resource-->
<t id="635">Returns TRUE if the STATION $0 buys the WARE $2 as a PRIMARYRESOURCE, and FALSE otherwise.</t>


<!--%1%0 uses ware %2 as secondary resource-->
<t id="636">Returns TRUE if the STATION $0 buys the WARE $2 as a SECONDARYRESOURCE, and FALSE otherwise.</t>


<!--%1%0 trades with ware %2-->
<t id="637">Returns TRUE if the STATION $0 buys or sells the WARE $2, and FALSE otherwise.</t>


<!--%1%0 get product ware-->
<t id="638">Returns the WARE that is produced by the FACTORY $0.

If this command is used on a DOCK or SHIPYARD, it will return NULL.</t>


<!--%1%0 get number of resources-->
<t id="641">Returns the total number of {PROPERTY:primary resources} and {PROPERTY:secondary resources} bought by the STATION $0.</t>


<!--%1%0 get number of primary resources-->
<t id="642">Returns the number of {PROPERTY:primary resources} bought by the STATION $0.</t>


<!--%1%0 get number of secondary resources-->
<t id="643">Returns the number of {PROPERTY:secondary resources} bought by the STATION $0.</t>


<!--%1%0 only player own ships can trade with-->
<t id="665">Returns TRUE if only {PROPERTY:player owned} SHIPS are allowed to trade with the STATION $0, and FALSE otherwise.</t>


<!--$1 $0 get serial name of station-->
<t id="708">Returns the SERIAL of STATION $0.

{HEADING:Information}

Each STATION has a name and a SERIAL represented by a greek letter. eg. Alpha, Beta, Gamma.

{RELATED_SCRIPT_OBJECT_LIST:SERIALS,Station Serials}</t>


<!--%1%0 get tradeable ware array from station-->
<t id="1041">Returns a new ARRAY containing all the WARES that are bought and sold by the STATION $0.

The ARRAY contains the PRODUCTS first, then {PROPERTY:primary resources} followed by {PROPERTY:secondary resources}.</t>


<!--%0 set serial name of station to %1-->
<t id="1043">Sets the SERIAL of the non-player STATION $0 to $1.

{HEADING:Information}

Each STATION has a name and a SERIAL represented by a greek letter. eg. Alpha, Beta, Gamma.

{RELATED_SCRIPT_OBJECT_LIST:SERIALS,Station Serials}</t>



<!-- ********************************************************************************** -->
<!-- ********************************* x2 STATION TRADING ***************************** -->
<!-- ********************************************************************************** -->

<!--%0 add money: %1-->
<t id="661">Adds $1 {UNITS:credits} to the {PROPERTY:station account} of the STATION $0.

If $1 is a negative INTEGER, the {UNITS:credits} are deducted.</t>

<!--%1%0 get money-->
<t id="600">Returns the number of {UNITS:credits} in the {PROPERTY:station account} of the STATION $0.</t>


<!--VANILLA:  VARIATION:  $0 find station: product $1 with best price:  max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6-->
<!--XSTUDIO:  VARIATION:  $0 find factory: sells $1 with best price:  max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6-->
<t id="606">Finds and returns the FACTORY selling the WARE $1 at the lowest price.  {SEARCH_RANGE:FACTORY,4z,5}

{SEARCH_SYNTAX:FACTORY}

{HEADING:Optional Parameters}

{SEARCH_BY_MAXIMUM_PRICE:FACTORIES,2x}
{SEARCH_BY_QUANITY_SELL:FACTORIES,3y}
{SEARCH_BY_TRADER:FACTORIES,6}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X2,X3R}

{COMMAND_NAME_CHANGED:find station: product ... with best price}</t>


<!--VANILLA:  VARIATION:  $0 find station: product $1 with min. jumps:  max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6-->
<!--XSTUDIO:  VARIATION:  $0 find factory: sells $1 with min. jumps:  max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6-->
<t id="607">Finds and returns the nearest FACTORY selling the WARE $1.  {SEARCH_RANGE:FACTORY,4z,5}

{SEARCH_SYNTAX:FACTORY}

{HEADING:Optional Parameters}

{SEARCH_BY_MAXIMUM_PRICE:FACTORIES,2x}
{SEARCH_BY_QUANITY_SELL:FACTORIES,3y}
{SEARCH_BY_TRADER:FACTORIES,6}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X2,X3R}

{COMMAND_NAME_CHANGED:find station: product ... with min. jumps}</t>		



<!--VANILLA:  VARIATION:  $0 find station: resource $1 with best price: min.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6-->
<!--XSTUDIO:  VARIATION:  $0 find factory: buys $1 with best price: min.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6-->
<t id="608">Finds and returns the FACTORY willing to buy the WARE $1 for the highest price.  {SEARCH_RANGE:FACTORY,4z,5}

{SEARCH_SYNTAX:FACTORY}

{HEADING:Optional Parameters}

{SEARCH_BY_MINIMUM_PRICE:FACTORIES,2x}
{SEARCH_BY_QUANITY_BUY:FACTORIES,3y}
{SEARCH_BY_TRADER:FACTORIES,6}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X2,X3R}

{COMMAND_NAME_CHANGED:find station: resource ... with best price}</t>



<!--VANILLA:  VARIATION:  $0 find station: resource $1 with min. jumps: min.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6-->
<!--XSTUDIO:  VARIATION:  $0 find factory: buys $1 with min. jumps: min.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6-->
<t id="609">Finds and returns the nearest FACTORY willing to buy the WARE $1.  {SEARCH_RANGE:FACTORY,4z,5}

{SEARCH_SYNTAX:FACTORY}

{HEADING:Optional Parameters}

{SEARCH_BY_MINIMUM_PRICE:FACTORIES,2x}
{SEARCH_BY_QUANITY_BUY:FACTORIES,3y}
{SEARCH_BY_TRADER:FACTORIES,6}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X2,X3R}

{COMMAND_NAME_CHANGED:find station: resource ... with min. jumps}</t>		


<!--VANILLA:  VARIATION:  $0 find station sells: resource $1 with best price: max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6-->
<!--XSTUDIO:  VARIATION:  $0 find dock: sells: $1 with best price: max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6-->
<t id="663">Finds and returns the DOCK selling the WARE $1 at the lowest price.  {SEARCH_RANGE:DOCK,4z,5}

{SEARCH_SYNTAX:DOCK}

{HEADING:Optional Parameters}

{SEARCH_BY_MAXIMUM_PRICE:DOCKS,2x}
{SEARCH_BY_QUANITY_SELL:DOCKS,3y}
{SEARCH_BY_TRADER:DOCKS,6}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X2,X3R}

{COMMAND_NAME_CHANGED:find station sells: resource ... with best price}</t>



<!--VANILLA:  VARIATION:  $0 find station sells: resource $1 with min. jumps: max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6-->
<!--XSTUDIO:  VARIATION:  $0 find dock: sells $1 with min. jumps: max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6-->
<t id="664">Finds and returns the nearest DOCK selling the WARE $1.  {SEARCH_RANGE:DOCK,4z,5}

{SEARCH_SYNTAX:DOCK}

{HEADING:Optional Parameters}

{SEARCH_BY_MAXIMUM_PRICE:DOCKS,2x}
{SEARCH_BY_QUANITY_SELL:DOCKS,3y}
{SEARCH_BY_TRADER:DOCKS,6}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X2,X3R}

{COMMAND_NAME_CHANGED:find station sells: resource ... with min. jumps}</t>	



<!--$0 find station in galaxy: startsector=$1 class or type=$2o race=$3 flags=$4x refobj=$5x serial=$6 max.jumps=$7y-->
<t id="709">Find and returns a single STATION that is a maximum {PROPERTY:jump distance} of $7y from the SECTOR $1.  {SEARCH_SYNTAX:STATION}

{HEADING:Optional Parameters}

{SEARCH_BY_TYPE_CLASS:STATIONS,2o}
{SEARCH_BY_RACE:STATIONS,3}
{SEARCH_BY_SERIAL:6}
{SEARCH_BY_FLAGS:STATIONS,4x}

{HEADING:Search Flags}

{FLAG_NEAREST:STATION,5x}
{FLAG_RANDOM:STATION}
{FLAG_VISIBLE:STATIONS,5x}
{FLAG_KNOWN:STATIONS}
{FLAG_EXACT_JUMPS:STATIONS,7y}
{FLAG_DOCKING_ALLOWED:STATIONS,5x}
{FLAG_FRIEND:STATIONS,5x}
{FLAG_ENEMY:STATIONS,5x}
{FLAG_NEUTRAL:STATIONS,5x}

{HEADING:Unsupported Search Flags}

{FLAG_NO_MULTIPLE:STATION}
{FLAGS_MUTUTALLY_EXCLUSIVE_2:Nearest,Random}

{HEADING:Information}

{FLAGS_COMBINING:Enemy,Nearest}

{FLAGS_RELATION_REQUIREMENT:5x}

This command only searches SECTORS connected to $1 via JUMPGATES, it does not search the universe topographically and will therefore return NULL in most instances when used in a SECTOR with no JUMPGATES.

All {PROPERTY:jump distances} are zero-based.</t>
 

<!--%0 add product to factory or dock: %1-->
<t id="750">Adds the WARE $1 to the list of PRODUCTS sold by the STATION $0.</t>


<!--%0 add primary resource to factory: %1-->
<t id="751">Adds the WARE $1 to the list of {PROPERTY:primary resources} bought by the STATION $0.</t>


<!--%0 add second resource to factory: %1-->
<t id="752">Adds the WARE $1 to the list of {PROPERTY:secondary resources} bought by the STATION $0.</t>


<!--%0 station trade and production tasks: on=%1-->
<t id="760">Activates or deactives the production timers of the STATION $0.

The timers are activated if $1 is TRUE, and deactivated if $1 is FALSE.

{HEADING:Information}

This is designed for use with the {COMMAND:create station} command, which creates STATIONS in a `deactivated` state to give the script time to add WARES to the station.</t>


<!--%0 remove product from factory or dock: %1-->
<t id="781">Removes the WARE $1 from the list of PRODUCTS sold by the STATION $0.</t>


<!--%0 remove primary resource from factory: %1-->
<t id="782">Removes the WARE $1 from the list of {PROPERTY:primary resources} sold by the STATION $0.</t>


<!--%0 remove second resource from factory: %1-->
<t id="783">Removes the WARE $1 from the list of {PROPERTY:secondary resources} sold by the STATION $0</t>



<!--$0 find station: sector=$1 class or type=$2o race=$3 flags=$4x refobj=$5x maxdist=$6y maxnum=$7z refpos=$8-->
<t id="794">Finds and returns up to $7z STATIONS within the SECTOR $1.  {SEARCH_SYNTAX:STATIONS}

{HEADING:Optional Parameters}

{SEARCH_BY_TYPE_CLASS:STATIONS,2o}
{SEARCH_BY_RACE:STATIONS,3}
{SEARCH_BY_DISTANCE_2:STATIONS,6y,5x,8}
{SEARCH_BY_FLAGS:STATIONS,4x}

{HEADING:Search Flags}

{FLAG_NEAREST:STATION,5x}
{FLAG_RANDOM:STATION}
{FLAG_VISIBLE:STATIONS,5x}
{FLAG_KNOWN:STATIONS}
{FLAG_DOCKING_ALLOWED:STATIONS,5x}
{FLAG_FRIEND:STATIONS,5x}
{FLAG_ENEMY:STATIONS,5x}
{FLAG_NEUTRAL:STATIONS,5x}

{HEADING:Unsupported Search Flags}

{FLAG_NO_EXACTJUMPS:1}
{FLAGS_MUTUTALLY_EXCLUSIVE_2:Nearest,Random}

{HEADING:Information}

{FLAGS_COMBINING:Enemy,Multiple}

{FLAGS_MULTIPLE_NEAREST}

{FLAGS_RELATION_REQUIREMENT:5x}</t>	



<!--VANILLA:  VARIATION:  $1 $0 find station: product $2 with best price:  max.price=$3x, amount=$4y, max.jumps=$5z, startsector=$6, trader=$7-->
<!--XSTUDIO:  VARIATION:  $1 $0 find different factory: sells $2 with best price:  max.price=$3x, amount=$4y, max.jumps=$5z, startsector=$6, trader=$7-->
<t id="1002">Finds and returns the FACTORY selling the WARE $2 at the lowest price, that isn`t the FACTORY $0.  {SEARCH_RANGE:FACTORY,5z,6}  {SEARCH_RANGE_DIFFERENT:6,0}

{SEARCH_SYNTAX:FACTORY}

{HEADING:Optional Parameters}

{SEARCH_BY_MAXIMUM_PRICE:FACTORIES,3x}
{SEARCH_BY_QUANITY_SELL:FACTORIES,4y}
{SEARCH_BY_TRADER:FACTORIES,7}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X2,X3R}

{COMMAND_NAME_CHANGED:find station: product ... with best price}</t>		



<!--VANILLA:  VARIATION:  $1 $0 find station: product $2 with min. jumps:  max.price=$3x, amount=$4y, max.jumps=$5z, startsector=$6, trader=$7-->
<!--XSTUDIO:  VARIATION:  $1 $0 find different factory: sells $2 with min. jumps:  max.price=$3x, amount=$4y, max.jumps=$5z, startsector=$6, trader=$7-->
<t id="1003">Finds and returns the nearest FACTORY selling the WARE $2, that isn`t the FACTORY $0.  {SEARCH_RANGE:FACTORY,5z,6}  {SEARCH_RANGE_DIFFERENT:6,0}

{SEARCH_SYNTAX:FACTORY}

{HEADING:Optional Parameters}

{SEARCH_BY_MAXIMUM_PRICE:FACTORIES,3x}
{SEARCH_BY_QUANITY_SELL:FACTORIES,4y}
{SEARCH_BY_TRADER:FACTORIES,7}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X2,X3R}

{COMMAND_NAME_CHANGED:find station: product ... with min. jumps}</t>		


<!--VANILLA:  VARIATION:  $1 $0 find station: resource $2 with best price: min.price=$3x, amount=$4y, max.jumps=$5z, startsector=$6, trader=$7-->
<!--XSTUDIO:  VARIATION:  $1 $0 find different factory: buys $2 with best price: min.price=$3x, amount=$4y, max.jumps=$5z, startsector=$6, trader=$7-->
<t id="1004">Finds and returns the FACTORY willing to buy the WARE $2 for the highest price, that isn`t the FACTORY $0.  {SEARCH_RANGE:FACTORY,5z,6}  {SEARCH_RANGE_DIFFERENT:6,0}

{SEARCH_SYNTAX:FACTORY}

{HEADING:Optional Parameters}

{SEARCH_BY_MINIMUM_PRICE:FACTORIES,3x}
{SEARCH_BY_QUANITY_BUY:FACTORIES,4y}
{SEARCH_BY_TRADER:FACTORIES,7}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X2,X3R}

{COMMAND_NAME_CHANGED:find station: resource ... with best price}</t>		


<!--VANILLA:  VARIATION:  $1 $0 find station: resource $2 with min. jumps: min.price=$3x, amount=$4y, max.jumps=$5z, startsector=$6, trader=$7-->
<!--XSTUDIO:  VARIATION:  $1 $0 find different factory: buys $2 with min. jumps: min.price=$3x, amount=$4y, max.jumps=$5z, startsector=$6, trader=$7-->
<t id="1005">Finds and returns the nearest FACTORY willing to buy the WARE $2, that isn`t the FACTORY $0.  {SEARCH_RANGE:FACTORY,5z,6}  {SEARCH_RANGE_DIFFERENT:6,0}

{SEARCH_SYNTAX:FACTORY}

{HEADING:Optional Parameters}

{SEARCH_BY_MINIMUM_PRICE:FACTORIES,3x}
{SEARCH_BY_QUANITY_BUY:FACTORIES,4y}
{SEARCH_BY_TRADER:FACTORIES,7}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X2,X3R}

{COMMAND_NAME_CHANGED:find station: resource ... with min. jumps}</t>		


<!--VANILLA:  VARIATION:  $1 $0 find station sells: resource $2 with best price: max.price=$3x, amount=$4y, max.jumps=$5z, startsector=$6, trader=$7-->
<!--XSTUDIO:  VARIATION:  $1 $0 find different dock: sells $2 with best price: max.price=$3x, amount=$4y, max.jumps=$5z, startsector=$6, trader=$7-->
<t id="1006">Finds and returns the DOCK selling the WARE $2 at the lowest price, that isn`t the DOCK $0.  {SEARCH_RANGE:DOCK,5z,6}  {SEARCH_RANGE_DIFFERENT:6,0}

{SEARCH_SYNTAX:DOCK}

{HEADING:Optional Parameters}

{SEARCH_BY_MAXIMUM_PRICE:DOCKS,3x}
{SEARCH_BY_QUANITY_SELL:DOCKS,4y}
{SEARCH_BY_TRADER:FACTORIES,7}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X2,X3R}

{COMMAND_NAME_CHANGED:find station sells: resource ... with best price}</t>		


<!--VANILLA:  VARIATION:  $1 $0 find station sells: resource $2 with min. jumps: max.price=$3x, amount=$4y, max.jumps=$5z, startsector=$6, trader=$7-->
<!--XSTUDIO:  VARIATION:  $1 $0 find different dock: sells $2 with min. jumps: max.price=$3x, amount=$4y, max.jumps=$5z, startsector=$6, trader=$7-->
<t id="1007">Finds and returns the nearest DOCK selling the WARE $2, that isn`t the DOCK $0.  {SEARCH_RANGE:DOCK,5z,6}  {SEARCH_RANGE_DIFFERENT:6,0}

{SEARCH_SYNTAX:DOCK}

{HEADING:Optional Parameters}

{SEARCH_BY_MAXIMUM_PRICE:DOCKS,3x}
{SEARCH_BY_QUANITY_SELL:DOCKS,4y}
{SEARCH_BY_TRADER:FACTORIES,7}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X2,X3R}

{COMMAND_NAME_CHANGED:find station sells: resource ... with min. jumps}</t>


<!--$0 find station in galaxy: startsector=$1 class or type=$2o race=$3 flags=$4x refobj=$5x serial=$6 max.jumps=$7y num=$8z-->
<t id="1035">Finds and returns up to $8z STATIONS that are a maximum {PROPERTY:jump distance} of $7y from the SECTOR $1.  {SEARCH_SYNTAX:STATIONS}

{HEADING:Optional Parameters}

{SEARCH_BY_TYPE_CLASS:STATIONS,2o}
{SEARCH_BY_RACE:STATIONS,3}
{SEARCH_BY_SERIAL:6}
{SEARCH_BY_FLAGS:STATIONS,4x}

{HEADING:Search Flags}

{FLAG_NEAREST:STATION,5x}
{FLAG_RANDOM:STATION}
{FLAG_VISIBLE:STATIONS,5x}
{FLAG_KNOWN:STATIONS}
{FLAG_EXACT_JUMPS:STATIONS,7y}
{FLAG_DOCKING_ALLOWED:STATIONS,5x}
{FLAG_FRIEND:STATIONS,5x}
{FLAG_ENEMY:STATIONS,5x}
{FLAG_NEUTRAL:STATIONS,5x}

{HEADING:Unsupported Search Flags}

{FLAGS_MUTUTALLY_EXCLUSIVE_2:Nearest,Random}

{HEADING:Information}

{FLAGS_COMBINING:Enemy,Multiple}

{FLAGS_MULTIPLE_NEAREST}

{FLAGS_RELATION_REQUIREMENT:5x}

This command only searches SECTORS connected to $1 via JUMPGATES, it does not search the universe topographically and will therefore return NULL in most instances when used in a SECTOR with no JUMPGATES.

All {PROPERTY:jump distances} are zero-based.</t>


<!--%0 station send defend squad against ship %1-->
<t id="1015">Commands the STATION $0 to launch {CLASS:Fighters} to attack the OBJ $1.</t>


<!--$1 $0 add big ship $2-->
<t id="1018">Adds a SHIP $2 with OBJCLASS {CLASS:Big Ship} to the SHIPYARD $0 as a DOCKED vessel.</t>   <!--%1%0 add big ship %2-->

<!-- ********************************************************************************** -->
<!-- ********************************** X2 STRINGS   ********************************** -->
<!-- ********************************************************************************** -->
  
<!--$0 read text: page=$1x id=$2y-->
<t id="126">Returns a STRING stored in a language strings file under page $1x with ID $2y.

{HEADING:Information}

{LOADTEXT_REQUIREMENT}

{RELATED_COMMAND:To load a custom language strings file,load text:,Strings}</t>


<!--$0 sprintf: fmt=$1, $2o, $3x, $4y, $5z, $6a-->
<t id="149">Returns a new STRING created from a template STRING $1 and the parameters $2o, $3x, $4y, $5z, $6a.  If the template STRING $1 contains less than five parameter fields \(which are denoted by `%s`\) then unused parameters are ignored.

{HEADING:Information}

Unlike the C programming command of the same name, there are no other parameter field types.

{RELATED_COMMAND:To use a template STRING in a language strings file,sprintf pageid:,Strings}</t>


<!--$0 sprintf: pageid=$1x textid=$2y, $3o, $4x, $5y, $6z, $7a-->
<t id="150">Returns a new STRING created from a template STRING stored in a language strings file and the parameters $3o, $4x, $5y, $6z, $7a.  The template STRING with ID $2y is loaded from page $1x.  If the template STRING $2y contains less than five parameter fields \(which are denoted by `%s`\) then unused parameters are ignored.

{HEADING:Information}

Unlike the C programming command of the same name, there are no other parameter field types.

{LOADTEXT_REQUIREMENT}

{RELATED_COMMAND:To use a hard-coded template STRING,sprintf fmt:,Strings}

{INLINE_RELATED_COMMAND:To load a custom language strings file,load text:,Strings}</t>


<!--load text: id=$0-->
<t id="151">Loads the STRINGS within a user-generated language strings file with ID $0.  You must use this command before attempting to use any STRINGS from within the language strings file, otherwise the content of any loaded STRINGS will be a `read text` error message.

{HEADING:Information}

It is not necessary to load the official language files with IDs 000x that shipped with the game.
Only the four digit ID of the language strings file is required, not the entire filename. This allows the game to load the file appropriate to the user`s language, if available.  The language strings file must be placed in the `t` subfolder of the game folder hierarchy.

{RELATED_COMMAND_2:To use STRINGS from any language file,read text:,sprintf:,Strings}</t>


<!-- ********************************************************************************** -->
<!-- ********************************** X2 UNIVERSE DATA ********************************* -->
<!-- ********************************************************************************** -->
  
<!--$1 $0 find nearest enemy ship: max.dist=$2-->
<t id="503">Returns the {PROPERTY:enemy} SHIP closest to the object $0 that is within $2 {UNITS:meters}.  If there are none within this range it returns NULL.</t>	


<!--$1 $0 find nearest enemy station: max.dist=$2-->
<t id="504">Returns the {PROPERTY:enemy} STATION closest to the object $0 that is within $2 {UNITS:meters}.  If there are none within this range it returns NULL.</t>	


<!--$0 get jumps from sector $1x to sector $2y-->
<t id="711">Returns the {PROPERTY:jump distance} between SECTOR $1x and SECTOR $2y.

{HEADING:Information}

All {PROPERTY:jump distances} are zero-based.</t>	


<!--$0 get next sector on route from sector $1x to sector $2y-->
<t id="712">Returns the first SECTOR a SHIP is required to pass through in order to travel from SECTOR $1x to the SECTOR $2y via the shortest route available.

If SECTOR $1x and SECTOR $2y are the same, the command returns NULL.

{ROUTE_CALCULATIONS}</t>		


<!--$0 get distance between $1x and $2y-->
<t id="738">Returns the distance in {UNITS:meters} between the object $1x and $2y.

{HEADING:Information}

Both objects must be in the same SECTOR.</t>	


<!--$0 create ship: type=$1 owner=$2 addto=$3 x=$4x y=$5y z=$6z-->
<t id="739">Creates and returns a new SHIP of OBJTYPE $1 OWNEDBY the RACE $2 in the SECTOR, SHIP or STATION $3.  If this command fails then it returns NULL.

{HEADING:Information}

You cannot add SHIPS of the OBJCLASS {CLASS:Big Ship} and {CLASS:Huge Ship} to STATIONS in this way.  If $3 is a SHIP or STATION, the co-ordinates are ignored.

{COORDINATES:SHIP,4x,5y,6z}
{RELATED_COMMAND:To add those OBJCLASSES of SHIP to a STATION,add big ship,Station Action}</t>	

<!--$0 create station: type=$1 owner=$2 addto=$3 x=$4x y=$5y z=$6z-->
<t id="747">Creates and returns a new STATION of OBJTYPE $1 OWNEDBY the RACE $2 in the SECTOR $3.  If this command fails then it returns NULL.

{HEADING:Information}

{TYPE:Stations} are created without any {PROPERTY:products} or {PROPERTY:resources}, you must add these separately.

{COORDINATES:JUMPGATE,3xª,4yª,5zª}

{RELATED_COMMAND_2:To add or remove a PRODUCT from a STATION,add product to factory or dock,remove product from factory or dock,Station Trading}

{INLINE_RELATED_COMMAND_2:To add or remove a PRIMARYRESOURCE from a FACTORY,add primary resource to factory,remove primary resource from factory,Station Trading}

{INLINE_RELATED_COMMAND_2:To add or remove a SECONDARYRESOURCE from a FACTORY,add second resource to factory,remove second resource from factory,Station Trading}</t>	

  
<!--$0 create gate: type=$1a addto=$2 gateid=$6xº dstsecx=$7x dstsecy=$8y dstgateid=$9yº x=$3xª y=$4yª z=$5zª-->
<t id="748">Creates and returns a new JUMPGATE of SUBTYPE $1a in the SECTOR $2 and with a {PROPERTY:jump gate ID} of $6xº.  If this command fails then it returns NULL.

{HEADING:Jump Gate Connections}

The destination SECTOR with \(x, y\) co-ordinates \($7x, $8y\) must contain a JUMPGATE with a {PROPERTY:jump gate ID} of $9yº.  Although the SUBTYPE defines in which direction the JUMPGATE appears to be facing, it is the {PROPERTY:jump gate ID} that actually determines the destination.  {TYPE:Jump gates} within the same SECTOR must have unique {PROPERTY:jump gate IDs}.

{COORDINATES:JUMPGATE,3xª,4yª,5zª}
{SEE_XEDITOR:JUMPGATES}</t>		

  
<!--$0 create asteroid: type=$1x addto=$2 resource=$3y yield=$4z x=$5xª y=$6yª z=$7zª-->
<t id="749">Creates and returns a new ASTEROID of SUBTYPE $1x in the SECTOR $2 with an {PROPERTY:mineral yield} of $4z and a {PROPERTY:mineral type} of $3y.  If this command fails then it returns NULL.

{ABOUT_MINERAL_TYPES}
{COORDINATES:ASTEROID,5xª,6yª,7zª}
{SEE_HANDBOOK_AND_XEDITOR:ASTEROIDS}{CORRECTION:Jack08}</t>	

  
<!--$0 create nebula: type=$1ª addto=$2 x=$3¹ y=$4² z=$5³-->
<t id="753">Creates and returns a new NEBULA of SUBTYPE $1ª in the SECTOR $2.  If this command fails then it returns NULL.

{COORDINATES:NEBULA,3x,4y,5z}
{SEE_HANDBOOK_AND_XEDITOR:NEBULAE}</t>	

  
<!--$0 create sun: subtype=$8a r=$1x g=$2y b=$3z addto=$4 x=$5xª y=$6yª z=$7zª-->
<t id="754">Creates and returns a new SUN of SUBTYPE $8ª in the SECTOR $4.  If this command fails then it returns NULL.

{HEADING:Sector Illumination}

The position of the SUN does not affect the amount of illumination in the SECTOR and can be positioned according to taste.  The colour of illumination is defined using three INTEGERS between 0 and 255 for the red, green and blue components, specified in the following order:
[center]red=$1x, green=$2y, blue=$3z.[/center]
{COORDINATES:SUN,5xª,6yª,7zª}
{HEADING:Game Crashes}Using the SUN with SUBTYPE 23 may cause the game to crash.

{SEE_HANDBOOK_AND_XEDITOR:SUNS}</t>		

  
<!--$0 create planet: subtype=$1a addto=$2 x=$3x y=$4y z=$5z-->
<t id="755">Creates and returns a new PLANET of SUBTYPE $1ª in the SECTOR $2.  If this command fails then it returns NULL.

{COORDINATES:PLANET,3x,4y,5z}
{SEE_HANDBOOK_AND_XEDITOR:PLANETS}</t>	

  
<!--$0 create special: type=$1a addto=$2 x=$3x y=$4y z=$5z-->
<t id="756">Creates and returns a new SPECIAL of SUBTYPE $1ª in the SECTOR $2.  If this command fails then it returns NULL.

{HEADING:Plot Objects}

{TYPE:Special objects} are unique items mainly used within the plot, such as unique JUMPGATES or SHIP {TYPE:debris}.

{COORDINATES:SPECIAL,3x,4y,5z}
{SEE_HANDBOOK_AND_XEDITOR:SPECIALS}</t>	



<!--$0 find ship: sector=$1 class or type=$2o race=$3 flags=$4x refobj=$5x maxdist=$6y maxnum=$7z refpos=$8-->
<t id="757">Finds and returns the SHIPS within the SECTOR $1.  {SEARCH_SYNTAX:SHIPS}

{HEADING:Optional Parameters}

{SEARCH_BY_TYPE_CLASS:SHIPS,2o}
{SEARCH_BY_RACE:SHIPS,3}
{SEARCH_BY_DISTANCE_2:SHIPS,6y,5x,8}
{SEARCH_BY_FLAGS:SHIPS,4x}

{HEADING:Search Flags}

{FLAG_NEAREST_2:SHIP,5x,8}
{FLAG_RANDOM:SHIP}
{FLAG_VISIBLE:SHIPS,5x}
{FLAG_KNOWN:SHIPS}
{FLAG_RACE_LOGIC}
{FLAG_INCLUDE_DOCKED}
{FLAG_WING_ONLY}
{FLAG_MULTIPLE:7z,SHIPS}
{FLAG_FRIEND:SHIPS,5x}
{FLAG_ENEMY:SHIPS,5x}
{FLAG_NEUTRAL:SHIPS,5x}

{HEADING:Unsupported Search Flags}

{FLAG_NO_EXACTJUMPS:1}
{FLAGS_MUTUTALLY_EXCLUSIVE_2:Nearest,Random}

{HEADING:Information}

{FLAGS_COMBINING:Enemy,Multiple}

{FLAGS_MULTIPLE_NEAREST}

{FLAGS_RELATION_REQUIREMENT:5x}

{FLAGS_REFERENCE_REQUIREMENT:5x,8}</t>


<!--$0 find asteroid: sector=$1 resourcetype=$2xª min.yield=$3yª flags=$4a refobj=$5 maxdist=$6x maxnum=$7y refpos=$8-->
<t id="758">Finds and returns the ASTEROIDS within the SECTOR $1.  {SEARCH_SYNTAX:ASTEROIDS}

{HEADING:Optional Parameters}

Only return ASTEROIDS with a {PROPERTY:mineral type} of $2xª
Only return ASTEROIDS with a {PROPERTY:mineral yield} of $3yª or more
{SEARCH_BY_DISTANCE_2:ASTEROIDS,6x,5,8}
{SEARCH_BY_FLAGS:ASTEROIDS,4a}

{HEADING:Search Flags}

{FLAG_NEAREST_2:ASTEROID,5,8}
{FLAG_RANDOM:ASTEROID}
{FLAG_VISIBLE:ASTEROIDS,5}
{FLAG_KNOWN:ASTEROIDS}
{FLAG_MULTIPLE:7y,ASTEROIDS}

{HEADING:Unsupported Search Flags}

{FLAG_NO_EXACTJUMPS:1}
{FLAG_NO_RELATIONS:ASTEROIDS}
{FLAGS_MUTUTALLY_EXCLUSIVE_2:Nearest,Random}

{HEADING:Information}

{ABOUT_MINERAL_TYPES}
{FLAGS_COMBINING:Known,Multiple}

{FLAGS_MULTIPLE_NEAREST}

{FLAGS_REFERENCE_REQUIREMENT:5,8}{CORRECTION:Jack08}</t>


<!--$0 find flying ware: sector=$1 maintype=$2xª subtype=$3yª flags=$4x refobj=$5 maxdist=$6y maxnum=$7z refpos=$8-->
<t id="766">Finds and returns up to $7z FLYINGWARES within the SECTOR $1.  {SEARCH_SYNTAX:FLYINGWARES}

{HEADING:Optional Parameters}

{SEARCH_BY_TYPE_CLASS:FLYINGWARES,2o}
{SEARCH_BY_MAINTYPE_SUBTYPE:FLYINGWARES,$2xª,$3yª}
{SEARCH_BY_DISTANCE_2:FLYINGWARES,6y,5,8}
{SEARCH_BY_FLAGS:FLYINGWARES,4x}

{HEADING:Search Flags}

{FLAG_NEAREST:FLYINGWARE,5}
{FLAG_RANDOM:FLYINGWARE}
{FLAG_VISIBLE:FLYINGWARES,5}
{FLAG_KNOWN:FLYINGWARES}
{CONSTANT:\[Find.IllegalWare\]} - Return FLYINGWARES containing WARES {PROPERTY:illegal} in the sector $1

{HEADING:Unsupported Search Flags}

{FLAG_NO_EXACTJUMPS:1}
{FLAG_NO_RELATIONS:FLYINGWARES}
{FLAGS_MUTUTALLY_EXCLUSIVE_2:Nearest,Random}

{HEADING:Information}

{FLAGS_COMBINING:Nearest,Visible}

{FLAGS_MULTIPLE_NEAREST}</t>		


<!--$0 create sector object: maintype=$1x subtype=$2y-->
<t id="772">Creates a new SECTOROBJECT with a MAINTYPE $1x, a SUBTYPE $2y.  This command returns the {TERMINOLOGY:Sector Object ID} if successful, and NULL otherwise.

{HEADING:Information}

Egosoft expressly advise against using SECTOROBJECTS directly as they may corrupt your save games.  Use the {COMMAND:create ...} and {COMMAND:destruct} commands instead.

{RELATED_COMMAND:To initialise a SECTOROBJECT for use,initialise sector object,Object Action}

{INLINE_RELATED_COMMAND_2:To destroy a SECTOROBJECT and then unload it from the game,kill sector object,free sector object,Object Action}</t>		

  
<!--$0 create flying ware: maintype=$1x subtype=$2y count=$3ª sector=$4 x=$5xª y=$6yª z=$7zª selfdestruct=$8o-->
<t id="776">Creates a FLYINGWARE with a MAINTYPE $1x, a SUBTYPE $2y and a {PROPERTY:quantity} $3ª in the SECTOR $4.

If $8o is FALSE then the FLYINGWARE will exist forever, if $8o is TRUE then it will be destroyed after a random period between 15 and 45 minutes.  If this command fails then it returns NULL.

{COORDINATES:FLYINGWARE,5xª,6yª,7zª}</t>		

  
<!--%1%0 get position as array-->
<t id="795">Returns a new array containing {PROPERTY:position} of the object $0. in {UNITS:meters} between the object $0.

{HEADING:Information}

The ARRAY contains three INTEGER co-ordinates in the order: x, y, z.</t>		


<!--$1 $0 get distance to: x=$2x y=$3y z=$4z-->
<t id="796">Returns the distance in {UNITS:meters} between the object $0 and the {PROPERTY:position} with co-ordinates \(x, y, z\).</t>		


<!--%1%0 get distance to: position array=%2-->  
<t id="797">Returns the distance in {UNITS:meters} between the object $0 and the {PROPERTY:position} stored within the ARRAY $2.

{HEADING:Information}

The ARRAY must contain three INTEGER co-ordinates in the order: x, y, z.</t>		

  
<!--$0 get distance: position array1=$1x  array2=$2y-->
<t id="798">Returns the distance in {UNITS:meters} between the {PROPERTY:position} stored within the ARRAY $1x and the {PROPERTY:position} stored within the ARRAY $2y.

{HEADING:Information}

Both ARRAYS must contain three INTEGER co-ordinates in the order: x, y, z.</t>		

  
<!--$0 get sector from universe index: x=$1x, y=$2y-->
<t id="800">Returns the SECTOR with x co-ordinate $1x and y co-ordinate $2y.

{HEADING:Information}

All SECTOR co-ordinates are zero-based.

{RELATED_COMMAND_2:To retrieve the co-ordinates of a SECTOR,get universe x index,get universe y index,Universe Data}</t>

  
<!--$0 get max sectors in x direction-->
<t id="801">Returns the maximum number of SECTORS in the horizontal direction of the game universe.

{HEADING:Information}

The number of SECTORS is one-based.

{RELATED_COMMAND:To retrieve the SECTOR from it`s co-ordinates,get sector from universe index,Universe Data}</t>

  
<!--$0 get max sectors in y direction-->
<t id="802">Returns the maximum number of SECTORS in the vertical direction of the game universe.

{HEADING:Information}

The number of SECTORS is one-based.

{RELATED_COMMAND:To retrieve the SECTOR from it`s co-ordinates,get sector from universe index,Universe Data}</t>

  
<!--$1 $0 is sector known by the player-->
<t id="803">Return TRUE if the SECTOR $0 has been discovered by the player, otherwise it returns FALSE.</t>

  
<!--$1 $0 get universe x index-->
<t id="804">Returns the x co-ordinate of the SECTOR $0.

{HEADING:Information}

All SECTOR co-ordinates are zero-based.

{RELATED_COMMAND:To retrieve the SECTOR from it`s co-ordinates,get sector from universe index,Universe Data}</t>

  
<!--$1 $0 get universe y index-->
<t id="805">Returns the y co-ordinate of the SECTOR $0.

{HEADING:Information}

All SECTOR co-ordinates are zero-based.

{RELATED_COMMAND:To retrieve the SECTOR from it`s co-ordinates,get sector from universe index,Universe Data}</t>


<!--$1 $0 get north warp gate-->
<t id="806">Returns the northern JUMPGATE in the SECTOR $0.  If there is no northern JUMPGATE it returns NULL.

{RELATED_COMMAND:To retrieve the JUMPGATE for any direction with a single command,get warp gate: gate id,Universe Data}</t>


<!--$1 $0 get south warp gate-->
<t id="807">Returns the southern JUMPGATE in the SECTOR $0.  If there is no southern JUMPGATE it returns NULL.

{RELATED_COMMAND:To retrieve the JUMPGATE for any direction with a single command,get warp gate: gate id,Universe Data}</t>


<!--$1 $0 get east warp gate-->
<t id="808">Returns the eastern JUMPGATE in the SECTOR $0.  If there is no eastern JUMPGATE it returns NULL.

{RELATED_COMMAND:To retrieve the JUMPGATE for any direction with a single command,get warp gate: gate id,Universe Data}</t>

  
<!--$1 $0 get west warp gate-->
<t id="809">Returns the western JUMPGATE in the SECTOR $0.  If there is no western JUMPGATE it returns NULL.

{RELATED_COMMAND:To retrieve the JUMPGATE for any direction with a single command,get warp gate: gate id,Universe Data}</t>


<!--$0 find a random sector: startsector=$1, jumps=$2, owner=$3-->
<t id="810">Returns a randomly chosen SECTOR belonging to the RACE $3 that is a maximum {PROPERTY:jump distance} of $2 from the SECTOR $1.

To retrieve a SECTOR from any RACE, set $3 to NULL.

{HEADING:Information}

All {PROPERTY:jump distances} are zero-based.</t>


<!--$1 $0 get warp gate: gate id=$2-->
<t id="811">Returns the JUMPGATE in the SECTOR $0 with a {PROPERTY:jump gate ID} of $2.  If there is no JUMPGATE with that {PROPERTY:jump gate ID} it returns NULL.

{ABOUT_JUMPGATE_ID}</t>


<!--$1 $0 get ship array from sector/ship/station-->
<t id="1008">Returns a new ARRAY containing all SHIPS within the SECTOR, {CLASS:Carrier} or STATION $0.</t>   


<!--%1%0 get station array from sector-->	
<t id="1009">Returns a new ARRAY containing all STATIONS in the SECTOR $0.</t>		


<!--$1 $0 get factory array from sector-->
<t id="1010">Returns a new ARRAY containing all FACTORIES in the SECTOR $0.

{HEADING:Information}

This command will find any object with an OBJCLASS of {CLASS:Factory}, which includes FACTORIES and SHIPYARDS.</t>		


<!--%1%0 get dock array from sector-->	
<t id="1011">Returns a new ARRAY containing all DOCKS in the SECTOR $0.</t>		


<!--%1%0 get player owned ship array from sector-->
<t id="1012">Returns a new ARRAY containing all SHIPS OWNEDBY the player in the SECTOR $0.</t>		


<!--%1%0 get player owned station array from sector-->
<t id="1013">Returns a new ARRAY containing all STATIONS OWNEDBY the player in the SECTOR $0.</t>		


<!--%1%0 get asteroid array from sector-->
<t id="1014">Returns a new ARRAY containing all {TYPE:asteroids} in the SECTOR $0.</t>	


<!--$1 $0 find ship: class or type=$2o race=$3 flags=$4x refobj=$5x maxnum=$6y with homebase=$7y-->
<t id="1033">Finds and returns the SHIPS within the SECTOR $1 that have the HOMEBASE $7y.  {SEARCH_SYNTAX:SHIPS}

{HEADING:Optional Parameters}

{SEARCH_BY_TYPE_CLASS:SHIPS,2o}
{SEARCH_BY_RACE:SHIPS,3}
{SEARCH_BY_FLAGS:SHIPS,4x}

{HEADING:Search Flags}

{FLAG_NEAREST:SHIP,5x}
{FLAG_RANDOM:SHIP}
{FLAG_VISIBLE:SHIPS,5x}
{FLAG_KNOWN:SHIPS}
{FLAG_RACE_LOGIC}
{FLAG_INCLUDE_DOCKED}
{FLAG_WING_ONLY}
{FLAG_MULTIPLE:7z,SHIPS}
{FLAG_FRIEND:SHIPS,5x}
{FLAG_ENEMY:SHIPS,5x}
{FLAG_NEUTRAL:SHIPS,5x}

{HEADING:Unsupported Search Flags}

{FLAG_NO_EXACTJUMPS:1}
{FLAGS_MUTUTALLY_EXCLUSIVE_2:Nearest,Random}

{HEADING:Information}

{FLAGS_COMBINING:Enemy,Multiple}

{FLAGS_MULTIPLE_NEAREST}

{FLAGS_RELATION_REQUIREMENT:5x}</t>		

<!-- ********************************************************************************** -->
<!-- ********************************* x2 UNIVERSE PROPERTY *************************** -->
<!-- ********************************************************************************** -->
  
<!--%1%0 get current galaxy flight timestep in ms-->
<t id="564">Returns the length of time between updates of the game data within the SECTOR containing the OBJ $0, in {UNITS:milliseconds}.

{HEADING:Information}

For OOS \(out-of-sector\) OBJS this is typically 30 seconds, for OBJS within the SECTOR containing the player this is typically 5 seconds.</t>


<!-- ********************************************************************************** -->
<!-- ******************************** X2  WARE  PROPERTY ****************************** -->
<!-- ********************************************************************************** -->

<!--%0get volume of ware %1-->
<t id="604">Returns the {PROPERTY:unit volume} of the WARE $1.</t>


<!--%0get transport class of ware %1-->
<t id="605">Returns the {TYPE:transport class} of the WARE $1.</t>


<!--%0get average price of ware %1-->
<t id="629">Returns the {PROPERTY:average price} of the WARE $1.

The {PROPERTY:average price} if the average of the {PROPERTY:minimum price} and {PROPERTY:maximum price}.</t>


<!--%0get max price of ware %1-->
<t id="630">Returns the {PROPERTY:maximum price} of the WARE $1.</t>


<!--%0get min price of ware %1-->
<t id="631">Returns the {PROPERTY:minimum price} of the WARE $1.</t>


<!--%0get max price of ware %1 as secondary resource-->
<t id="632">Returns the {PROPERTY:maximum price} of the WARE $1 when bought as a {PROPERTY:secondary resource} of a STATION.</t>


<!--%0get min price of ware %1 as secondary resource-->
<t id="633">Returns the {PROPERTY:minimum price} of the WARE $1 when bought as a {PROPERTY:secondary resource} of a STATION.</t>


<!--%0 is ware %1 illegal in %2 sectors-->
<t id="653">Returns TRUE if the WARE $1 is {PROPERTY:illegal} within the SECTORS OWNEDBY the RACE $2, and FALSE otherwise.</t>


<!--%0 get maintype of ware %1-->
<t id="655">Returns the MAINTYPE of the WARE $1.</t>


<!--%0 get subtype of ware %1-->
<t id="656">Returns the SUBTYPE of the WARE $1.</t>


<!--$0 get ware from maintype $1x and subtype $2y-->
<t id="657">Returns the WARE with the MAINTYPE $1x and SUBTYPE $2y, if any, otherwise this command returns NULL.

{RELATED_SCRIPT_OBJECT_LIST:MAINTYPES,Constants}</t>

<!-- ********************************************************************************** -->
<!-- ******************************** X2 WEAPON PROPERTY ****************************** -->
<!-- ********************************************************************************** -->


<!--%0 get range of missile type %1-->
<t id="557">Returns the {PROPERTY:firing range} of the MISSILE WARE $1, in {UNITS:meters}.</t>


<!-- ********************************************************************************** -->
<!-- ********************************* x2 REMAINING COMMANDS ***************************** -->
<!-- ********************************************************************************** -->









<!-- ********************************************************************************** -->
<!-- ********************************* x2   GAME ENGINE ********************************** -->
<!-- ********************************************************************************** -->

<!--%0script engine version-->
<t id="152">Returns the {PROPERTY:engine version} of the current game, which uniquely identifies the game version and any patches.

{HEADING:Engine Versions}

{CONSTANT:44} - {X3TC} v2.5 and above
{CONSTANT:40} - {X3TC} v2.0

{CONSTANT:33} - {X3R} v2.5 and above
{CONSTANT:32} - {X3R} v2.0
{CONSTANT:28} - {X3R} v1.4
{CONSTANT:25} - {X3R} v1.3

{CONSTANT:25} - {X2} v1.2 and above</t>

  
<!--set global variable: name=%0 value=%1-->
<t id="157">Sets the {PROPERTY:global variable} with the name $0 to the value $1.  If the variable does not exist, it is created.

{ABOUT_LOCAL_AND_GLOBAL_VARIABLES}</t>
  
<!--%1get global variable: name=%0-->
<t id="158">Returns the value of the {PROPERTY:global variable} with the name $0.  If the variable does not exist, this command returns NULL.

{ABOUT_LOCAL_AND_GLOBAL_VARIABLES}</t>


<!--al engine: register script=%0-->
<t id="1000">Registers the script $0 as an AL_PLUGIN.

{ABOUT_AL_PLUGINS}</t>


<!--al engine: unregister script %0-->
<t id="1001">Unregisters the previously registered script $0 as no longer being an AL_PLUGIN.

{ABOUT_AL_PLUGINS}</t>


<!--al engine: set plugin %0 description to %1-->
<t id="1024">Sets the name of the AL_PLUGIN $0 to the STRING $1.  This name is displayed to the user in the 'Manage AL Plugins' menu.

{ABOUT_AL_PLUGINS}</t>


<!--al engine: set plugin %0 timer interval to %1 s-->
<t id="1025">Sets the frequency of 'timer' events sent to the AL_PLUGIN $0 to $1 seconds.

{ABOUT_AL_PLUGINS}</t>


<!-- ********************************************************************************** -->
<!-- ********************************* x2   PILOTS *************************************** -->
<!-- ********************************************************************************** -->

<!-- $0 set pilot fightskill to $1 -->
<t id="533">Sets the {PROPERTY:fighting skill} of the OBJ $0 to the INTEGER $1.

The {PROPERTY:fighting skill} ranges from 0 \(terrible\) to 28 \(best\) and determines the quality of the maneuvers performed during combat.</t>


<!-- $1 $0 get pilot fightskill -->
<t id="534">Returns an INTEGER containing the {PROPERTY:fighting skill} of the OBJ $0.

The {PROPERTY:fighting skill} ranges from 0 \(terrible\) to 28 \(best\) and determines the quality of the maneuvers performed during combat.</t>


<!--%1%0 get pilot name-->
<t id="1037">Returns a STRING containing the {PROPERTY:name} of the PILOT of the SHIP $0.</t>


<!--%0 set pilot name to %1-->
<t id="1038">Sets the {PROPERTY:name} of the PILOT in the SHIP $0 to the STRING $1.

{HEADING:Information}

This command does not work on the player SHIP.</t>


<!--%0get random name: race=%1-->
<t id="1039">Returns a STRING containing a randomly generated name appropriate for the RACE $1.</t>


<!--$0 set pilot speaker: voice=$1o, face=$2x, Pirate subrace=$3y, Argon female=$4z-->
<t id="1040">Sets the voice and appearance of the PILOT of the SHIP $0, when seen during a communications message.

The {PROPERTY:voice} is an INTEGER between 0 and 7 correlating to the RACE variation strings in the main language file.

The {PROPERTY:face} $2x is the INTEGER ID of the video displayed, correlating to the videos in the main video file.

If the {PROPERTY:pirate subrace} $3y is TRUE then the appropriate pirate variations are used instead.

The {PROPERTY:argon female} $4z is unknown, but may related to the ATMO/Betty docking computer.

{RELATED_MEDIA:speech clips}</t>



<!-- ********************************************************************************** -->
<!-- ********************************* x2   OBJECT ACTIONS   ***************************** -->
<!-- ********************************************************************************** -->

<!--%0 destruct: show no explosion=%1-->
<t id="765">Destroys the OBJ $0.  If $1 is TRUE and the OBJ is in the same SECTOR as the player then an explosion is shown, otherwise it is not.{CORRECTION:Jack08}{HEADING:Information}

Destroying an OBJ without an explosion is used for destroying {TERMINOLOGY:OOS} \(Out-of-Sector\) OBJS.</t>


<!--free sector object %0-->
<t id="773">Unloads the SECTOROBJECT $0 previously created with {COMMAND:create sector object} and destroyed with {COMMAND:kill sector object}.

This is used to unload the SECTOROBJECT from the game.

{HEADING:Egosoft Warning}

Egosoft expressly advise against using SECTOROBJECTS directly as they may corrupt your save games.  Use the {COMMAND:create ...} and {COMMAND:destruct} commands instead.

{SEE_HANDBOOK_PAGE:73}</t>


<!--kill sector object %0 : reason=%1 , killer sector object=%2-->
<t id="774">Informs the game engine that the SECTOROBJECT $0 has been destroyed by the OBJ $2 using the method $2.

{HEADING:Method Codes}

{CONSTANT:2} - Destroyed by LASER
{CONSTANT:3} - Destroyed by collision
{CONSTANT:5} - Destroyed by MISSILE

{HEADING:Egosoft Warning}

Egosoft expressly advise against using SECTOROBJECTS directly as they may corrupt your save games.  Use the {COMMAND:create ...} and {COMMAND:destruct} commands instead.

{SEE_HANDBOOK_PAGE:73}</t>


<!--start sector object %0 in space %1-->
<t id="775">Initialises the SECTOROBJECT $0 previously created with {COMMAND:create sector object} and places it in the SECTOR with {TERMINOLOGY:Sector Object ID} $1.

{HEADING:Egosoft Warning}

Egosoft expressly advise against using SECTOROBJECTS directly as they may corrupt your save games.  Use the {COMMAND:create ...} and {COMMAND:destruct} commands instead.

{SEE_HANDBOOK_PAGE:73}</t>


<!--%0 put into environment %1-->
<t id="906">Instantly moves the OBJ $0 into the SECTOR or STATION $1.

If $1 is a STATION then the SHIP $0 must be of the OBJCLASS {CLASS:Little Ship}.</t>






<!-- ********************************************************************************** -->
<!-- ********************************** X2 FLOW CONTROL ********************************* -->
<!-- ********************************************************************************** -->

<!--START %0 command %1 : arg1=%2, arg2=%3, arg3=%4, arg4=%5-->
<t id="514">Commands the OBJ $0 to perform the {TYPE:command} $1.

This command will instruct the OBJ $0 to stop executing the {TYPE:command} in {PROPERTY:task 0}, and to perform the {TYPE:command} $0 instead.

{ABOUT_COMMANDS_TASKS_AND_SIGNALS}

{ABOUT_INTERRUPTS_AND_YIELDING}

{RELATED_SCRIPT_OBJECT_LIST:commands,Object Commands}</t>



<!--%1%2 call script %0 : %3-->
<t id="102">Executes the script $0 on the OBJ $2 as {PROPERTY:task 0}, waits for the script to finish and returns the result.

You can optionally specify an unlimited number of {PROPERTY:arguments}.

{COMMAND_INTERRUPTABLE}

{ABOUT_COMMANDS_TASKS_AND_SIGNALS}

{ABOUT_INTERRUPTS_AND_YIELDING}</t>


<!--%0wait %1 ms-->
<t id="105">Yields execution to other scripts for a period of $1 {UNITS:milliseconds}.

{ABOUT_COMMANDS_TASKS_AND_SIGNALS}

{ABOUT_INTERRUPTS_AND_YIELDING}</t>


<!--%0wait randomly from %1 to %2 ms-->
<t id="107">Yields execution to other scripts for a random period of between $1 and $2 {UNITS:milliseconds}.

{COMMAND_INTERRUPTABLE}</t>


<!--$0 interrupt with script $1 and prio $2-->
<!--$0 interrupt with script $1 and priority $2-->
<t id="111">Interrupts the script currently executing as {PROPERTY:task 0} on the OBJ $0 with the script $1.

The new script is executed with the priority $2.

{ABOUT_COMMANDS_TASKS_AND_SIGNALS}

{ABOUT_INTERRUPTS_AND_YIELDING}

{COMMAND_NAME_CHANGED:interrupt with script and prio}</t>


<!--$0 interrupt with script $1 and prio $2: arg1=$3o arg2=$4x arg3=$5y arg4=$6z-->
<!--$0 interrupt with script $1 and priority $2: arg1=$3o arg2=$4x arg3=$5y arg4=$6z-->
<t id="159">Interrupts the script currently executing as {PROPERTY:task 0} on the OBJ $0 with the script $1.

The new script is executed with the priority $2 and is passed the {PROPERTY:arguments} $3o, $4x, $5y and $6z.

{ABOUT_COMMANDS_TASKS_AND_SIGNALS}

{ABOUT_INTERRUPTS_AND_YIELDING}

{COMMAND_NAME_CHANGED:interrupt with script and prio}</t>


<!--$0 interrupt task $2 with script $1 and prio $3: arg1=$4o arg2=$5x arg3=$6y arg4=$7z-->
<!--$0 interrupt task $2 with script $1 and priority $3: arg1=$4o arg2=$5x arg3=$6y arg4=$7z-->
<t id="1016">Interrupts the script currently executing as {PROPERTY:task} $2 on the OBJ $0 with the script $1.

The new script is executed with the priority $3 and is passed the {PROPERTY:arguments} $4o, $5x, $6y and $7z.

{ABOUT_COMMANDS_TASKS_AND_SIGNALS}

{ABOUT_INTERRUPTS_AND_YIELDING}

{COMMAND_NAME_CHANGED:interrupt task with script and prio}</t>


<!--$0 begin task $2 with script $1 and prio $3: arg1=$4o arg2=$5x arg3=$6y arg4=$7z arg5=$8a-->
<!--$0 begin task $2 with script $1 and priority $3: arg1=$4o arg2=$5x arg3=$6y arg4=$7z arg5=$8a-->
<t id="1017">Executes the script $1 concurrently on the OBJ $0 as {PROPERTY:task} $2.

The new script is executed with the priority $3 and is passed the {PROPERTY:arguments} $4o, $5x, $6y, $7z and $8a.

{ABOUT_COMMANDS_TASKS_AND_SIGNALS}

{ABOUT_INTERRUPTS_AND_YIELDING}

{COMMAND_NAME_CHANGED:start task with script and prio}</t>





<!-- ********************************************************************************** -->
<!-- ********************************* x2  SYSTEM PROPERTY   ***************************** -->
<!-- ********************************************************************************** -->

<!--$0 system date is month=$1x, day=$2y-->
<t id="140">Returns TRUE if the system date is on or later than day $2y of the month $1x.

{HEADING:Information}

The day $2y should be an INTEGER between 0 and 30.
The month $1x should be an INTEGER between 0 and 11.</t>


<!--write to log file $0x append=$1y value=$2-->
<t id="404">Outputs a value $2 to the {TYPE:logfile} with ID $0x.

If $1y is TRUE, contents of the {TYPE:logfile} are appended, otherwise they are replaced.

{HEADING:Information}

The {TYPE:logfile} is created in the game folder and named `log&lt;id&gt;.txt`.</t>


<!--write to log file $0x append=$1y printf: fmt=$2, $3o, $4x, $5y, $6z, $7a-->
<t id="405">Outputs a STRING generated from a template $2 to the {TYPE:logfile} with ID $0x.

The template can contain up to 5 parameter fields, denoted by `%s`, which are relaced by the arguments $3o, $4x, $5y, $6z and $7a.

If $1y is TRUE, contents of the {TYPE:logfile} are appended, otherwise they are replaced.

{HEADING:Information}

The {TYPE:logfile} is created in the game folder and named `log&lt;id&gt;.txt`.</t>


<!--write to log file $0o append=$1x printf: pageid=$2y textid=$3z, $4o, $5x, $6y, $7z, $8a-->
<t id="406">Outputs a STRING generated from a template, stored in a language strings file, to the {TYPE:logfile} with ID $0x.

The template STRING with ID $3z is loaded from page $2y.

The template can contain up to 5 parameter fields, denoted by `%s`, which are relaced by the arguments $4o, $5x, $6y, $7z and $8a.

If $1y is TRUE, contents of the {TYPE:logfile} are appended, otherwise they are replaced.

{HEADING:Information}

The {TYPE:logfile} is created in the game folder and named `log&lt;id&gt;.txt`.</t>





<!-- ********************************************************************************** -->
<!-- ********************************* x2  USER INTERFACE ******************************** -->
<!-- ********************************************************************************** -->

<!--play sample %0-->
<t id="200">Plays the sound effect with ID $0.

{RELATED_MEDIA:sound effects}</t>


<!--play sample: incoming transmission %0, from object %1-->
<t id="201">Plays the speech clips with ID $0.

This command is very limited in functionality, see {COMMAND:speak text:} for a more effective way of playing speech clips.

{HEADING:Supported Speech Clips}

{CONSTANT:\[IncomingTransmission.Greeting\]} - `We are being hailed`
{CONSTANT:\[IncomingTransmission.Message\]} - `Incoming message`
{CONSTANT:\[IncomingTransmission.Scanned\]} - `We are scanned`
{CONSTANT:\[IncomingTransmission.SOS\]} - `Emergency message from xyz`</t>


<!--%0 send audio message %1 to player-->
<t id="202">Displays a video and plays a speech clip that appears to originating from the OBJ $0.

This command can be used to display any voiced message from the `Race Variation` speech clips.

{HEADING:Constants}

{CONSTANT:\[Comm.DLG_C_START_FIGHTING\]} - Ship about to attack
{CONSTANT:\[Comm.DLG_POL_ILLEGAL_GOODS\]} - Illegal goods detected
{CONSTANT:\[Comm.DLG_POL_LAST_WARNING\]} - Final warning
{CONSTANT:\[Comm.DLG_POL_LEGAL_GOODS\]} - No illegal goods detected</t>


<!--send incoming message %0 to player: display it=%1-->
<t id="203">Adds the STRING $0 to the player`s message log.

If $1 is TRUE the message is displayed in a popup window, if FALSE the player is simply notified.</t>


<!--write to player logbook %0-->
<t id="400">Writes any value $0 to the player logbook.  If $0 is an OBJ, the name displayed to the user is written to the logbook.

{HEADING:Information}

See the help file for a list of formatting available to logbook messages.</t>


<!--%0 write to logbook %1-->
<t id="401">{NOT_IMPLEMENTED}

Use {COMMAND:write to player logbook} instead.</t>


<!--write to player logbook: printf: fmt=$0, $1o, $2x, $3y, $4z, $5a-->
<t id="402">Writes a STRING to the player logbook, generated from a template STRING $0 and the parameters $1o, $2x, $3y, $4z, $5a.  If the template STRING $0 contains less than five parameter fields \(which are denoted by `%s`\) then unused parameters are ignored.

{HEADING:Information}

Unlike the C programming command of the same name, there are no other parameter field types.
See the help file for a list of formatting available to logbook messages.</t>


<!--write to player logbook: printf: pageid=$0x textid=$1y, $2o, $3x, $4y, $5z, $6a-->
<t id="403">Writes a STRING to the player logbook, generated from a template STRING stored in a {TERMINOLOGY:Language Strings File} and the parameters $2o, $3x, $4y, $5z, $6a.  The template STRING with ID $1y is loaded from page $0x.  If the template STRING contains less than five parameter fields \(which are denoted by `%s`\) then unused parameters are ignored.

{HEADING:Information}

Unlike the C programming command of the same name, there are no other parameter field types.
You can use the language file editor to customise the formatting of logbook messages.

{LOADTEXT_REQUIREMENT}

{RELATED_COMMAND:To use a hard-coded template STRING,write to player logbook: printf:,User Interface}</t>


<!--$0 speak text: page=$1x id=$2y priority=$3z-->
<t id="1042">Plays the speech clip associated with the STRING with ID $2y within page $1x, and displays the STRING as a subtitle.

If {KEYWORD:START} is used, the command returns immediately and the speech clip is played asynchronously.

{HEADING:Information}

Only one speech clip can be played at a time, those with a higher priority $3z take precedence over those with a lower priority.

{RELATED_COMMAND:To play several speech clips in succession,speak array:,User Interface}</t>




<!-- ********************************************************************************** -->
<!-- ********************************* x2  UNIVERSE PROPERTY ***************************** -->
<!-- ********************************************************************************** -->

<!--%1%0 get notoriety to race %2-->
<t id="725">Returns the raw NOTORIETY value between the {PROPERTY:owner race} of the OBJ $0 and the RACE $2.

{ABOUT_NOTORIETY}</t>


<!--%0get notoriety from race %1 to race %2-->
<t id="726">Returns the raw NOTORIETY value between the RACE $1 and the RACE $2.

{ABOUT_NOTORIETY}</t>


<!-- $0 add notoriety: race=$1 value=$2 -->
<t id="792">Increments the raw value of the NOTORIETY between the RACE $0 and the RACE $1 by $2 points.

{ABOUT_NOTORIETY}

{HEADING:Information}

This command does not function correctly in X2.</t>


<!--%0is plot %1 state flag %2-->
<t id="1034">Returns TRUE if the {X2} plot is currently in the {PROPERTY:state} $2.

{SEE_HANDBOOK:plot states}</t>


<!--%0get Khaak aggression level-->
<t id="1044">Returns the current {PROPERTY:aggression level} of Kha`ak, as a {UNITS:percentage}.

{HEADING:Information}

The Kha`ak {PROPERTY:aggression level} determines the number and size of {OBJECT:Kh`aak Clusters} that spawn randomly in the game.

The default value is 15%.</t>


<!--set Khaak aggression level to %0-->
<t id="1045">Sets the current {PROPERTY:aggression level} of Kha`ak to the {UNITS:percentage} $0.

{HEADING:Information}

The Kha`ak {PROPERTY:aggression level} determines the number and size of {OBJECT:Kh`aak Clusters} that spawn randomly in the game.

The default value is 15%.</t>





<!-- ********************************************************************************** -->
<!-- ********************************* x2 SCRIPT PROPERTIES *************************** -->
<!-- ********************************************************************************** -->


<!--
<t id="108">%0 = get script priority</t>
<t id="109">set script priority to %0</t>


<t id="113">%0 connect ship command/signal %1 to script %2 with prio %3</t>
<t id="114">%0 set ship command/signal %1 to global default behaviour</t>
<t id="115">%0 ignore ship command/signal %1</t>
<t id="116">enable signal/interrupt handling: %0</t>
<t id="117">%0is signal/interrupt handling on</t>
<t id="118">global script map: set: key=%0, class=%3, race=%4, script=%1, prio=%2</t>
<t id="119">global script map: remove: key=%0, class=%1, race=%2</t>
<t id="120">set script command: %0</t>
<t id="121">%0get script command</t>
<t id="122">set script command target: %0</t>
<t id="123">%0get script command target</t>
<t id="124">%0 datatyp[ %1 ]</t>
<t id="125">%0 is datatyp[ %1 ] == %2</t>
<t id="127">global script map: ignore: key=%0, class=%1, race=%2</t>
<t id="138">%0state of news article: page=%1 id=%2</t>
<t id="139">set state of news article page=%0 id=%1 to %2</t>


<t id="144">set script command upgrade: command=%0  upgrade=%1</t>
<t id="145">%0get script command upgrade: command=%1</t>
<t id="146">%0is script with prio %1 on stack</t>
<t id="147">%0get task ID</t>
-->

<!--%0get PID-->
<t id="148">Returns the {PROPERTY:process ID} of any concurrently executing script, ie. one initiated using the {KEYWORD:START} keyword.

{HEADING:Information}

This command can be very useful when trying to create a global task that should only have one instance. For example, you could concurrently execute the script below from a setup script, and be confident that only one instance will be processing at any one time:

{VARIABLE:$PID} = {COMMAND:get PID}
{VARIABLE:$active.PID} = {COMMAND:get PID}
{COMMAND:set global variable: name='Process.ID' value=}{VARIABLE:$PID}
{KEYWORD:while} {VARIABLE:$active.PID} == {VARIABLE:$PID}
\t* Perform your processing here
\t= {COMMAND:wait randomly from 5000 to 10000 ms}
\t{VARIABLE:$active.PID} = {COMMAND:get global variable: name='Process.ID'}
{KEYWORD:end}{SUBMISSION:Jack08}</t>

<!--
<t id="153">infinite loop detection enabled=%0</t>
<t id="154">set script command upgrade: command=%0  upgrade=%1  script=%2</t>
-->


<!--%0get script version-->
<t id="1031">Returns the {PROPERTY:version} of the currently executing script.</t>


<!--%0get script name-->
<t id="1032">Returns the {PROPERTY:script name} of the currently executing script.</t>


</page>



  
  
  












  
  
  
  
  
  
  
  
<page id="302003" title="X3:Reunion - Command Descriptions">


<!-- ********************************************************************************** -->
<!-- **********************************  X3:R  ARRAYS    ********************************* -->
<!-- ********************************************************************************** -->
  

<!--$0 $1[$2x][$3y]-->
<t id="1081">Retrieves a value from an ARRAY stored within another ARRAY.  The value at ARRAY index $3y is retrieved from an ARRAY which is itself stored at ARRAY index $2x of the ARRAY $1.
           
{HEADING:Information}
        
All ARRAY indicies are zero-based.</t>

  
<!--$0[$1x][$2y] = $3-->
<t id="1082">Sets a value in an ARRAY stored within another ARRAY.  The value $3 is stored at index $2y of the ARRAY which is itself stored at index $1x of the ARRAY $0.

{HEADING:Information}

All ARRAY indicies are zero based.</t>

  
<!--$0 get index of $2 in array $1 offset=$3-->
<t id="1083">Searches ARRAY $1 for an element containing the value $2, beginning with the element at index $3.  If the value if found then the command returns the index of the element, otherwise it returns -1.

{HEADING:Information}

All ARRAY indicies are zero-based.</t>

  
<!--$0x[$1x] = $2y[$3y]-->
<t id="1092">Copies a value from one ARRAY into another ARRAY.  The value at index $3y of ARRAY $2y is copied to index $1x of ARRAY $0x.

{HEADING:Information}

All ARRAY indicies are zero based.</t>

  

<!-- ********************************************************************************** -->
<!-- **********************************  X3:R   MATHS ********************************* -->
<!-- ********************************************************************************** -->
  
<!--$0 square root of $1-->
<t id="1093">Returns the square root of the INTEGER $1</t>



<!-- ********************************************************************************** -->
<!-- **********************************  X3:R OBJECT ACTIONS ************************** -->
<!-- ********************************************************************************** -->
  

<!--<t id="1196">%0add lasers per value:%1(0-100) flags:%2</t>-->


<!--<t id="1197">%0add shields per value:%1(0-100)</t>-->


<!--%0force position: x=%1 y=%2 z=%3-->
<t id="1224">Forces the OBJ $0 to the {PROPERTY:position} at co-ordinates \(x, y, z\).</t>

<!-- ********************************************************************************** -->
<!-- **********************************  X3:R OBJECT PROPERTIES *********************** -->
<!-- ********************************************************************************** -->
 
<!-- %0 set hull to %1 -->
<t id="1047">Sets the {PROPERTY:hull energy} of the OBJ $0 to $1</t>
  
  
<!-- %0 set current shield strength to %1 -->
<t id="1048">Sets the {PROPERTY:shield energy} of the OBJ $0 to $1</t>
  

<!-- %1%0 is known -->
<t id="1061">Returns TRUE if the player has ever detected the OBJ $0, otherwise it returns FALSE.</t>
  
   
<!-- %0 set known status to %1 -->
<t id="1062">Sets whether the OBJ $0 has ever been detected by the player to TRUE or FALSE.</t>
  
   
<!-- %1%0 is detectable -->
<t id="1063">Returns TRUE if the OBJ $0 can be displayed in the sector map user interface, otherwise it returns FALSE.</t>
  
   
<!-- %1%0 is hired -->
<t id="1064">Returns TRUE if the TL_OBJECT is currently {PROPERTY:hired} for work, otherwise it returns FALSE.</t>
  
   
<!--$1 $0 get array of missiles aiming to me-->
<t id="1095">Returns a new ARRAY containing all the {TYPE:missiles} that are flying towards the object $0.</t>		<!--%1%0 get array of missiles aiming to me-->

  
<!--%1%0 is asteroid scanned-->
<t id="1198">Returns TRUE if the ASTEROID $0 has been {PROPERTY:scanned} thereby revealing it`s {PROPERTY:mineral yield}, otherwise it returns FALSE.</t>


<!--%0set asteroid scanned to %1-->
<t id="1199">Marks the ASTEROID $0 as {PROPERTY:scanned} if $1 is TRUE, otherwise as {PROPERTY:unscanned}.</t>


<!--%1%0 get flying ware count-->
<t id="1203">Returns the {PROPERTY:quantity} of the WARE within the {TYPE:flying ware} $0.</t>		

<!--%1%0 get resource waretype of asteroid-->
<t id="1213">Returns the WARE that would be received from mining the ASTEROID $0.</t>


<!--%1%0 has collectible rocks-->
<t id="1214">Return TRUE if the DEBRIS $0 has {TYPE:collectible rocks}, otherwise it returns FALSE.</t>		
  

<!-- ********************************************************************************** -->
<!-- ********************************** x3:R PILOTS *********************************** -->
<!-- ********************************************************************************** -->

<!-- %1%0 get pilot morale -->
<t id="1204">Returns the {PROPERTY:morale} of the PILOT in the SHIP $0.

The {PROPERTY:morale} is an INTEGER between 0 and 25 that represents their resistance to bailing.</t>


<!-- %1%0 get pilot aggression -->
<t id="1205">Returns the {PROPERTY:aggression} of the PILOT in the SHIP $0.

{UNDOCUMENTED}</t>


<!-- %0set pilot morale: %1 -->
<t id="1222">Sets the {PROPERTY:morale} of the PILOT in the SHIP $0 to the INTEGER $1.

The {PROPERTY:morale} is an INTEGER between 0 and 25 that represents their resistance to bailing.</t>


<!-- %0set pilot aggression: %1 -->
<t id="1223">Sets the {PROPERTY:aggression} of the PILOT in the SHIP $0 to the INTEGER $1.

{UNDOCUMENTED}</t>


<!-- %1%0 get pilot tradeskill -->
<t id="1325">Returns the {PROPERTY:trade skill} of the PILOT in the SHIP $0.

{UNDOCUMENTED}</t>


<!-- %0set pilot tradeskill to %1 -->
<t id="1326">Sets the {PROPERTY:trade skill} of the PILOT in the SHIP $0 to the INTEGER $1.

{UNDOCUMENTED}</t>

<!-- ********************************************************************************** -->
<!-- ********************************* X3:R PLAYER  *********************************** -->
<!-- ********************************************************************************** -->

<!-- %0 get player tracking aim -->
<t id="535">Returns the OBJ currently targeted by the player, if any, otherwise it returns NULL.</t>
  
<!-- set player tracking aim to %0 -->
<t id="1046">Sets the current target of the player to the OBJ $0.</t>
  
<!-- %0 get fight rank -->
<t id="1059">Returns the raw NOTORIETY value of the player`s {PROPERTY:fight rank}.

{ABOUT_NOTORIETY}</t>
  
<!-- %0 get trade rank -->
<t id="1060">Returns the raw NOTORIETY value of the player`s {PROPERTY:trade rank}.

{ABOUT_NOTORIETY}</t>
  
<!-- %0 get player name -->
<t id="1070">Returns a STRING containing the {PROPERTY:name} of the player.</t>

<!-- ********************************************************************************** -->
<!-- ********************************** x3:R SHIP PROPERTIES ************************** -->
<!-- ********************************************************************************** -->
  
<!-- %1%0 get current max speed -->
<t id="1049">Returns the current maximum {PROPERTY:speed} of the OBJ $0.</t>
  
<!-- ********************************************************************************** -->
<!-- ********************************** x3:R STATION TRADING ************************** -->
<!-- ********************************************************************************** -->

<!--VANILLA:  VARIATION   $0 find station: product $1 with best price depend on jumps:  max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6-->
<!--VANILLA:  VARIATION   $0 find factory: sells $1 with best chance:  max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6-->
<t id="1169">Finds and returns the FACTORY with the best combination of low {PROPERTY:ware price} and low {PROPERTY:jump distance} that is selling the WARE $1.  {SEARCH_RANGE:FACTORY,4z,5}

{SEARCH_SYNTAX:FACTORY}

{HEADING:Optional Parameters}

{SEARCH_BY_MAXIMUM_PRICE:FACTORIES,2x}
{SEARCH_BY_QUANITY_SELL:FACTORIES,3y}
{SEARCH_BY_TRADER:FACTORIES,6}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_1:X3R}

{COMMAND_NAME_CHANGED:find station: product ... with best price depend on jumps}</t>		


<!--VANILLA:  VARIATION   $0 find station: resource $1 with best price depend on jumps: min.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6-->
<!--VANILLA:  VARIATION   $0 find factory: buys $1 with best chance: min.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6-->
<t id="1170">Finds and returns the FACTORY with the best combination of high {PROPERTY:ware price} and low {PROPERTY:jump distance} that is willing to buy the WARE $1.  {SEARCH_RANGE:FACTORY,4z,5}

{SEARCH_SYNTAX:FACTORY}

{HEADING:Optional Parameters}

{SEARCH_BY_MINIMUM_PRICE:FACTORIES,2x}
{SEARCH_BY_QUANITY_BUY:FACTORIES,3y}
{SEARCH_BY_TRADER:FACTORIES,6}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_1:X3R}

{COMMAND_NAME_CHANGED:find station: resource ... with best price depend on jumps}</t>		


<!--VANILLA:  VARIATION   $0 find station sells: resource $1 with best price depend on jumps: max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6-->
<!--VANILLA:  VARIATION   $0 find dock: sells $1 with best chance: max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6-->
<t id="1171">Finds and returns the DOCK with the best combination of low {PROPERTY:ware price} and low {PROPERTY:jump distance} that is selling the WARE $1.  {SEARCH_RANGE:DOCK,4z,5}

{SEARCH_SYNTAX:DOCK}

{HEADING:Optional Parameters}

{SEARCH_BY_MAXIMUM_PRICE:DOCKS,2x}
{SEARCH_BY_QUANITY_SELL:DOCKS,3y}
{SEARCH_BY_TRADER:DOCKS,6}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_1:X3R}

{COMMAND_NAME_CHANGED:find station sells: resource ... with best price depend on jumps}</t>	


<!--VANILLA:  VARIATION   $0 find station: product $1 with best price random:  max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6-->
<!--VANILLA:  VARIATION   $0 find random factory: sells $1 with best price:  max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6-->
<t id="1176">Finds and returns a random FACTORY with the best combination of low {PROPERTY:ware price} and low {PROPERTY:jump distance} that is selling the WARE $1.  {SEARCH_RANGE:FACTORY,4z,5}

{SEARCH_SYNTAX:FACTORY}

{UNDOCUMENTED}

{HEADING:Optional Parameters}

{SEARCH_BY_MAXIMUM_PRICE:FACTORIES,2x}
{SEARCH_BY_QUANITY_SELL:FACTORIES,3y}
{SEARCH_BY_TRADER:FACTORIES,6}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_1:X3R}

{COMMAND_NAME_CHANGED:find station: product ... with best price random}</t>		


<!--VANILLA:  VARIATION   $0 find station: resource $1 with best price random: min.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6-->
<!--VANILLA:  VARIATION   $0 find random factory: buys $1 with best price: min.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6-->
<t id="1177">Finds and returns a random FACTORY with the best combination of high {PROPERTY:ware price} and low {PROPERTY:jump distance} that is willing to buy the WARE $1.  {SEARCH_RANGE:FACTORY,4z,5}

{SEARCH_SYNTAX:FACTORY}

{UNDOCUMENTED}

{HEADING:Optional Parameters}

{SEARCH_BY_MINIMUM_PRICE:FACTORIES,2x}
{SEARCH_BY_QUANITY_BUY:FACTORIES,3y}
{SEARCH_BY_TRADER:FACTORIES,6}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_1:X3R}

{COMMAND_NAME_CHANGED:find station: resource ... with best price random}</t>		


<!--VANILLA:  VARIATION   $0 find station sells: resource $1 with best price random: max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6-->
<!--VANILLA:  VARIATION   $0 find random dock: sells $1 with best price: max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6-->
<t id="1178">Finds and returns a random DOCK with the best combination of low {PROPERTY:ware price} and low {PROPERTY:jump distance} that is selling the WARE $1.  {SEARCH_RANGE:DOCK,4z,5}

{SEARCH_SYNTAX:DOCK}

{UNDOCUMENTED}

{HEADING:Optional Parameters}

{SEARCH_BY_MAXIMUM_PRICE:DOCKS,2x}
{SEARCH_BY_QUANITY_SELL:DOCKS,3y}
{SEARCH_BY_TRADER:DOCKS,6}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_1:X3R}

{COMMAND_NAME_CHANGED:find station sells: resource ... with best price random}</t>	



<!-- ********************************************************************************** -->
<!-- **********************************  X3:R   STRINGS    ********************************* -->
<!-- ********************************************************************************** -->
  
<!--$0 get length of string $1-->
<t id="1075">Returns the length of the STRING $1, in characters</t>


<!--$0 find position of pattern $2x in $1y-->
<t id="1076">Searches for the {PROPERTY:sub-string} $2x within the STRING $1y.  If the {PROPERTY:sub-string} is found then the command returns the character index at which the {PROPERTY:sub-string} begins, otherwise it returns -1.

{HEADING:Information}

All character indicies are zero based.</t>


<!--$0 get substring of $1 offset=$2x length=$3y-->
<t id="1077">Returns a new STRING containing a {PROPERTY:sub-string} from the STRING $1.  The {PROPERTY:sub-string} is extracted from character index $2x and is $3y characters in length.

{HEADING:Information}

All character indicies are zero based.</t>


<!--$0 string $1 to integer-->
<t id="1078">Returns the INTEGER version of a number stored in $1 as a STRING.

{HEADING:Information}

The conversion stops at the first non-numeric character.

{RELATED_COMMAND:To convert an INTEGER into a STRING,convert number to string,Strings}

{RELATED_SCRIPT_OBJECT_LIST:Data Types,Data Types}</t>


<!--$0 substitute in string $1x: pattern $2y with $3z-->
<t id="1079">Returns a new STRING created from an existing STRING $1x, with all the occurrences of the {PROPERTY:sub-string} $2y replaced with the {PROPERTY:sub-string} $3z.  If no occurrences of {PROPERTY:sub-string} $2y were found then the command returns -1.</t>


<!--$0 format seconds=$1 to Zura time string-->
<t id="1080">{UNDOCUMENTED}</t>   
  

<!--<t id="1080">%0 format seconds=%1 to Zura time string</t>-->
  

<!-- ********************************************************************************** -->
<!-- ********************************** X3:R UNIVERSE DATA **************************** -->
<!-- ********************************************************************************** -->
  

<!--$0 create debris: type=$1x addto=$2 resource=$3y yield=$4z x=$5xª y=$6yª z=$7zª-->
<t id="799">Creates and returns new DEBRIS of SUBTYPE $1x in the SECTOR $2 containing the WARE $3y with a {PROPERTY:ware quantity} of $4z.  If this command fails then it returns NULL.

{COORDINATES:DEBRIS,5xª,6yª,7zª}</t>		


<!--%1%0 get gate destination: return sector=%2-->
<t id="1057">Returns the destination SECTOR or destination JUMPGATE associated with the JUMPGATE $0.

If $2 is TRUE the command returns the destination SECTOR, if $2 is FALSE the command returns the destination JUMPGATE.</t>		

  
<!--%1%0 get gate id-->
<t id="1058">Returns the {PROPERTY:jump gate ID} of the JUMPGATE $0.

{ABOUT_JUMPGATE_ID}</t>		

  
<!--$0 get next gate on route from $1x to $2y-->
<t id="1074">Returns the first JUMPGATE a SHIP is required to pass through in order to travel from SECTOR $1x to the SECTOR $2y via the shortest route available.

If SECTOR $1x and SECTOR $2y are the same, the command returns NULL.

{ROUTE_CALCULATIONS}</t>		

  
<!--%1%0 get owned ships: class/type=%2-->
<t id="1067">Returns a new ARRAY containing all the SHIPS with the OBJCLASS or OBJTYPE $2 which are OWNEDBY the SHIP, STATION or RACE $0.

{HEADING:Information}

If $0 is a RACE then all SHIPS OWNEDBY that RACE are returned.
If $0 is a SHIP or STATION then all SHIPS with a {PROPERTY:home base} of $0 are returned.
If $2 is NULL then SHIPS of any OBJCLASS and any OBJTYPE are returned.</t>      

  
<!--%1 get ship array: of race %0 class/type=%2-->
<t id="1068">Returns a new ARRAY containing all the SHIPS with the OBJCLASS or OBJTYPE $2 which are OWNEDBY the RACE $0.  If $2 is NULL then SHIPS of any OBJCLASS and any OBJTYPE are returned.

{RELATED_COMMAND:To retrieve all the SHIPS MANUFACTUREDBY a RACE,get ship type array: maker race,Universe Data}</t>		

  
<!--%1 get station array: of race %0 class/type=%2-->
<t id="1069">Returns a new ARRAY containing all the STATIONS with the OBJCLASS or OBJTYPE $2 which are OWNEDBY the RACE $0.  If $2 is NULL then STATIONS of any OBJCLASS and any OBJTYPE are returned.</t>		


<!--$0 find nebula: sector=$1 type=$2x effect=$3y flags=$4z refobj=$5 maxdist=$6xª maxnum=$7yª refpos=$8-->
<t id="1143">Finds and returns the NEBULAE within the SECTOR $1.  {SEARCH_SYNTAX:NEBULA}

{HEADING:Optional Parameters}

Only return NEBULA with a SUBTYPE $2x
Only return NEBULA with a {PROPERTY:nebula effect} of $3y
{SEARCH_BY_DISTANCE_2:NEBULAE,6xª,5,8}
{SEARCH_BY_FLAGS:NEBULAE,4z}

{HEADING:Search Flags}

{FLAG_NEAREST_2:NEBULA,5,8}
{FLAG_RANDOM:NEBULA}
{FLAG_VISIBLE:NEBULAE,5}
{FLAG_KNOWN:NEBULAE}
{FLAG_MULTIPLE:7yª,NEBULAE}

{HEADING:Unsupported Search Flags}

{FLAG_NO_EXACTJUMPS:1}
{FLAG_NO_RELATIONS:NEBULAE}
{FLAGS_MUTUTALLY_EXCLUSIVE_2:Nearest,Random}

{HEADING:Information}

{FLAGS_COMBINING:Random,Visible}

{FLAGS_MULTIPLE_NEAREST}

{FLAGS_REFERENCE_REQUIREMENT:5,8}</t>


<!--$0 find a random sector: startsector=$1, jumps=$2x, owner=$3, security level=$4y-->
<t id="1206">Returns a randomly chosen SECTOR belonging to the RACE $3 that is a maximum {PROPERTY:jump distance} of $2x from the SECTOR $1. 

The following {PROPERTY:security levels} are supported:
[center]{VARIABLE:2} - {PROPERTY:core sectors}\t{VARIABLE:1} - {PROPERTY:border sectors}\tNULL - Any SECTOR[/center]
To retrieve a SECTOR from any RACE, set $3 to NULL.

{ABOUT_SECTOR_SECURITY}

{HEADING:Information}

All {PROPERTY:jump distances} are zero-based.</t>


<!--$0 find debris: sector=$1 resource=$2 min yield=$3x flags=$4a refobj=$5 num=$6y maxdist=$7z refpos=$8-->
<t id="1212">Finds and returns the DEBRIS within the SECTOR $1.  {SEARCH_SYNTAX:DEBRIS}

{HEADING:Optional Parameters}

Only return DEBRIS containing the WARE $2
Only return DEBRIS with a {PROPERTY:mineral yield} of $3x or more
{SEARCH_BY_DISTANCE_2:DEBRIS,7z,5,8}
{SEARCH_BY_FLAGS:DEBRIS,4a}

{HEADING:Search Flags}

{FLAG_NEAREST_2:DEBRIS,5,8}
{FLAG_RANDOM:DEBRIS}
{FLAG_VISIBLE:DEBRIS,5}
{FLAG_KNOWN:DEBRIS}
{FLAG_MULTIPLE:6y,DEBRIS}

{HEADING:Unsupported Search Flags}

{FLAG_NO_EXACTJUMPS:1}
{FLAG_NO_RELATIONS:DEBRIS}
{FLAGS_MUTUTALLY_EXCLUSIVE_2:Nearest,Random}

{HEADING:Information}

{FLAGS_COMBINING:Random,Visible}

{FLAGS_MULTIPLE_NEAREST}

{FLAGS_REFERENCE_REQUIREMENT:5,8}</t>		

<!-- ********************************************************************************** -->
<!-- ********************************** x3:R UNIVERSE PROPERTY ************************ -->
<!-- ********************************************************************************** -->


<!--Vanilla:  set notoriety of %0 -> %1 to %2 points-->
<!--X-Studio: set notoriety between $0 and $1 to $2 points-->
<t id="1207">Sets the raw value of the NOTORIETY between the RACE $0 and the RACE $1 to $2 points.

Note: This command does not function correctly in X2.

{ABOUT_NOTORIETY}

{COMMAND_NAME_CHANGED:set notoriety of .. -&gt; .. to .. points}</t>

<!-- %0set relations from notoriety: include player as target and race -> teladi as owner=%1 -->
<t id="1200">Updates the {PROPERTY:relation} between the OBJ $0 and the player according to the current NOTORIETY between them.

{ABOUT_NOTORIETY}</t>

<!-- ********************************************************************************** -->
<!-- ********************************** x3:R USER INTERFACE **************************** -->
<!-- ********************************************************************************** -->



<!-- send incoming question %0 to player: callback=%1 -->
<t id="212">Displays the question STRING $0 to the player in a popup window, and calls the script $1 with the user`s choosen answer.

The script $1 should contain a STRING argument which will contain the ID of the button pressed.</t>
  
<!-- send incoming question %0 to player: callback=%1 flags=%2 -->
<t id="213">Adds the question STRING $0 to the player`s message log, and calls the script $1 when the user chooses an answer.

If $2 is TRUE the message is displayed in a popup window, if FALSE the player is simply notified.

The script $1 should contain a STRING argument which will contain the ID of the button pressed.</t>

<!-- ********************************************************************************** -->
<!-- ********************************** x3:R REMAINING COMMANDS **************************** -->
<!-- ********************************************************************************** -->

  
<!--VANILLA: add merchant %0 base=%1 wanted wares=%2 owned wares=%3 cash=%4 rank=%5-->
<!--XSTUDIO: $1 add merchant name=$0 wanted wares=$2x owned wares=$3y cash=$4x rank=$5y-->
<t id="1110">ADD NEW STOCK REGARDING CHANGED SYNTAX.   http://forum.egosoft.com/viewtopic.php?t=287999  Adds merchant to a station. </t>


<!--<t id="571">%1%0 can missile %2 be installed</t>

<t id="1021">%0 set race logic control enabled to %1</t>

<t id="1030">%0 set owner race to %1</t>
<t id="1031">%0get script version</t>
<t id="1032">%0get script name</t>

<t id="1034">%0is plot %1 state flag %2</t>

<t id="1036">%1%0 get ID code</t>


<t id="1041">%1%0 get tradeable ware array from station</t>

<t id="1043">%0 set serial name of station to %1</t>

<t id="1052">%1%0 get production cycle time: account for secondary resources=%2</t>
<t id="1053">%1%0 get remaining production cycle time</t>
<t id="1054">%1%0 get number of products per cycle</t>
<t id="1055">%1%0 get number of resources per cycle for ware %2</t>
<t id="1056">%1%0 get production status: as percentage=%2</t>
<t id="1057">%1%0 get gate destination: return sector=%2</t>

<t id="1065">%1%0 get formation</t>
<t id="1066">%1%0 serialise object</t>
<t id="1067">%1%0 get owned ships: class/type=%2</t>
<t id="1068">%1 get ship array: of race %0 class/type=%2</t>

<t id="1071">%1%0 get tradeable ware array from ship</t>
<t id="1072">%1%0 is script %2 on stack of task=%3</t>
<t id="1073">%1%0 is task %2 in use</t>

<t id="1100">%0 register hotkey %1 to call script %2</t>
<t id="1101">unregister hotkey %0</t>

<t id="1201">%0is a new script version available</t>
<t id="1202">%1%0 get job id</t>

<t id="1217">add blueprints to player HQ: type=%0</t>
<t id="1218">%0player HQ has blueprints for: type=%1</t>
<t id="1219">remove blueprints from player HQ: type=%0</t>
<t id="1220">%0last load time</t>
<t id="1221">%0ignore collisions: %1</t>

<t id="1300">%0get missile flags of %1</t>
<t id="1320">%0player has police license for race %1</t>-->

<!--        

<t id="570">%1%0 move to position continue: x=%2 y=%3 z=%4 with precision %5 m</t>

<t id="1019">VARATION    %1%0 has a free ship dock port: ship subtype = %2</t>

<t id="1050">%0 = fixed sin %1</t>
<t id="1051">%0 = fixed cos %1</t>

<t id="1084">register quest script %0 instance multiple=%1</t>
<t id="1085">set quest state with message: quest=%0 state=%1 msg=%2</t>
<t id="1086">set quest/event %0 timer to %1ms</t>
<t id="1087">set quest %0 timeout to %1</t>
<t id="1088">%0 add event listener: quest/event=%1 objevent=%2 script=%3</t>
<t id="1089">%0 remove event listener: quest/event=%1</t>
<t id="1090">%0 display news article: page=%1 newsid=%2 occurrences=%3 maxoffertime=%4 maxtime=%5 placeholder:race1=%6 race2=%7 customarray=%8</t>
<t id="1091">change event news availibility: %0 race=%1 sector=%2 jumps=%3</t>
<t id="1094">%1%0 get current action</t>
<t id="1096">%0 disable ship rebuild</t>
<t id="1097">%1%0 turret %2 can use laser %3 </t>
<t id="1098">%0 set pirate cover state to %1</t>
<t id="1099">%1%0 scan potential pirate %2 for illegal wares</t>

<t id="1111">%1%0get merchants</t>
<t id="1112">remove merchant %0</t>
<t id="1113">merchant %0 got ware %1: quantity=%2</t>
<t id="1114">merchant %0 sold ware %1: quantity=%2</t>
<t id="1115">reset merchant %0 expiry</t>
<t id="1116">%0 get data for merchant %1: item number=%2 </t>
<t id="1120">%0 get random NPC</t>

<t id="1022">%1%0 can execute StartAction</t>
<t id="1023">%0 set StartAction enabled to %1</t>

<t id="1026">%0 set as player wingman: %1</t>
<t id="1027">%1%0 is player wingman</t>

<t id="1050">%0 = fixed sin %1</t>
<t id="1051">%0 = fixed cos %1</t>


<t id="1179">%1%0 get asteroid yield</t>
<t id="1180">$1 $0 get job leader</t>
<t id="1181">%1%0 get job idle rate</t>
<t id="1182">%1%0 get flight time</t>
<t id="1183">%1%0 get job jump range</t>
<t id="1184">%0start job</t>
<t id="1185">START %0 command %1 : arg1=%2, arg2=%3, arg3=%4, arg4=%5</t>
<t id="1186">%0connect wing command/signal %1 to script %2 with prio %3</t>
<t id="1187">%1%0 get true owner</t>
<t id="1188">%1%0 wait idle rate minimum:%2 ms</t>
<t id="1189">%1%0 fire laser of turret %2 ahead</t>
<t id="1190">%1%0 turn turret %2 to pos %3 relativ:%4 timeout:%5</t>
<t id="1191">%0reset flight time</t>
<t id="1192">%0auto sync patrol sector with environment: %1</t>
<t id="1193">%0add to patrol group for sector: %1</t>
<t id="1194">%0remove from patrol group for sector: %1</t>
<t id="1195">%0remove all patrol group references</t>

<t id="1208">%1%0 get intermediates buyable</t>
<t id="1209">%0set intermediates buyable to %1</t>
<t id="1210">%1%0 get intermediates sellable</t>
<t id="1211">%0set intermediates sellable to %1</t>


<t id="1215">%0send incoming message: text=%1 temporary=%2</t>
<t id="1216">%1%0 move to debris/asteroid %2 and turn turret %3 to target: timeout=%4</t>

<t id="1230">%0open custom menu: title=%1 description=%2 option array=%3</t>
<t id="1231">%1%0 create passenger in ship: name=%2 race=%3 voice=%4 face=%5</t>
<t id="1232">%1%0 add passenger to ship %2</t>
<t id="1233">VARIATION   %1%0 remove passenger %2</t>
<t id="1234">%1%0 get passenger array</t>

<t id="1235">VARIATION   %1%0 enslave passenger %2</t>
<t id="1236">VARIATION   %0create passenger: name=%1 race=%2 voice=%3 face=%4</t>
<t id="1237">VARIATION   %0release passenger</t>
<t id="1238">VARIATION   %1%0 create passenger from pilot: remove pilot from ship=%2</t>


<t id="1250">%1%0 get repair cost of ship %2</t>


 -->
</page>


  
  
  
  
  
  
  
  
  
  
  
  
  
<page id="352003" title="X3:Terran Conflict - Command Descriptions">

<!-- ********************************************************************************** -->
<!-- **********************************  X3:TC  ARRAYS    ********************************** -->
<!-- ********************************************************************************** -->
  

<!--$0 sort array $1-->
<t id="1375">Creates and returns a new ARRAY containing all of the elements in ARRAY $1 sorted in descending/alphabetical order.

{HEADING:Sorting}

If the ARRAY contains INTEGERS and STRINGS then the ARRAY is sorted into alphabetical order, which can lead to unexpected results: eg. 1, 12, 16, 2, 21, 28, 3, ...

{RELATED_SCRIPT_OBJECT_LIST:Data Types,Data Types}</t>
  
  
<!--<t id="1406">%0find %1 in array: %2</t>-->   <!--MISSED!-->

  
<!--$0 create new array, arguments=$1o, $2x, $3y, $4z, $5a-->
<t id="1415">Creates and returns a new ARRAY containing up to five values of any type.  Any trailing values of NULL or FALSE will generate a truncated ARRAY of less than five values.{CORRECTION:Jack08}{ABOUT_COPYING_ARRAYS}
The {COMMAND:create new array} command generates a distinct, independent copy of an ARRAY.

{RELATED_SCRIPT_OBJECT_LIST:Data Types,Data Types}</t>

  
<!--$0 sort array: data=$1x sort values=$2y-->
<t id="1417">Creates and returns a new ARRAY containing all of the elements in the ARRAY $1x sorted into an order determined by the contents of ARRAY $2y.  The order is determined by the results of sorting the ARRAY $2y into descending/alphabetical order.  This is commonly used to sort an ARRAY containing WARES or SECTORS, by using another ARRAY containing prices or {PROPERTY:jump distances}.

{HEADING:Sorting}

If the ARRAY contains INTEGERS and STRINGS then the ARRAY is sorted into alphabetical order, which can lead to unexpected results: eg. 1, 12, 16, 2, 21, 28, 3, ...

{HEADING:Information}

Both ARRAYS must have the same number of elements.

{RELATED_SCRIPT_OBJECT_LIST:Data Types,Data Types}</t>

  
<!--$0 reverse array $1-->
<t id="1443">Reverses the order of the elements in the ARRAY $1 and returns the reversed ARRAY $1.  This command reverses the elements within $1, it does not generate a copy of the ARRAY containing the elements in reverse order.</t>

  
<!--$1 $0 get object name array-->
<t id="1496">Creates and returns an ARRAY containing the IDs of the speech clips required to verbally describe an object to the player.

{HEADING:Information}

This command returns NULL if the object $0 is a DOCK, JUMPGATE or ASTEROID.

{RELATED_COMMAND:To use this ARRAY,speak array:,User Interface}</t>

  
<!--$0 arrays $1x and $2y are equal-->
<t id="1501">Compares the size and contents of two ARRAYS.  Returns TRUE if the elements in ARRAY $1x have the same value and order as the elements in $2y, otherwise it returns FALSE.</t>


<!-- ********************************************************************************** -->
<!-- ********************************** X3:TC MACROS ********************************** -->
<!-- ********************************************************************************** -->
  
<!--add custom menu item to array $0: page=$1x id=$2y returnvalue=$3-->
<t id="254">Reads a STRING with ID $2y from page $1x of a language file and adds it to the custom menu ARRAY $0 as a new item.

{ABOUT_MACROS}

{VARIABLE:$XStudio.Hidden} = {COMMAND:read text: page}=$1x {COMMAND:id}=$2y
{COMMAND:add custom menu item to array:} $0 {COMMAND:text}={VARIABLE:$XStudio.Hidden} {COMMAND:returnvalue}=$3 </t>


<!--add custom menu info line to array $0: page=$1x id=$2y-->
<t id="255">Reads a STRING with ID $2y from page $1x of a language file and adds it to the custom menu ARRAY $0 as a new info line.

{ABOUT_MACROS}

{VARIABLE:$XStudio.Hidden} = {COMMAND:read text: page}=$1x {COMMAND:id}=$2y
{COMMAND:add custom menu item to array:} $0 {COMMAND:text}={VARIABLE:$XStudio.Hidden}</t>


<!--add custom menu heading to array $0: page=$1x id=$2y-->
<t id="256">Reads a STRING with ID $2y from page $1x of a language file and adds it to the custom menu ARRAY $0 as a new heading.

{ABOUT_MACROS}

{VARIABLE:$XStudio.Hidden} = {COMMAND:read text: page}=$1x {COMMAND:id}=$2y
{COMMAND:add custom menu item to array:} $0 {COMMAND:text}={VARIABLE:$XStudio.Hidden}</t>



<!-- ********************************************************************************** -->
<!-- ********************************** X3:TC MATHS     ********************************** -->
<!-- ********************************************************************************** -->
  
<!--$0 get maximum, $1o, $2x, $3y, $4z, $5a-->
<t id="1457">Compares the INTEGERS $1o, $2x, $3y, $4z, $5a and returns whichever is the largest.

{RELATED_COMMAND:To determine the smallest of a set of INTEGERS,get minimum,Maths}</t>



<!-- ********************************************************************************** -->
<!-- ********************************** X3:TC MARINES   ********************************** -->
<!-- ********************************************************************************** -->
  

<!--$0 train passenger to marine-->
<t id="1419">Converts the PASSENGER $0 into a MARINE with randomly calculated {PROPERTY:boarding skills}.  The MARINE will have an {PROPERTY:overall skill} of less than 20, a {PROPERTY:fighting skill} of less than 40, and a {PROPERTY:mechanical skill}, {PROPERTY:hacking skill} and {PROPERTY:engineering skill} of less than 14.

{ABOUT_MARINE_SKILLS}

{RELATED_COMMAND_2:To change or retrieve individual skills,get marine skill,set marine skill,Marines}

{INLINE_RELATED_COMMAND:To retrieve the MARINE stored aboard a SHIP or STATION,get marines array,Marines}</t>

  
<!--$0 create marine from passenger: fighting=$1o hacking=$2x mechanical=$3y engineering=$4z-->
<t id="1420">Converts the PASSENGER $0 into a MARINE with a {PROPERTY:fighting skill} of $1o, a {PROPERTY:hacking skill} of $2x, a {PROPERTY:mechanical skill} of $3y and an {PROPERTY:engineering skill} of $4z.

{ABOUT_MARINE_SKILLS}

{RELATED_COMMAND:To retrieve the PASSENGERS aboard a SHIP,get passengers array,Passengers}

{INLINE_RELATED_COMMAND:To retrieve the MARINES stored aboard a SHIP or STATION,get marines array,Marines}</t>


<!--$0 set marine skill: fighting=$1-->
<t id="1421">Sets the {PROPERTY:fighting skill} of the MARINE $0 to $1.

{ABOUT_MARINE_SKILLS}

{RELATED_COMMAND:To retrieve the MARINES stored aboard a SHIP or STATION,get marines array,Marines}</t>


<!--$0 set marine skill: mechanical=$1-->
<t id="1422">Sets the {PROPERTY:mechanical skill} of the MARINE $0 to $1.

{ABOUT_MARINE_SKILLS}

{RELATED_COMMAND:To retrieve the MARINES stored aboard a SHIP or STATION,get marines array,Marines}</t>


<!--$0 set marine skill: hacking=$1-->
<t id="1423">Sets the {PROPERTY:hacking skill} of the MARINE $0 to $1.

{ABOUT_MARINE_SKILLS}

{RELATED_COMMAND:To retrieve the MARINES stored aboard a SHIP or STATION,get marines array,Marines}</t>


<!--$0 set marine skill: engineering=$1-->
<t id="1424">Sets the {PROPERTY:engineering skill} of the MARINE $0 to $1.

{ABOUT_MARINE_SKILLS}

{RELATED_COMMAND:To retrieve the MARINES stored aboard a SHIP or STATION,get marines array,Marines}</t>


<!--$1 $0 get maximum number of marines-->
<t id="1427">Returns the maximum number of MARINES that could be held on $0, if there were no MARINES or cargo aboard.

{ABOUT_MARINE_STORAGE}
{RELATED_COMMAND:To determine the number of MARINES that can fit in the available cargo space,free space for marines,Marines}</t>


<!--$0 is marine: passenger/astronaut=$1-->
<t id="1428">Returns TRUE if the PASSENGER or ASTRONAUT $1 is a MARINE.  Returns FALSE if $1 is not a MARINE, or $1 is not a PASSENGER or an ASTRONAUT.</t>


<!--$1 $0 send marines to board ship: $2 marines=$3-->
<t id="1430">{UNDOCUMENTED}</t>   


<!--$1 $0 get marines array-->
<t id="1433">Returns a new ARRAY containing the MARINES that are stored aboard the SHIP or STATION $0.

{ABOUT_MARINE_STORAGE}
{RELATED_COMMAND:To retrieve the MARINES attacking a SHIP,get incoming marines,Marines}</t>


<!--$1 $0 free space for marines-->
<t id="1434">Calculates the number of MARINES that can be added to the SHIP or STATION $0, given the free cargo space available.

{ABOUT_MARINE_STORAGE}
{RELATED_COMMAND:To determine the maximum number of MARINES that could fit without any cargo,get maximum number of marines,Marines}</t>

<!-- %1%0 get number of decks on ship -->
<t id="1437">Returns the {PROPERTY:number of decks} of the SHIP $0, which determines it`s capability to resist MARINES while fighting the crew.

{ABOUT_BOARDING_PROCEDURE}</t>


<!--$1 $0 get ship boarding defence level-->
<t id="1438">Returns the {PROPERTY:defence level} of the SHIP $0, which determines it`s capability to prevent MARINES from boarding or cutting through the hull.

{ABOUT_BOARDING_PROCEDURE}

{HEADING:See Also}

The defence level can be enhanced by the WARE {OBJECT:Hull Polarising Device}
The defence level can be reduced by the WARE {OBJECT:Boarding Pod}</t>


<!--$1 $0 get hacking security level-->
<t id="1439">Returns the {PROPERTY:security level} of the SHIP $0, which determines the capability of the crew to repel MARINES that have boarded the SHIP.

{ABOUT_BOARDING_PROCEDURE}

{HEADING:See Also}

The security level can be enhanced by the WARE {OBJECT:Internal Sentry Lasers}.</t>


<!--$1 $0 get number of marines can board-->
<t id="1440">Returns the maximum number of MARINES that can be used to board the SHIP $0 using the {COMMAND:add marine to attack group on ship} command.

{ABOUT_BOARDING_TARGETS}</t>


<!--$1 $0 get number of marines attacking-->
<t id="1441">Returns the number of MARINES that have boarded the SHIP $0 and are currently attacking the crew.  Returns 0 if the MARINES have not yet boarded the SHIP $0, or there are no MARINES attempting board.

{RELATED_COMMAND:To retrieve the MARINES attacking a SHIP,get incoming marines,Marines}</t>


<!--$1 $0 add marine $2 to attack group on ship-->
<t id="1442">Instantly transfers the MARINE, PASSENGER or ASTRONAUT $2 onto the SHIP $0 and commands him to begin attacking the crew of the SHIP $0.  This command can be used to silently add MARINES to SHIPS for use in scripts or quests.

{HEADING:Information}

Unlike normal boarding methods, this command also allows MARINES to board the {M8_OBJECT} class of SHIPS.

{ABOUT_BOARDING_PROCEDURE}

{ABOUT_BOARDING_TARGETS}</t>


<!--$1 $0 get marine buy price-->
<t id="1449">Returns the {PROPERTY:trading price} of the MARINE $0, in credits.  This is calculated from his {PROPERTY:boarding skills}, with higher skills resulting in a higher price.

{RELATED_COMMAND_2:To change or retrieve individual skills,get marine skill,set marine skill,Marines}</t>



<!--$1 $0 get incoming marines-->
<t id="1494">Returns a new ARRAY containing the MARINES that are currently attempting to board the SHIP $0.  If no MARINES are attempting to board the SHIP $0, or they are already aboard, it will return NULL.

{ABOUT_BOARDING_PROCEDURE}

{ABOUT_BOARDING_TARGETS}
{RELATED_COMMAND:To repel MARINES attempting to board a SHIP,stop incoming marines,Marines}</t>


<!--$0 stop incoming marines-->
<t id="1495">Commands the MARINES who are currently attempting to board the SHIP $0 to stop and fly back to their homeship.

{ABOUT_BOARDING_PROCEDURE}

{RELATED_COMMAND:To retrieve the MARINES attacking a SHIP,get incoming marines,Marines}</t>


<!--$1 $0 get marine fighting skill-->
<t id="1512">Returns the {PROPERTY:fighting skill} of the MARINE $0.

{ABOUT_MARINE_SKILLS}

{RELATED_COMMAND:To retrieve the MARINES stored aboard a SHIP or STATION,get marines array,Marines}</t>


<!--$1 $0 get marine mechanical skill-->
<t id="1513">Returns the {PROPERTY:mechanical skill} of the MARINE $0.

{ABOUT_MARINE_SKILLS}

{RELATED_COMMAND:To retrieve the MARINES stored aboard a SHIP or STATION,get marines array,Marines}</t>


<!--$1 $0 get marine hacking skill-->
<t id="1514">Returns the {PROPERTY:hacking skill} of the MARINE $0.

{ABOUT_MARINE_SKILLS}

{RELATED_COMMAND:To retrieve the MARINES stored aboard a SHIP or STATION,get marines array,Marines}</t>


<!--$1 $0 get marine engineering skill-->
<t id="1515">Returns the {PROPERTY:engineering skill} of the MARINE $0.

{ABOUT_MARINE_SKILLS}

{RELATED_COMMAND:To retrieve the MARINES stored aboard a SHIP or STATION,get marines array,Marines}</t>


<!--$1 $0 get marine overall skill-->
<t id="1516">Returns the average of the four {PROPERTY:boarding skills} of the MARINE $0.

{ABOUT_MARINE_SKILLS}

{RELATED_COMMAND:To retrieve the MARINES stored aboard a SHIP or STATION,get marines array,Marines}</t>


<!--$1 $0 move marine to board: $2, timeout=$3-->
<t id="1528">{UNDOCUMENTED}</t>  



<!-- ********************************************************************************** -->
<!-- ********************************** X3:TC OBJECT ACTIONS *********************** -->
<!-- ********************************************************************************** -->

<!-- %0destroy object: killer=%1, show no explosion=%2 -->
<t id="1341">Destroys the OBJ $0.  If $2 is FALSE and the OBJ is in the same SECTOR as the player then an explosion is shown, otherwise it is not.

The OBJ $1 is registered as responsible for the destruction.

{HEADING:Information}

Destroying an OBJ without an explosion is used for destroying {TERMINOLOGY:OOS} \(Out-of-Sector\) OBJS.</t>


<!-- %0jump out of existence -->
<t id="1370">Destroys the SHIP $0 with the illusion that it jumped away.</t>


<!-- ********************************************************************************** -->
<!-- ********************************** X3:TC OBJECT PROPERTIES *********************** -->
<!-- ********************************************************************************** -->

<!-- VARIATION   %1%0 is in active sector -->
<t id="761">Returns TRUE if the OBJ $0 is within the same SECTOR as the player, and FALSE otherwise.

{COMPATIBILITY_2:X3TC,X3AP}</t>


<!-- %1%0 is in freight scanning range: ship=%2 -->
<t id="1345">Returns TRUE if the OBJ $0 is close enough to use a {OBJECT:Freight Scanner} on the SHIP $2, and FALSE otherwise.</t>


<!-- %1%0 is in transporter range: ship=%2 -->
<t id="1346">Returns TRUE if the OBJ $0 is close enough to use a {OBJECT:Transporter} on the SHIP $2, and FALSE otherwise.</t>


<!-- %1%0 is in mineral scanner range: asteroid=%2 -->
<t id="1347">Returns TRUE if the OBJ $0 is close enough to use a {OBJECT:Mineral Scanner} on the ASTEROID $2, and FALSE otherwise.</t>


<!-- %1%0 get maker race -->
<t id="1350">Returns the RACE which {PROPERTY:manufactured} the OBJ $0.</t>


<!-- %1%0 get notoriety title to race %2: text=%3 -->
<t id="1472">Returns the title or index of the {PROPERTY:notoriety rank} between the OBJ $0 and the RACE or CORPORATION $2, as a STRING if $3 is TRUE or an INTEGER if $3 is FALSE.

{ABOUT_NOTORIETY}</t>


<!-- %1%0 get notority percentage to race %2 -->
<t id="1473">Returns the progress of the OBJ $0 towards their next {PROPERTY:notoriety rank} with the RACE or CORPORATION $2, as a percentage.

{ABOUT_NOTORIETY}</t>


<!--%1%0 get debris count-->
<t id="1486">Returns the quantity of {TYPE:collectable rocks} within the {TYPE:debris} $0.</t>		

<!-- ********************************************************************************** -->
<!-- ********************************** X3:TC PLAYER ********************************** -->
<!-- ********************************************************************************** -->

<!-- %0get trade rank title: text=%1 -->
<t id="1468">Returns the title or index of the player`s {PROPERTY:trade rank}, as a STRING if $1 is TRUE or an INTEGER if $1 is FALSE.

{ABOUT_NOTORIETY}</t>

<!-- %0get fight rank title: text=%1 -->
<t id="1469">Returns the title or index of the player`s {PROPERTY:fight rank}, as a STRING if $1 is TRUE or an INTEGER if $1 is FALSE.

{ABOUT_NOTORIETY}</t>

<!-- %0get trade rank percentage -->
<t id="1470">Returns the player`s progress towards their next {PROPERTY:trade rank} as a percentage.

{ABOUT_NOTORIETY}</t>

<!-- %0get fight rank precentage -->
<t id="1471">Returns the player`s progress towards their next {PROPERTY:fight rank} as a percentage.

{ABOUT_NOTORIETY}</t>


<!-- %0get mission rank: name=%1 -->
<t id="1492">Returns the index of the player`s {PROPERTY:notoriety rank} with the CORPORATION $1.

The CORPORATION must be specified with a STRING `L2Corpn00` where 0 &lt; n &lt; 9.

{ABOUT_NOTORIETY}</t>

<!-- set mission rank: name=%0 rank=%1 -->
<t id="1493">Sets the index of the player`s {PROPERTY:notoriety rank} with the CORPORATION $0 to the INTEGER $1.

The CORPORATION must be specified with a STRING `L2Corpn00` where 0 &lt; n &lt; 9.

{ABOUT_NOTORIETY}

{HEADING:Warning}

The player must have already completed at least one mission with the CORPORATION $0 before this command will function correctly.</t>


<!-- %0is player warping -->
<t id="1519">Returns TRUE if the player is in hyperspace and FALSE otherwise.</t>


<!-- ********************************************************************************** -->
<!-- ********************************** x3:TC PILOTS **************************** -->
<!-- ********************************************************************************** -->

<!-- %1%0 pilot eject from ship -->
<t id="1245">Commands the PILOT to eject from the SHIP $0, causing the SHIP $0 to become {PROPERTY:neutral}.</t>


<!-- %1%0 move pilot to ship %2: disable=%3 -->
<t id="1246">{UNDOCUMENTED}</t>


<!-- ********************************************************************************** -->
<!-- ********************************** X3:TC SHIP PROPERTIES ************************* -->
<!-- ********************************************************************************** -->
  
<!-- %0set ship speed to %1 -->
<t id="1332">Sets the {PROPERTY:speed} of the SHIP $0 to $1 {UNITS:m/s}.</t>


<!-- %0set laser energy to %1 -->
<t id="1333">Sets the {PROPERTY:laser energy} of TURRET 0 of the OBJ $0 to $1 {UNITS:joules}.</t>
  

<!-- %0get freight scanner range -->
<t id="1342">Returns the range of the {OBJECT:Freight Scanner} in {UNITS:meters}.</t>


<!-- %0get transporter range -->
<t id="1343">Returns the range of the {OBJECT:Transporter} in {UNITS:meters}.</t>


<!-- %0get mineral scanner range -->
<t id="1344">Returns the range of the {OBJECT:Mineral Scanner} in {UNITS:meters}.</t>


<!-- %0get maker race: shiptype=%1 -->
<t id="1349">Returns the RACE which {PROPERTY:manufactures} the SHIP $1.</t>


<!-- %1%0 is civilian ship -->
<t id="1353">Returns TRUE if the SHIP $0 is a {PROPERTY:civilian} ship and FALSE otherwise.</t>


<!--$1 $0 can launch marines-->
<t id="1431">Returns TRUE if the SHIP $0 can launch MARINES without a {OBJECT:Boarding Pod}, otherwise it returns FALSE.

{HEADING:Information}

Only the following classes of SHIP are capable of launching MARINES without a {OBJECT:Boarding Pod}:
[center]{M6_CLASS}\t{TP_CLASS}[/center]</t>


<!--$1 $0 is ship boardable-->
<t id="1432">Returns TRUE if the SHIP $0 can be boarded by MARINES, otherwise it returns FALSE.

{ABOUT_BOARDING_TARGETS}</t>

<!-- %1%0 get ship variation -->
<t id="1475">Returns the {PROPERTY:variation} of a SHIP $0.  eg. Raider, Sentinel, Vanguard.

Matching titles can be found in page 17, starting with string ID 10,000.</t>


<!-- %0get ship variation: subtype=%1 -->
<t id="1476">Returns the {PROPERTY:variation} of a SHIP of OBJTYPE $1.  eg. Raider, Sentinel, Vanguard.

Matching titles can be found in page 17, starting with string ID 10,000.</t>


<!-- %1%0 is missile boat -->
<t id="1482">{UNDOCUMENTED}</t>


<!-- %1%0 is invincible -->
<t id="1498">Returns TRUE if the OBJ $0 is {PROPERTY:invincible} and FALSE otherwise.

This property can only be set using a {MD} script.</t>


<!-- %1%0 get desired speed -->
<t id="1525">{UNDOCUMENTED}</t>


<!-- %0set desired speed: %1 -->
<t id="1526">{UNDOCUMENTED}</t>

<!-- ********************************************************************************** -->
<!-- ******************************** X3:TC STATION TRADING**************************** -->
<!-- ********************************************************************************** -->


<!--VANILLA:  VARIATION:  $0 find station: product $1 with best price:  max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6, exclude array=$7-->
<!--XSTUDIO:  VARIATION:  $0 find factory: sells $1 with best price:  max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6, exclude array=$7-->
<t id="606">Finds and returns the FACTORY selling the WARE $1 at the lowest price.  {SEARCH_RANGE:FACTORY,4z,5}

{SEARCH_SYNTAX:FACTORY}

{HEADING:Optional Parameters}

{SEARCH_BY_MAXIMUM_PRICE:FACTORIES,2x}
{SEARCH_BY_QUANITY_SELL:FACTORIES,3y}
{SEARCH_EXCLUDE_ARRAY:FACTORIES,7}
{SEARCH_BY_TRADER:FACTORIES,6}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X3TC,X3AP}

{COMMAND_NAME_CHANGED:find station: product ... with best price}</t>	


<!--VANILLA:  VARIATION:  $1 $0 find station: product $2 with best price:  max.price=$3x, amount=$4y, max.jumps=$5z, startsector=$6, trader=$7, exclude array=$8-->
<!--XSTUDIO:  VARIATION:  $1 $0 find different factory: sells $2 with best price:  max.price=$3x, amount=$4y, max.jumps=$5z, startsector=$6, trader=$7, exclude array=$8-->
<t id="1002">Finds and returns the FACTORY selling the WARE $2 at the lowest price, that isn`t the FACTORY $0.  {SEARCH_RANGE:FACTORY,5z,6}  {SEARCH_RANGE_DIFFERENT:6,0}

{SEARCH_SYNTAX:FACTORY}

{HEADING:Optional Parameters}

{SEARCH_BY_MAXIMUM_PRICE:FACTORIES,3x}
{SEARCH_BY_QUANITY_SELL:FACTORIES,4y}
{SEARCH_EXCLUDE_ARRAY:FACTORIES,8}
{SEARCH_BY_TRADER:FACTORIES,7}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X3TC,X3AP}

{COMMAND_NAME_CHANGED:find station: product ... with best price}</t>	



<!--VANILLA:  VARIATION:  $0 find station: product $1 with min. jumps:  max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6, exclude array=$7-->
<!--XSTUDIO:  VARIATION:  $0 find factory: sells $1 with min. jumps:  max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6, exclude array=$7-->
<t id="607">Finds and returns the nearest FACTORY selling the WARE $1.  {SEARCH_RANGE:FACTORY,4z,5}

{SEARCH_SYNTAX:FACTORY}

{HEADING:Optional Parameters}

{SEARCH_BY_MAXIMUM_PRICE:FACTORIES,2x}
{SEARCH_BY_QUANITY_SELL:FACTORIES,3y}
{SEARCH_EXCLUDE_ARRAY:FACTORIES,7}
{SEARCH_BY_TRADER:FACTORIES,6}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X3TC,X3AP}

{COMMAND_NAME_CHANGED:find station: product ... with min. jumps}</t>	



<!--VANILLA:  VARIATION:  $1 $0 find station: product $2 with min. jumps:  max.price=$3x, amount=$4y, max.jumps=$5z, startsector=$6, trader=$7, exclude array=$8-->
<!--XSTUDIO:  VARIATION:  $1 $0 find different factory: sells $2 with min. jumps:  max.price=$3x, amount=$4y, max.jumps=$5z, startsector=$6, trader=$7, exclude array=$8-->
<t id="1003">Finds and returns the nearest FACTORY selling the WARE $2, that isn`t the FACTORY $0.  {SEARCH_RANGE:FACTORY,5z,6}  {SEARCH_RANGE_DIFFERENT:6,0}

{SEARCH_SYNTAX:FACTORY}

{HEADING:Optional Parameters}

{SEARCH_BY_MAXIMUM_PRICE:FACTORIES,3x}
{SEARCH_BY_QUANITY_SELL:FACTORIES,4y}
{SEARCH_EXCLUDE_ARRAY:FACTORIES,8}
{SEARCH_BY_TRADER:FACTORIES,7}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X3TC,X3AP}

{COMMAND_NAME_CHANGED:find station: product ... with min. jumps}</t>	



<!--VANILLA:  VARIATION:  $0 find station: resource $1 with best price: min.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6, exclude array=$7-->
<!--XSTUDIO:  VARIATION:  $0 find factory: buys $1 with best price: min.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6, exclude array=$7-->
<t id="608">Finds and returns the FACTORY willing to buy the WARE $1 for the highest price.  {SEARCH_RANGE:FACTORY,4z,5}

{SEARCH_SYNTAX:FACTORY}

{HEADING:Optional Parameters}

{SEARCH_BY_MINIMUM_PRICE:FACTORIES,2x}
{SEARCH_BY_QUANITY_BUY:FACTORIES,3y}
{SEARCH_EXCLUDE_ARRAY:FACTORIES,7}
{SEARCH_BY_TRADER:FACTORIES,6}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X3TC,X3AP}

{COMMAND_NAME_CHANGED:find station: resource ... with best price}</t>	


<!--VANILLA:  VARIATION:  $1 $0 find station: resource $2 with best price: min.price=$3x, amount=$4y, max.jumps=$5z, startsector=$6, trader=$7, exclude array=$8-->
<!--XSTUDIO:  VARIATION:  $1 $0 find different factory: buys $2 with best price: min.price=$3x, amount=$4y, max.jumps=$5z, startsector=$6, trader=$7, exclude array=$8-->
<t id="1004">Finds and returns the FACTORY willing to buy the WARE $2 for the highest price, that isn`t the FACTORY $0.  {SEARCH_RANGE:FACTORY,5z,6}  {SEARCH_RANGE_DIFFERENT:6,0}

{SEARCH_SYNTAX:FACTORY}

{HEADING:Optional Parameters}

{SEARCH_BY_MINIMUM_PRICE:FACTORIES,3x}
{SEARCH_BY_QUANITY_BUY:FACTORIES,4y}
{SEARCH_EXCLUDE_ARRAY:FACTORIES,8}
{SEARCH_BY_TRADER:FACTORIES,7}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X3TC,X3AP}

{COMMAND_NAME_CHANGED:find station: resource ... with best price}</t>	


<!--VANILLA:  VARIATION:  $0 find station: resource $1 with min. jumps: min.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6, exclude array=$7-->
<!--XSTUDIO:  VARIATION:  $0 find factory: buys $1 with min. jumps: min.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6, exclude array=$7-->
<t id="609">Finds and returns the nearest FACTORY willing to buy the WARE $1.  {SEARCH_RANGE:FACTORY,4z,5}

{SEARCH_SYNTAX:FACTORY}

{HEADING:Optional Parameters}

{SEARCH_BY_MINIMUM_PRICE:FACTORIES,2x}
{SEARCH_BY_QUANITY_BUY:FACTORIES,3y}
{SEARCH_EXCLUDE_ARRAY:FACTORIES,7}
{SEARCH_BY_TRADER:FACTORIES,6}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X3TC,X3AP}

{COMMAND_NAME_CHANGED:find station: resource ... with min. jumps}</t>	


<!--VANILLA:  VARIATION:  $1 $0 find station: resource $2 with min. jumps: min.price=$3x, amount=$4y, max.jumps=$5z, startsector=$6, trader=$7, exclude array=$8-->
<!--XSTUDIO:  VARIATION:  $1 $0 find different factory: buys $2 with min. jumps: min.price=$3x, amount=$4y, max.jumps=$5z, startsector=$6, trader=$7, exclude array=$8-->
<t id="1005">Finds and returns the nearest FACTORY willing to buy the WARE $2, that isn`t the FACTORY $0.  {SEARCH_RANGE:FACTORY,5z,6}  {SEARCH_RANGE_DIFFERENT:6,0}

{SEARCH_SYNTAX:FACTORY}

{HEADING:Optional Parameters}

{SEARCH_BY_MINIMUM_PRICE:FACTORIES,3x}
{SEARCH_BY_QUANITY_BUY:FACTORIES,4y}
{SEARCH_EXCLUDE_ARRAY:FACTORIES,8}
{SEARCH_BY_TRADER:FACTORIES,7}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X3TC,X3AP}

{COMMAND_NAME_CHANGED:find station: resource ... with min. jumps}</t>	


<!--VANILLA:  VARIATION:  $0 find station sells: resource $1 with best price: max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6, exclude array=$7-->
<!--XSTUDIO:  VARIATION:  $0 find dock: sells: $1 with best price: max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6, exclude array=$7-->
<t id="663">Finds and returns the DOCK selling the WARE $1 at the lowest price.  {SEARCH_RANGE:DOCK,4z,5}

{SEARCH_SYNTAX:DOCK}

{HEADING:Optional Parameters}

{SEARCH_BY_MAXIMUM_PRICE:DOCKS,2x}
{SEARCH_BY_QUANITY_SELL:DOCKS,3y}
{SEARCH_EXCLUDE_ARRAY:DOCKS,7}
{SEARCH_BY_TRADER:DOCKS,6}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X3TC,X3AP}

{COMMAND_NAME_CHANGED:find station sells: resource ... with best price}</t>	


<!--VANILLA:  VARIATION:  $1 $0 find other station sells: resource $2 with best price: max.price=$3x, amount=$4y, max.jumps=$5z, startsector=$6, trader=$7, exclude array=$8-->
<!--XSTUDIO:  VARIATION:  $1 $0 find different dock: sells $2 with best price: max.price=$3x, amount=$4y, max.jumps=$5z, startsector=$6, trader=$7, exclude array=$8-->
<t id="1006">Finds and returns the DOCK selling the WARE $2 at the lowest price, that isn`t the DOCK $0.  {SEARCH_RANGE:DOCK,5z,6}  {SEARCH_RANGE_DIFFERENT:6,0}

{SEARCH_SYNTAX:DOCK}

{HEADING:Optional Parameters}

{SEARCH_BY_MAXIMUM_PRICE:DOCKS,3x}
{SEARCH_BY_QUANITY_SELL:DOCKS,4y}
{SEARCH_EXCLUDE_ARRAY:DOCKS,8}
{SEARCH_BY_TRADER:DOCKS,7}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X3TC,X3AP}

{COMMAND_NAME_CHANGED:find station sells: resource ... with best price}</t>	


<!--VANILLA:  VARIATION:  $0 find station sells: resource $1 with min. jumps: max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6, exclude array=$7-->
<!--XSTUDIO:  VARIATION:  $0 find dock: sells $1 with min. jumps: max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6, exclude array=$7-->
<t id="664">Finds and returns the nearest DOCK selling the WARE $1.  {SEARCH_RANGE:DOCK,4z,5}

{SEARCH_SYNTAX:DOCK}

{HEADING:Optional Parameters}

{SEARCH_BY_MAXIMUM_PRICE:DOCKS,2x}
{SEARCH_BY_QUANITY_SELL:DOCKS,3y}
{SEARCH_EXCLUDE_ARRAY:DOCKS,7}
{SEARCH_BY_TRADER:DOCKS,6}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X3TC,X3AP}

{COMMAND_NAME_CHANGED:find station sells: resource ... with min. jumps}</t>	


<!--VANILLA:  VARIATION:  $1 $0 find station sells: resource $2 with min. jumps: max.price=$3x, amount=$4y, max.jumps=$5z, startsector=$6, trader=$7, exclude array=$8-->
<!--XSTUDIO:  VARIATION:  $1 $0 find different dock: sells $2 with min. jumps: max.price=$3x, amount=$4y, max.jumps=$5z, startsector=$6, trader=$7, exclude array=$8-->
<t id="1007">Finds and returns the nearest DOCK selling the WARE $2, that isn`t the DOCK $0.  {SEARCH_RANGE:DOCK,5z,6}  {SEARCH_RANGE_DIFFERENT:6,0}

{SEARCH_SYNTAX:DOCK}

{HEADING:Optional Parameters}

{SEARCH_BY_MAXIMUM_PRICE:DOCKS,3x}
{SEARCH_BY_QUANITY_SELL:DOCKS,4y}
{SEARCH_EXCLUDE_ARRAY:DOCKS,8}
{SEARCH_BY_TRADER:DOCKS,7}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X3TC,X3AP}

{COMMAND_NAME_CHANGED:find station sells: resource ... with min. jumps}</t>	


<!--VANILLA:  VARIATION   $0 find station: product $1 with best price depend on jumps:  max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6, exclude array=$7-->
<!--XSTUDIO:  VARIATION   $0 find factory: sells $1 with best chance:  max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6, exclude array=$7-->
<t id="1169">Finds and returns the FACTORY with the best combination of low {PROPERTY:ware price} and low {PROPERTY:jump distance} that is selling the WARE $1.  {SEARCH_RANGE:FACTORY,4z,5}

{SEARCH_SYNTAX:FACTORY}

{HEADING:Optional Parameters}

{SEARCH_BY_MAXIMUM_PRICE:FACTORIES,2x}
{SEARCH_BY_QUANITY_SELL:FACTORIES,3y}
{SEARCH_EXCLUDE_ARRAY:FACTORIES,7}
{SEARCH_BY_TRADER:FACTORIES,6}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X3TC,X3AP}

{COMMAND_NAME_CHANGED:find station: product ... with best price depend on jumps}</t>	


<!--VANILLA:  VARIATION   $0 find station: resource $1 with best price depend on jumps: min.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6, exclude array=$7-->
<!--XSTUDIO:  VARIATION   $0 find factory: buys $1 with best chance: min.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6, exclude array=$7-->
<t id="1170">Finds and returns the FACTORY with the best combination of high {PROPERTY:ware price} and low {PROPERTY:jump distance} that is willing to buy the WARE $1.  {SEARCH_RANGE:FACTORY,4z,5}

{SEARCH_SYNTAX:FACTORY}

{HEADING:Optional Parameters}

{SEARCH_BY_MINIMUM_PRICE:FACTORIES,2x}
{SEARCH_BY_QUANITY_BUY:FACTORIES,3y}
{SEARCH_EXCLUDE_ARRAY:FACTORIES,7}
{SEARCH_BY_TRADER:FACTORIES,6}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X3TC,X3AP}

{COMMAND_NAME_CHANGED:find station: resource ... with best price depend on jumps}</t>	


<!--VANILLA:  VARIATION   $0 find station sells: resource $1 with best price depend on jumps: max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6, exclude array=$7-->
<!--XSTUDIO:  VARIATION   $0 find dock: sells $1 with best chance: max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6, exclude array=$7-->
<t id="1171">Finds and returns the DOCK with the best combination of low {PROPERTY:ware price} and low {PROPERTY:jump distance} that is selling the WARE $1.  {SEARCH_RANGE:DOCK,4z,5}

{SEARCH_SYNTAX:DOCK}

{HEADING:Optional Parameters}

{SEARCH_BY_MAXIMUM_PRICE:DOCKS,2x}
{SEARCH_BY_QUANITY_SELL:DOCKS,3y}
{SEARCH_EXCLUDE_ARRAY:DOCKS,7}
{SEARCH_BY_TRADER:FACTORIES,6}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X3TC,X3AP}

{COMMAND_NAME_CHANGED:find station sells: resource ... with best price depend on jumps}</t>	


<!--VANILLA:  VARIATION   $0 find station: product $1 with best price random:  max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6, exclude array=$7-->
<!--XSTUDIO:  VARIATION   $0 find random factory: sells $1 with best price:  max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$, exclude array=$76-->
<t id="1176">Finds and returns a random FACTORY with the best combination of low {PROPERTY:ware price} and low {PROPERTY:jump distance} that is selling the WARE $1.  {SEARCH_RANGE:FACTORY,4z,5}

{SEARCH_SYNTAX:FACTORY}

{UNDOCUMENTED}

{HEADING:Optional Parameters}

{SEARCH_BY_MAXIMUM_PRICE:FACTORIES,2x}
{SEARCH_BY_QUANITY_SELL:FACTORIES,3y}
{SEARCH_EXCLUDE_ARRAY:FACTORIES,7}
{SEARCH_BY_TRADER:FACTORIES,6}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X3TC,X3AP}

{COMMAND_NAME_CHANGED:find station: product ... with best price random}</t>	


<!--VANILLA:  VARIATION   $0 find station: resource $1 with best price random: min.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6, exclude array=$7-->
<!--XSTUDIO:  VARIATION   $0 find random factory: buys $1 with best price: min.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6, exclude array=$7-->
<t id="1177">Finds and returns a random FACTORY with the best combination of high {PROPERTY:ware price} and low {PROPERTY:jump distance} that is willing to buy the WARE $1.  {SEARCH_RANGE:FACTORY,4z,5}

{SEARCH_SYNTAX:FACTORY}

{UNDOCUMENTED}

{HEADING:Optional Parameters}

{SEARCH_BY_MINIMUM_PRICE:FACTORIES,2x}
{SEARCH_BY_QUANITY_BUY:FACTORIES,3y}
{SEARCH_EXCLUDE_ARRAY:FACTORIES,7}
{SEARCH_BY_TRADER:FACTORIES,6}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X3TC,X3AP}

{COMMAND_NAME_CHANGED:find station: resource ... with best price random}</t>	


<!--VANILLA:  VARIATION   $0 find station sells: resource $1 with best price random: max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6, exclude array=$7-->
<!--XSTUDIO:  VARIATION   $0 find random dock: sells $1 with best price: max.price=$2x, amount=$3y, max.jumps=$4z, startsector=$5, trader=$6, exclude array=$7-->
<t id="1178">Finds and returns a random DOCK with the best combination of low {PROPERTY:ware price} and low {PROPERTY:jump distance} that is selling the WARE $1.  {SEARCH_RANGE:DOCK,4z,5}

{SEARCH_SYNTAX:DOCK}

{UNDOCUMENTED}

{HEADING:Optional Parameters}

{SEARCH_BY_MAXIMUM_PRICE:DOCKS,2x}
{SEARCH_BY_QUANITY_SELL:DOCKS,3y}
{SEARCH_EXCLUDE_ARRAY:DOCKS,7}
{SEARCH_BY_TRADER:DOCKS,6}{CORRECTION:Jack08}{HEADING:Information}

{ABOUT_JUMP_DISTANCES}

{COMPATIBILITY_2:X3TC,X3AP}

{COMMAND_NAME_CHANGED:find station sells: resource ... with best price random}</t>	



<!-- ********************************************************************************** -->
<!-- ********************************** X3:TC  STRINGS  ********************************** -->
<!-- ********************************************************************************** -->
  

<!--$0 read text: page id=$1x, from $2y to $3z to array, include empty=$4a-->
<t id="1337">Creates and returns an ARRAY containing a series of STRINGS read from a language strings file.  The ARRAY contains the STRINGS under page $1x with ID $2y, $3z and all those in between.  If $4a is TRUE then empty STRINGS are also returned, whereas if $4a is FALSE then these STRINGS are ignored.

{HEADING:Information}

{LOADTEXT_REQUIREMENT}

{RELATED_COMMAND:To load a custom language strings file,load text:,Strings}</t>

  
<!--$0 read text: page id=$1, id=$2 exists-->
<t id="1338">Determines whether a STRING in a language strings file is present.  Returns TRUE if the STRING exists and has been loaded using the {COMMAND:load text:} command, otherwise it returns FALSE.  This command will also return FALSE if the STRING contains formatting errors or is unavailable in the user`s current language.

{RELATED_COMMAND:To load a custom language strings file,load text:,Strings}</t>


<!--$0 convert number $1 to string-->
<t id="1474">Returns a new STRING containing the STRING representation of the INTEGER $1.

{RELATED_COMMAND:To convert a STRING containing numbers into an INTEGER,string to integer,Strings}</t>


<!--$0 format time: $1-->
<t id="1477">Returns a new STRING containing an amount of seconds $1, formatted into a `time elapsed` STRING, as shown below.

{HEADING:Format}

The format of a time elapsed STRING is:    \[d\] hh:mm:ss

d = days \(This is only displayed when required\)
h = hours
m = minutes
s = seconds

{HEADING:Information}

This can be used to display the length of time elapsed since an action took place. eg. the player started a quest, or opened a new factory.

{RELATED_COMMAND_2:To determine how long the user has been playing,playing time,last load time,System Property}</t>


<!--$0 match regular expression: $1x to string $2y-->
<t id="1478">Returns TRUE if the STRING $2y matches the regular expression in the STRING $1x, otherwise it returns FALSE.  See the following section for a list of regular expression operators that are supported by this command.

{HEADING:Regular Expression Formatting}

? - Any single character
b+ - One of more of the character `b`
b* - Zero or more of the character `b`
bear|panda - The word `bear` or the word `panda`

{HEADING:Example}

250* - Matches 25, 250, 2500, 25000 etc. but not 26 or 24.
2?0+ - Matches 210, 220, 230, 240, ..., 2100, 2200, 2300, but not 21, 22, 23, etc.</t>


<!--$0 get text id: ware=$1-->
<t id="1497">Returns the STRING ID of the language strings file entry that contains the name of the WARE $1.

{HEADING:Information}

The STRING ID of the description of any WARE is always the STRING ID of the name plus one.</t>


<!--$0 get string font length: $1-->
<t id="1524">Returns the width in {UNITS:pixels} of the STRING $1 when it is displayed on screen.

{HEADING:Information}

This command is useful for creating custom menus

{RELATED_COMMAND_LIST:custom menu,User Interface}</t>


<!-- ********************************************************************************** -->
<!-- ********************************** X3:TC UNIVERSE DATA ********************************* -->
<!-- ********************************************************************************** -->
  
<!--%1%0 is core sector-->
<t id="1331">Returns TRUE if the SECTOR $0 is a {PROPERTY:core sector}, and FALSE if $0 is a {PROPERTY:border sector} or an {PROPERTY:unknown sector}.

{ABOUT_SECTOR_SECURITY}</t>  


<!--$0 find gate: flags=$1x, refobj=$2, max dist=$3y, refpos=$4-->
<t id="1336">Finds and returns JUMPGATES within the SECTOR containing the OBJ $2 or the {PROPERTY:position} $4.  {SEARCH_SYNTAX:JUMPGATES}

{HEADING:Optional Parameters}

{SEARCH_BY_FLAGS:JUMPGATES,1x}

{HEADING:Search Flags}

{FLAG_NEAREST_2:JUMPGATE,2,4}
{FLAG_RANDOM:JUMPGATE}
{FLAG_VISIBLE:JUMPGATES,2}
{FLAG_KNOWN:JUMPGATES}
{CONSTANT:\[Find.Expand\]} - Search adjacent SECTORS until a JUMPGATE is found
{FLAG_MULTIPLE_UNLIMITED:JUMPGATES}
{CONSTANT:\[Find.JumpableGate\]} - Do not return {OBJECT:Transorbital Accelerators}

{HEADING:Unsupported Search Flags}

{CONSTANT:\[Find.ExactJumps\]} - This command only searches the SECTOR containing the OBJ $2 or the {PROPERTY:position} $4
{FLAG_NO_RELATIONS:JUMPGATES}
{FLAGS_MUTUTALLY_EXCLUSIVE_2:Nearest,Random}

{HEADING:Information}

{FLAGS_DEPENDENCY:Expand,Nearest}

{FLAGS_COMBINING:Random,Visible}

{FLAGS_MULTIPLE_NEAREST}

{FLAGS_REFERENCE_REQUIREMENT:2,4}</t>	


<!--%0get ship type array: maker race=%1 class=%2-->
<t id="1372">Returns a new ARRAY containing all the SHIPS with the OBJCLASS $2 which are MANUFACTUREDBY the RACE $0.  If $2 is NULL then SHIPS of any OBJCLASS are returned.

{RELATED_COMMAND:To retrieve all the SHIPS OWNEDBY a RACE,get ship array: of race,Universe Data}</t>		


<!--$1 $0 realign gate: gatenum=$2 gate to link=$3 force=$4-->
<t id="1453">{UNDOCUMENTED}

{HEADING:Best Guess}

Sets the destination of the JUMPGATE with {PROPERTY:jump gate ID} $2 in the SECTOR $0 to the JUMPGATE $3.  Setting $4 to TRUE must force the connection to be created in a circumstance where it was ordinarily fail, perhaps if the SECTORS are not adjacent?</t>		


<!--%0change destination gate to %1-->
<t id="1458">Sets the destination of the JUMPGATE $0 to the JUMPGATE $1.</t>		


<!--%0get station array: product=%1 include empty=%2-->
<t id="1459">Returns a new ARRAY containing all the FACTORIES that sell the WARE $1.

{HEADING:Information}

If $2 is FALSE then only FACTORIES that have the WARE in {PROPERTY:stock} are returned, if $2 is TRUE then all FACTORIES that sell the WARE $1 are returned.

This command does not work on DOCKS.</t>		


<!--%0get station array: resource=%1 include empty=%2-->
<t id="1460">Returns a new ARRAY containing all the STATIONS that trade the WARE $1 as a {PROPERTY:primary resource} or {PROPERTY:secondary resource}.

{HEADING:Information}

If $2 is FALSE then only STATIONS that have the WARE in {PROPERTY:stock} are returned, if $2 is TRUE then all STATIONS that sell the WARE $1 are returned.

The WARES traded by DOCKS are classed as resources, so this command can be used on DOCKS and FACTORIES, unlike {COMMAND:get station array: product} which only works on FACTORIES.</t>		


<!--$0 set sector to core security $1-->
<t id="1461">Changes the SECTOR $0 to a {PROPERTY:core sector} if $1 is TRUE, or to a {PROPERTY:border sector} if $1 is FALSE.

{ABOUT_SECTOR_SECURITY}

{RELATED_COMMAND:To determine the SECURITY of a SECTOR,is core sector,Universe Data}</t>		


<!--$1 $0 find nearest military outpost-->
<t id="1505">Returns the closest {OBJECT:Military Outpost} to the object $0 that is OWNEDBY the RACE of $0.

{HEADING:Information}

If $0 is {PROPERTY:player owned} this command will always return NULL.</t>


<!--%1%0 get planet array-->
<t id="1485">Returns a new ARRAY containing all the {TYPE:planets} within the SECTOR $0.

{HEADING:Information}

This includes all moons and smaller {TYPE:planets}.</t>		


<!--%1%0 get all stationary objects: include asteroids=%2-->
<t id="1504">Returns a new ARRAY containing all the {TYPE:mines}, {TYPE:satellites} and {TYPE:orbital lasers} in the SECTOR $0.  If $2 is TRUE then {TYPE:asteroids} are also returned, whereas if $2 is FALSE then they are not.</t>		


<!--$1 $0 get buyable wares in sector. Include player factories: $2x Include shipyards: $3y Include docks: $4z-->
<t id="1521">Returns a new ARRAY containing all the WARES for sale within the SECTOR $0.  You can choose to include or exclude WARES from SHIPYARDS, DOCKS and {PROPERTY:player owned} FACTORIES.

{HEADING:Information}

If $2x is TRUE then WARES sold by {PROPERTY:player owned} FACTORIES are included in the ARRAY.
If $3y is TRUE then SHIPS sold by SHIPYARDS are included in the ARRAY.
If $4z is TRUE then WARES sold by DOCKS are included in the ARRAY.</t>		


<!--$1 $0 find all sectors within $2x jumps: Only known sectors=$3y-->
<t id="1334">Returns a new ARRAY of all SECTORS with a maximum {PROPERTY:jump distance} of $2x from the OBJ $0.

If $3y is TRUE then only SECTORS {PROPERTY:known} to the player are returned.

{HEADING:Information}

All {PROPERTY:jump distances} are zero-based.</t>

<!-- ********************************************************************************** -->
<!-- ******************************** X3:TC STATION PROPERTY ************************* -->
<!-- ********************************************************************************** -->

<!-- %1%0 is military outpost -->
<t id="1484">Returns TRUE if the OBJ $0 is a {OBJECT:Military Output} and FALSE otherwise.</t>


<!-- ********************************************************************************** -->
<!-- ******************************** X3:TC UNIVERSE PROPERTY ************************* -->
<!-- ********************************************************************************** -->

<!-- $0 get notoriety required to buy ware: $1 -->
<t id="1456">Returns the raw NOTORIETY value required to buy the WARE $1.

{ABOUT_NOTORIETY}</t>

<!-- ********************************************************************************** -->
<!-- ******************************** X3:TC USER INTERFACE ****************************** -->
<!-- ********************************************************************************** -->

<!-- %0speak array: %1 prio=%2 -->
<t id="1510">Plays a sequence of speech clips defined by an array, and displays the STRINGS as subtitles. Each speech clip is defined by a page and string ID contained in consecutive elements of the ARRAY.

If {KEYWORD:START} is used, the command returns immediately and the speech clips are played asynchronously.

{HEADING:Information}

Only one set of speech clips can be played at a time, those with a higher priority $2 take precedence over those with a lower priority.

{RELATED_COMMAND:To generate the array to describe an object,get object name array,Array}</t>
  

<!-- ********************************************************************************** -->
<!-- ******************************** X3:TC WARE PROPERTY ****************************** -->
<!-- ********************************************************************************** -->

<!-- %0is equipment: ware=%1 -->
<t id="1479">Returns TRUE if the WARE $1 is a {PROPERTY:component} such as {OBJECT:Duplex Scanner} or {OBJECT:5MW Shield} and FALSE otherwise.</t>


<!-- %0is upgrade: ware=%1 -->
<t id="1480">Returns TRUE if the WARE $1 is an {PROPERTY:upgrade} such as {OBJECT:Engine Tunings} or {OBJECT:Police License} and FALSE otherwise.</t>


<!-- ********************************************************************************** -->
<!-- ******************************** X3:TC REMAINING COMMANDS ****************************** -->
<!-- ********************************************************************************** -->



<!--

<t id="1233">VARIATION   %1%0 move passenger to ship %2: set passenger as pilot=%3</t>
<t id="1235">VARIATION   %1%0 enslave passenger</t>
<t id="1236">VARIATION   %1%0 eject passenger</t>
<t id="1237">VARIATION   %1%0 destroy passenger</t>
<t id="1238">VARIATION   %1%0 add pilot of ship %2 as passenger: disable ship=%3</t>

<t id="1327">%1%0 fire missile %4 from turret %2 on %3</t>
<t id="1328">%1%0 find nearest enemy ship in range: class=%2</t>
<t id="1329">%1%0 get user input: type=%2, title=%3</t>
<t id="1330">%1%0 select best lasers for target %2 in turret %3: scan for friends %4</t>

<t id="1335">%0move player to ship %1: Teleport=%2</t>
<t id="1339">%0add secondary signal: signal=%1, script=%2, prio=%3, name=%4</t>
<t id="1340">%0remove secondary signal: signal=%1, name=%2</t>



<t id="1348">%0create a new flight wing: name=%1 race=%2</t>

<t id="1351">%0add to flight wing: wing=%1</t>
<t id="1352">%1%0 get ware storage percentage: ware=%2</t>

<t id="1354">disband flight wing: wing=%0</t>
<t id="1355">%0find flight wing: name=%1 race=%2</t>
<t id="1356">%0get flight wing ship array: wing=%1</t>
<t id="1357">%0remove from flight wing</t>
<t id="1358">remove ship from flight wing: wing=%0 ship=%1</t>
<t id="1359">add ship to flight wing: wing=%0 ship=%1</t>
<t id="1360">%0get flight wing array</t>
<t id="1361">%0get predefined wing: wing=%1</t>
<t id="1362">%1%0 is autojump activated</t>
<t id="1363">%0set autojump active: %1</t>
<t id="1364">%1%0 get autojump minimum jumps</t>
<t id="1365">%0autojump minimum jumps= %1</t>
<t id="1366">%1%0 is emergency jump activated</t>
<t id="1367">%0set emergency jump active: %1</t>
<t id="1368">%1%0 get emergency jump minimum shield threshold</t>
<t id="1369">%0autojump emergency jump shield threshold= %1\%</t>

<t id="1371">%0add default wares to station/dock</t>
<t id="1373">%1%0 get missile resupply: missile=%2</t>
<t id="1374">%0set missile resupply: missile=%1 amount=%2</t>
<t id="1376">%1%0 get jumpdrive fuel resupply</t>
<t id="1377">%1%0 get ammo resupply: ammo=%2</t>
<t id="1378">%0set jumpdrive fuel resupply: amount=%1</t>
<t id="1379">%0set ammo resupply: ammo=%1 amount=%2</t>
<t id="1380">set script command upgrade: wing command=%0 upgrade=%1</t>
<t id="1381">set script command upgrade: wing command=%0 upgrade=%1 script=%2</t>
<t id="1382">global script map for wings: key=%0 race=%1 script=%2 prio=%3</t>
<t id="1383">%0set wing command: %1</t>
<t id="1384">%0set wing command: %1  target=%2 target2=%3</t>
<t id="1385">%1%0 get flight wing</t>
<t id="1386">%1%0 get wing natural formation</t>
<t id="1387">%0set max trade jumps: %1</t>
<t id="1388">%0get default launch time difference for missile type: %1</t>
<t id="1389">%0set wing natural formation: formation=%1</t>
<t id="1390">%1%0 is temporarily removed from wing</t>
<t id="1391">%0temporarily remove from wing</t>
<t id="1392">%0return to wing</t>
<t id="1393">%0add wing additional ship command: id=%1 script=%2 pageid=%3 textid=%4</t>
<t id="1394">%0remove wing additional ship command: id=%1</t>
<t id="1395">%1%0 does wing additional ship command exists: id=%2</t>
<t id="1396">%0get wing command upgrade: command=%1</t>
<t id="1397">%1%0 ship has wing command upgrade: command=%2</t>
<t id="1398">%0add wing additional ship command: id=%1 script=%2 pageid=%3 textid=%4 checkscript=%5</t>
<t id="1399">%1%0 get ship array for wing command upgrade: command=%2</t>
<t id="1400">%0get bullet speed of laser %1</t>
<t id="1401">add wing custom command: id=%0</t>
<t id="1402">remove wing custom command: id=%0</t>
<t id="1403">%0wing custom command exists: id=%1</t>
<t id="1404">START %0 wing command %1 : arg1=%2, arg2=%3, arg3=%4, arg4=%5</t>
<t id="1405">%1%0 is in same wing as %2</t>
<t id="1407">global secondary signal map: add signal=%0 race=%1 class=%2 script=%3 prio=%4 name=%5</t>
<t id="1408">global secondary signal map: remove signal=%0 race=%1 class=%2 name=%3</t>
<t id="1409">%1%0 get wing formation leaders</t>
<t id="1410">%0set passenger transport, destination=%1, payment=%2</t>
<t id="1411">%1%0 is passenger to be transported</t>
<t id="1412">%1%0 get passenger transport destiantion</t>
<t id="1413">%1%0 get passenger transport payment</t>
<t id="1414">%1%0 get all local variable keys, starting with=%2</t>
<t id="1416">%0create custom menu array: heading=%1</t>
<t id="1418">display subtitle text: text=%0 duration=%1 ms</t>
<t id="1425">%1%0 call named script: script=%2, %3, %4, %5, %6, %7</t>
<t id="1426">%0start named script: task=%1 scriptname=%2 prio=%3, %4, %5, %6, %7, %8</t>
<t id="1429">%1%0 can transport passenger: %2</t>
<t id="1435">%1%0 get temporarily removed ship array from wing</t>
<t id="1436">%0get all global variable keys, starting with=%1</t>


<t id="1444">%0create custom menu array, info lines=%1, %2, %3, %4, %5</t>
<t id="1445">%0create custom menu array</t>
<t id="1446">add custom menu info line to array %0: text=%1</t>
<t id="1447">add custom menu item to array %0: text=%1 returnvalue=%2</t>
<t id="1448">add custom menu heading to array %0: title=%1</t>
<t id="1450">%1%0 get local variables: regular expression=%2</t>
<t id="1451">%0get global variables: regular expression=%1</t>
<t id="1452">%1%0 get compatible laser array: turret=%2</t>
<t id="1454">%1%0 can buy ware %2 at station %3</t>
<t id="1455">%1%0 can buy ware %2 from race %3</t>

<t id="1462">%1%0 get next available task: starting=%2</t>
<t id="1463">add ship custom command: id=%0</t>
<t id="1464">remove ship custom command: id=%0</t>
<t id="1465">%0ship custom command exists: id=%1</t>
<t id="1466">set ship command preload script: command=%0 script=%1</t>
<t id="1467">set wing command preload script: wing command=%0 script=%1</t>

<t id="1481">%1%0 launch boarding pod at target: victim=%2 marines=%3</t>

<t id="1483">%1%0 can turret %2 fire missiles</t>

<t id="1487">set discovered status: type=%0 status=%1</t>
<t id="1488">%0has %1 been discovered</t>
<t id="1489">%0open custom info menu: title=%1 description=%2 option array=%3 maxoptions=%4</t>
<t id="1490">capture screen</t>
<t id="1491">set monitor mode and viewpoint: monitor=%0 cockpit=%1 mode=%2 alpha=%3 beta=%4 gamma=%5 range=%6</t>

<t id="1499">%1%0 get compatible missile array</t>
<t id="1500">%1%0 get resupply fuel required</t>
<t id="1502">%1%0 get all formation followers</t>
<t id="1503">%1%0 get highest formation leader</t>
<t id="1506">%0is inventory: ware=%1</t>
<t id="1507">%1%0 get boarding shield threshold</t>
<t id="1508">%1%0 get maximum laser range: turret=%2</t>
<t id="1509">%1%0 get minimum laser range: turret=%2</t>

<t id="1511">%0register hotkey %1 to call script name %2</t>
<t id="1517">%1%0 get number of wing formation leaders</t>
<t id="1518">%1%0 get max number of ships per wing formation</t>

<t id="1520">%1%0 get compatible missile array from cargobay</t>
<t id="1522">add section to custom menu: %0</t>
<t id="1523">%0create text for custom menu, left=%1, right=%2</t>

<t id="1527">add value selection to menu: %0, text=%1, value array=%2, default=%3, return id=%4</t>
<t id="1529">%0get subtype integer of data [ %1 ]</t>
<t id="1530">%1%0 get user input without sector: type=%2, title=%3</t>
<t id="1531">add encyclopedia custom article: News, id=%0, title page=%1, title id=%2, text page=%3, text id=%4, timeout=%5</t>
<t id="1532">add encyclopedia custom article: Information, id=%0, title page=%1, title id=%2, text page=%3, text id=%4, timeout=%5</t>
<t id="1533">add encyclopedia custom article: History, id=%0, title page=%1, title id=%2, text page=%3, text id=%4, timeout=%5</t>
<t id="1534">add encyclopedia custom article: Stories, id=%0, title page=%1, title id=%2, text page=%3, text id=%4, timeout=%5</t>
<t id="1535">remove encyclopedia custom article: id=%0</t>
<t id="1536">set encyclopedia custom article sectors: id=%0, sector array=%1</t>
<t id="1537">%1%0 get user input type=%2, title=%3, sector=%4</t>
<t id="1538">%0get OOS shield damage of laser %1</t>
<t id="1539">%0get OOS hull damage of laser %1</t> -->
</page>



  
  
  
  
  
  
  
  
  
  
  
<page id="382003" title="X3:Albion Prelude - Command Descriptions">


<!-- ********************************************************************************** -->
<!-- ********************************** X3:AP  MATHS    ********************************** -->
<!-- ********************************************************************************** -->
  
<!--$0 get minimum, $1o, $2x, $3y, $4z, $5a-->
<t id="1597">Compares the INTEGERS $1o, $2x, $3y, $4z, $5a and returns whichever is the smallest.

{RELATED_COMMAND:To determine the largest of a set of INTEGERS,get maximum,Maths}</t>


<!-- ********************************************************************************** -->
<!-- ********************************** X3:AP UNIVERSE DATA ********************************* -->
<!-- ********************************************************************************** -->
  
<!--%1%0 is sector visible-->
<t id="1567">Returns TRUE when the player is in SECTOR $0 and FALSE otherwise.  It may also return FALSE if the player is within SECTOR $0 but DOCKED at a STATION.

{UNDOCUMENTED}</t>		

  
<!--%1%0 get player object count in sector: class=%2-->
<t id="1577">Returns a new ARRAY containing the {PROPERTY:player owned} objects with OBJCLASS $2 in the SECTOR $0.

If $2 is NULL then the ARRAY contains objects of any OBJCLASS.

{UNDOCUMENTED}</t>		

  
<!--$0 get cluster sectors for race $1, startsector: $2, threshold: $3, only include known: $4-->
<t id="1585">Returns a new ARRAY containing the SECTORS of RACE $1 that are contiguous with the SECTOR $2.  If $4 is TRUE then only {PROPERTY:known sectors} that the player has discovered are included in the ARRAY.

The INTEGER $3 probably specifies to what extent nearby SECTORS are included.

{UNDOCUMENTED}</t>		


<!--$0 find gate: flags=$1x, refobj=$2, max dist=$3y, refpos=$4 object check=$5-->
<t id="1586">Finds and returns JUMPGATES within the SECTOR containing the OBJ $2 or the {PROPERTY:position} $4 that can be used by the {PROPERTY:owner of} the SHIP $5.  {SEARCH_SYNTAX:JUMPGATES}

{HEADING:Optional Parameters}

{SEARCH_BY_FLAGS:JUMPGATES,1x}

{HEADING:Search Flags}

{FLAG_NEAREST_2:JUMPGATE,2,4}
{FLAG_RANDOM:JUMPGATE}
{FLAG_VISIBLE:JUMPGATES,2}
{FLAG_KNOWN:JUMPGATES}
{CONSTANT:\[Find.Expand\]} - Search adjacent SECTORS until a JUMPGATE is found
{FLAG_MULTIPLE_UNLIMITED:JUMPGATES}
{CONSTANT:\[Find.JumpableGate\]} - Do not return {OBJECT:Transorbital Accelerators}
{CONSTANT:\[Find.JumpBeacons\]} - Return {OBJECT:Jump Beacons} and JUMPGATES

{HEADING:Unsupported Search Flags}

{CONSTANT:\[Find.ExactJumps\]} - This command only searches the SECTOR containing the OBJ $2 or the {PROPERTY:position} $4
{FLAG_NO_RELATIONS:JUMPGATES}
{FLAGS_MUTUTALLY_EXCLUSIVE_2:Nearest,Random}

{HEADING:Information}

{FLAGS_DEPENDENCY:Expand,Nearest}

{FLAGS_COMBINING:Random,Visible}

{FLAGS_MULTIPLE_NEAREST}

{FLAGS_REFERENCE_REQUIREMENT:2,4}</t>		

<!-- ********************************************************************************** -->
<!-- ********************************* X3:AP REMAINING COMMANDS ***************************** -->
<!-- ********************************************************************************** -->
  
<!--
<t id="1540">%0get billions of credits in player account</t>
<t id="1541">%0get amount of credits under a billion in player account</t>
<t id="1542">%0get full amount of credits in player account formatted as string: include separators %1, use millions suffix for very large numbers %2</t>
<t id="1543">show graph using graph data array %0</t>
<t id="1544">%0format large number pair as string: billions %1, units %2, include separators %3, use millions suffix for very large numbers %4</t>
<t id="1545">add info line section to menu: %0</t>
<t id="1546">add info line heading to menu: %0, heading=%1</t>
<t id="1547">%0create menu return value: open menu, menu script=%1, script args=%2</t>
<t id="1548">%0create menu return value: run script %1, script args=%2</t>
<t id="1549">add trade bar to menu: %0, text=%1, min=%2, max=%3, current=%4, return value=%5, left text=%6, right text=%7</t>
<t id="1550">add new grouping to menu: %0, text=%1, open=%2</t>
<t id="1551">add end grouping to menu: %0</t>
<t id="1552">set menu option: %0, maximum infolines=%1</t>
<t id="1553">set menu option: %0, page up/down keys for info=%1</t>
<t id="1554">%0create menu return value: command `Open All Groups`</t>
<t id="1555">%0create menu return value: command `Close All Groups`</t>
<t id="1556">add non selectable menu item: %0, text=%1</t>
<t id="1557">%0 set stock exchange unlock state: %1</t>
<t id="1558">%1%0 get stock exchange unlock state</t>
<t id="1559">%0 get all unlocked stock exchanges</t>
<t id="1560">add trade rank based on profit: race=%0 profit=%1</t>
<t id="1561">%1%0 get owned share count</t>
<t id="1562">%0 set owned share count: %1</t>
<t id="1563">set stock exchange corporate reports menu item: Enabled=%0</t>
<t id="1564">set stock exchange Company reports menu item: Enabled=%0</t>
<t id="1565">set stock exchange commodity reports menu item: Enabled=%0</t>
<t id="1566">set menu option: %0, use hover line=%1</t>
<t id="1568">%1%0 get fleet ships: only currently with fleet: %2</t>
<t id="1569">%0 set fleet leader: %1</t>
<t id="1570">%0 remove from fleet</t>
<t id="1571">%0 switch fleet leader to: %1</t>
<t id="1572">%1%0 is in fleet</t>
<t id="1573">%1%0 get fleet leader</t>
<t id="1574">%1%0 is fleet leader</t>
<t id="1575">%1%0 is currently with fleet</t>
<t id="1576">%0 set with fleet: %1</t>

<t id="1578">%1%0 is stock exchange accessible</t>
<t id="1579">%1%0 get WarObject ID</t>
<t id="1580">%0get name of current War State</t>
<t id="1581">%0 set job override name: %1</t>
<t id="1582">%0get trade stats for sectors: %1, only include these wares: %2, treat docks as producers: %3, include player docks: %4</t>
<t id="1583">%1%0 fire all turrets on target: %2, next target filter=%3</t>
<t id="1584">%0get trade stats for sector: %1, only include these wares: %2, treat docks as producers: %3, include player docks: %4</t>
<t id="1587">%1%0 is gate/beacon: %2 jumpable</t>
<t id="1588">%0get name of next expected War State \(final choice may differ!\)</t>
<t id="1589">%0is player currently observing War State</t>
<t id="1590">%0get progress of current War State</t>
<t id="1591">%0get start time of current War State</t>
<t id="1592">%0get end time of current War State \(may change!\)</t>
<t id="1593">%0did player observe currently active War State</t>
<t id="1594">%0get duration of War State %1</t>
<t id="1596">set menu option: %0, maximum menu height=%1 lines</t>
<t id="1598">add script options: script=%0 pageid=%1 textid=%2</t>
<t id="1599">remove script options: script=%0</t>
<t id="1600">%0does script exist: %1</t>
<t id="1601">%0register hotkey: page=%1 id=%2, to call script %3</t>
<t id="1602">%0get hotkey index, script: %1</t>
<t id="1603">%0register hotkey: page=%1 id=%2, to call script name %3</t>
<t id="1604">%0get hotkey index, script name: %1</t>
<t id="1605">%0does script name exist: %1</t>
<t id="1606">%0get bullet flags of laser %1 </t>
<t id="1607">%0get colour code: red=%1 green=%2 blue=%3 transparency=%4</t>
<t id="1608">add player graph: script=%0 pageid=%1 textid=%2 group pageid=%3 group textid=%4 subgroup=%5 \(0-7\)</t>
<t id="1609">remove player graph: script=%0 group pageid=%1 group textid=%2</t>
<t id="1610">add class graph: class=%0 script=%1 pageid=%2 textid=%3 group pageid=%4 group textid=%5 subgroup=%6 \(0-7\)</t>
<t id="1611">remove class graph: class=%0 script=%1 group pageid=%2 group textid=%3</t>
<t id="1612">%0 add object graph: script=%1 pageid=%2 textid=%3 group pageid=%4 group textid=%5 subgroup=%6 \(0-7\)</t>
<t id="1613">%0 remove object graph: script=%1 group pageid=%2 group textid=%3</t>
<t id="1614">%0get global parameter value: parameter=%1 default=%2</t>
<t id="1615">%0get ship class from subtype: %1</t>
<t id="1616">%0get race id for race: %1</t>
<t id="1617">%1%0 mine is armed</t>
<t id="1618">%0set mine armed state to %1</t>-->
</page>


  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
<!-- ********************************************************************************** -->
<!-- ********************************* CONSTANTS ***************************** -->
<!-- ********************************************************************************** -->
  
  
<page id="2002" title="Constants">
  
<t id="1">The object upon which the script is executing</t>
<!--
<t id="2">MAX</t>
-->
<t id="3">The SHIP containing the player</t>
<!--
<t id="4">HOMEBASE</t>
<t id="5">ENVIRONMENT</t>
<t id="6">SECTOR</t>
<t id="7">OWNER</t>
<t id="8">NEAREST</t>
-->
<t id="9">The value FALSE</t>
<t id="10">The value TRUE</t>
<!--
<t id="11">DOCKEDAT</t>
-->

<!-- *************** FORMATIONS *************** -->

<!--Formation.Delta-->
<t id="100">The SHIPS fly in a horizontal `wing` FORMATION, with the FORMATIONLEADER in the lead, and {PROPERTY:followers} trailing slightly on each side.</t>


<!--Formation.Line-->
<t id="101">The SHIPS fly in a parallel horizontal line, with the FORMATIONLEADER in the centre.</t>


<!--Formation.X-->
<t id="102">The SHIPS fly in parallel, arranged in a vertical X FORMATION, with the FORMATIONLEADER in the centre.</t>


<!--Formation.BigShipEscort-->
<t id="103">The SHIPS fly in a tight group surrounding the target SHIP on all sides, with the foremost ship being the FORMATIONLEADER.</t>


<!--Formation.Random-->
<t id="104">A randomly selected FORMATION.</t>


<!--Formation.XDelta-->
<t id="113">The SHIPS fly in a vertical X FORMATION, with the FORMATIONLEADER in the lead, and {PROPERTY:followers} trailing slightly in the NE, NW, SE and SW directions.</t>


<!--Formation.Pyramid-->
<t id="114">The SHIPS fly in a FORMATION similar to a pyramid rotated by 90º, with the FORMATIONLEADER in the lead as the `tip` of the pyramid, and the {PROPERTY:followers} occupying the `body` of the pyramid.</t>


<!--
<t id="136">Formation.DragonClaw</t>
<t id="137">Formation.TheShield</t>
-->

<!-- ********************************* SEARCH FLAGS ***************************** -->

<!--Find.Random-->
<t id="105">Used as a flag in any search command to return an OBJ matching the specified criteria at random.

{RELATED_COMMAND_LIST:search,Universe Data}</t>     


<!--Find.Nearest-->  
<t id="106">Used as a flag in any search command to return the OBJ nearest to the {PARAMETER:Reference Object}.

{FLAGS_MULTIPLE_NEAREST}

{RELATED_COMMAND_LIST:search,Universe Data}</t>      


<!--Find.ExactJumps-->
<t id="107">Used as a flag in the {COMMAND:find station in galaxy} commands to return STATIONS that are a precise {PROPERTY:jump distance} from the {PARAMETER:Reference Object}.

{RELATED_COMMAND_LIST:search,Universe Data}</t>   


<!--Find.Enemy-->
<t id="108">Used as a flag in any search command to return OBJS that are {PROPERTY:enemies} of the {PARAMETER:Reference Object}.

{RELATED_COMMAND_LIST:search,Universe Data}</t>   


<!--Find.Neutral-->
<t id="109">Used as a flag in any search command to return OBJS that are {PROPERTY:neutral} towards the {PARAMETER:Reference Object}.

{RELATED_COMMAND_LIST:search,Universe Data}</t>   


<!--Find.Friend-->
<t id="110">Used as a flag in any search command to return OBJS that are {PROPERTY:friends} of the {PARAMETER:Reference Object}.

{RELATED_COMMAND_LIST:search,Universe Data}</t>   


<!--Find.Multiple-->
<t id="111">Used as a flag in all search commands except {COMMAND:find station in galaxy} to return multiple OBJS matching the specified criteria.  Using this flag results in the search command returning an ARRAY of OBJS instead of a single OBJ.

{FLAGS_MULTIPLE_NEAREST}

{RELATED_COMMAND_LIST:search,Universe Data}</t>    


<!--Find.TypeAsWareCategory-->
<t id="112">This FLAG is not used.</t>


<!--Find.IllegalWare-->
<t id="115">Used as a search flag in the {COMMAND:find flying ware} command to return FLYINGWARES containing {PROPERTY:illegal} cargo.

{RELATED_COMMAND_LIST:search,Universe Data}</t> 


<!-- Find.ForceUsePos -->
<t id="116">{UNDOCUMENTED}</t>


<!-- Find.Known -->
<t id="123">Used as a flag in many search commands to return only OBJS that have been detected by the player at least once.

{RELATED_COMMAND_LIST:search,Universe Data}</t>


<!-- Find.IncludeDocked -->
<t id="124">Used as a flag in the {COMMAND:find ship} commands to also return SHIPS that are {PROPERTY:docked}.

{RELATED_COMMAND_LIST:search,Universe Data}</t>


<!-- Find.RaceLogicEnabled -->
<t id="125">Used as a flag in the {COMMAND:find ship} commands to return only SHIPS that are currently controlled by {PROPERTY:race logic}.

{RELATED_COMMAND_LIST:search,Universe Data}</t>


<!-- Find.Visible -->
<t id="126">Used as a flag in many search commands to return only OBJS that are within scanner range of the {PARAMETER:Reference Object}.

{RELATED_COMMAND_LIST:search,Universe Data}</t>


<!-- Find.SEN -->
<t id="127">{UNDOCUMENTED}</t>

<!-- Find.HEN -->
<t id="128">{UNDOCUMENTED}</t>

<!-- Find.SON -->
<t id="129">{UNDOCUMENTED}</t>


<!-- Find.DockingAllowed -->
<t id="131">Used as a flag in the {COMMAND:find station} commands to return only STATIONS at which the {PARAMETER:Reference Object} may dock.

{RELATED_COMMAND_LIST:search,Universe Data}</t>


<!-- Find.WingOnly -->
<t id="132">Used as a flag in the {COMMAND:find ship} commands to return only SHIPS that are currently within a WING.

{RELATED_COMMAND_LIST:search,Universe Data}</t>


<!-- Find.JumpableGate -->
<t id="134">Used as a flag in the {COMMAND:find gate} commands to exclude {OBJECT:Transorbital Accelerators} from the results.

{RELATED_COMMAND_LIST:search,Universe Data}</t>


<!-- Find.Expand -->
<t id="135">Used as a flag in the {COMMAND:find gate} commands to request adjacent SECTORS be searched until a matching JUMPGATE is found.

{RELATED_COMMAND_LIST:search,Universe Data}</t>

<!-- Find.JumpBeacons -->
<t id="138">Used as a flag in the {COMMAND:find gate} commands to return {OBJECT:Jump Beacons} as well as JUMPGATES.

{RELATED_COMMAND_LIST:search,Universe Data}</t>

<!-- *************** COMMAND CONSOLE FLAGS *************** -->


<!-- CmdConCheck.Available -->
<t id="117">Returned by the `check script` used by the {COMMAND:set script command upgrade} commands to indicate the specified {TYPE:object command} is enabled.</t>

<!-- CmdConCheck.Disabled -->
<t id="118">Returned by the `check script` used by the {COMMAND:set script command upgrade} commands to indicate the specified {TYPE:object command} is disabled.</t>

<!-- CmdConCheck.OneTime -->
<t id="119">Returned by the `check script` used by the {COMMAND:set script command upgrade} commands to indicate the status of the specified {TYPE:object command} should only be checked when the `commands` menu is opened.</t>

<!-- CmdConCheck.Infinite -->
<t id="120">Returned by the `check script` used by the {COMMAND:set script command upgrade} commands to indicate the status of the specified {TYPE:object command} should be checked continuously while the `commands` menu is open.</t>

<!-- CmdConCheck.NeedHomeStation -->
<t id="121">Returned by the `check script` used by the {COMMAND:set script command upgrade} commands to indicate the specified {TYPE:object command} can only be executed on OBJS with a STATION for a {PROPERTY:homebase}.</t>

<!-- CmdConCheck.NeedHomeBase -->
<t id="122">Returned by the `check script` used by the {COMMAND:set script command upgrade} commands to indicate the specified {TYPE:object command} can only be executed on OBJS with a {PROPERTY:homebase}.</t>


<!-- CmdConCheck.NoAudioConfirmation -->
<t id="130">{UNDOCUMENTED}</t>


<!-- CmdConCheck.NoTempRemove -->
<t id="133">{UNDOCUMENTED}</t>


<!-- CmdConCheck.WingAllShips -->
<t id="3038">{UNDOCUMENTED}</t>

<!-- CmdConCheck.NoVoice -->
<t id="3050">{UNDOCUMENTED}</t>

<!-- CmdConCheck.NeedFleet -->
<t id="3051">{UNDOCUMENTED}</t>



<!-- ***************  MAIN TYPES *************** -->

<!--
<t id="200">SSTYPE_BULLET</t>
<t id="201">SSTYPE_SPACE</t>
<t id="202">SSTYPE_BACKGROUND</t>
<t id="203">SSTYPE_SUN</t>
<t id="204">SSTYPE_PLANET</t>
-->


<!--SSTYPE_DOCK-->
<t id="205">[b]Docks[/b] are STATIONS that trade items but do not produce them.  {OBJECT:Trading Stations}, {OBJECT:Equipment Docks}, {OBJECT:Pirate Bases} and {OBJECT:Military Outposts} are all examples of [b]Docks[/b].</t>

<!--SS_TYPE_FACTORY-->
<t id="206">[b]Factories[/b] are STATIONS that buy resources and sell products.  {OBJECT:Solar Power Plants}, {OBJECT:Crystal Fabs}, {OBJECT:Space Fuel Distilleries} and {OBJECT:Silicon Mines} are all examples of [b]Factories[/b].</t>


<!--
<t id="207">SSTYPE_SHIP</t>
<t id="208">SSTYPE_LASER</t>
<t id="209">SSTYPE_SHIELD</t>
<t id="210">SSTYPE_MISSILE</t>
<t id="211">SSTYPE_W_ENERGY</t>
<t id="212">SSTYPE_W_NATURAL</t>
<t id="213">SSTYPE_W_BIO</t>
<t id="214">SSTYPE_W_FOOD</t>
<t id="215">SSTYPE_W_MINERALS</t>
<t id="216">SSTYPE_W_TECH</t>
<t id="217">SSTYPE_ASTEROID</t>
<t id="218">SSTYPE_WARPGATE</t>
<t id="219">SSTYPE_CAMERA</t>
<t id="220">SSTYPE_SPECIAL</t>
<t id="221">SSTYPE_NEBULA</t>
<t id="222">SSTYPE_INSTATION</t>
<t id="223">SSTYPE_DUMMY</t>
<t id="224">SSTYPE_COMMAND</t>
<t id="225">SSTYPE_COCKPIT</t>
<t id="226">SSTYPE_DATATYPE</t>
-->

<!-- *************** TRANSMISSIONS *************** -->

<!-- IncomingTransmission.SOS -->
<t id="300">Used in the {COMMAND:play sample: incoming transmission} command to play the `Emergency message from xyz` speech clip.

{RELATED_COMMAND_LIST:audio and video,User Interface}</t>

<!-- IncomingTransmission.Message -->
<t id="301">Used in the {COMMAND:play sample: incoming transmission} command to play the `Incoming message` speech clip.

{RELATED_COMMAND_LIST:audio and video,User Interface}</t>

<!-- IncomingTransmission.Greeting -->
<t id="302">Used in the {COMMAND:play sample: incoming transmission} command to play the `We are being hailed` speech clip.

{RELATED_COMMAND_LIST:audio and video,User Interface}</t>

<!-- IncomingTransmission.Scanned -->
<t id="303">Used in the {COMMAND:play sample: incoming transmission} command to play the `We are scanned` speech clip.

{RELATED_COMMAND_LIST:audio and video,User Interface}</t>


<!-- Comm.DLG_C_START_FIGHTING -->
<t id="2004">Used in the {COMMAND:send audio message to player} command to display the `we are about to attack` video clip.

{RELATED_COMMAND_LIST:audio and video,User Interface}</t>

<!-- Comm.DLG_POL_ILLEGAL_GOODS -->
<t id="2075">Used in the {COMMAND:send audio message to player} command to display the `illegal goods detected` video clip.

{RELATED_COMMAND_LIST:audio and video,User Interface}</t>

<!-- Comm.DLG_POL_LAST_WARNING -->
<t id="2076">Used in the {COMMAND:send audio message to player} command to display the `this is your last warning` video clip.

{RELATED_COMMAND_LIST:audio and video,User Interface}</t>

<!-- Comm.DLG_POL_LEGAL_GOODS -->
<t id="2077">Used in the {COMMAND:send audio message to player} command to display the `no illegal goods detected` video clip.

{RELATED_COMMAND_LIST:audio and video,User Interface}</t>

-->

<!-- *************** START ACTIONS *************** -->

<!--
<t id="400">ACTION_NONE</t>
<t id="401">ACTION_START_IN_STATION</t>
<t id="402">ACTION_LAND_IN_STATION</t>
<t id="403">ACTION_ENTER_GATE</t>
<t id="404">ACTION_LEAVE_GATE</t>
<t id="405">ACTION_KILL</t>
<t id="406">ACTION_FOLLOW_LEADER</t>
<t id="407">ACTION_KILL_ALL_ENEMIES</t>
<t id="408">ACTION_IDLE</t>
<t id="409">ACTION_FLY_TO_SECTOR</t>
<t id="410">ACTION_FLY_TO_POSITION</t>
<t id="411">ACTION_SCAN</t>
<t id="412">ACTION_AVOID</t>
<t id="413">ACTION_LEAVE_HYPERSPACE</t>
<t id="414">ACTION_ESCORT</t>
<t id="415">ACTION_COLLECT</t>
<t id="420">ACTION_FLY_TO_POSITION_CONTINUE</t>
<t id="421">ACTION_JUMP</t>
<t id="422">ACTION_BOARD</t>
-->

<!-- *************** QUEST FLAGS *************** -->

<!--
<t id="500">Quest.Offered</t>
<t id="501">Quest.Accepted</t>
<t id="502">Quest.Continued</t>
<t id="503">Quest.Aborted</t>
<t id="504">Quest.Finished</t>
<t id="505">Quest.Question</t>
<t id="506">Quest.Event.Setenv</t>
<t id="507">Quest.Event.Attacked</t>
<t id="508">Quest.Event.Killed</t>
<t id="509">Quest.Event.Captured</t>
-->

<!-- *************** SPECIAL *************** -->

<!--
<t id="1000">GalaxyFlightTimestep.Normal</t>
<t id="1001">GalaxyFlightTimestep.Focus</t>
-->

<!-- *************** MESSAGE FLAGS *************** -->

<!--
<t id="3000">Msg.Display</t>
<t id="3001">Msg.NoVoice</t>
<t id="3002">Msg.Silent</t>
<t id="3003">Msg.LogEntry</t>
<t id="3004">Msg.Temporary</t>
<t id="3005">Msg.Plot</t>
-->

<!-- *************** MISSILE FLAGS *************** -->

<!--
<t id="3020">Missile.NoTarget</t>
<t id="3021">Missile.Dumbfire</t>
<t id="3022">Missile.Swarm</t>
<t id="3023">Missile.Heatseek</t>
<t id="3024">Missile.Tracker</t>
<t id="3025">Missile.Proximity</t>
<t id="3026">Missile.Triggerboom</t>
<t id="3027">Missile.Torpedo</t>
<t id="3028">Missile.Remote</t>
-->

<!-- *************** WING IDS *************** -->

<!--
<t id="3030">Wing.Gold</t>
<t id="3031">Wing.Red</t>
<t id="3032">Wing.Blue</t>
<t id="3033">Wing.Green</t>
<t id="3034">Wing.Purple</t>
<t id="3035">Wing.White</t>
<t id="3036">Wing.Silver</t>
<t id="3037">Wing.Orange</t>
-->

<!-- *************** BULLET TYPES *************** -->

<!--
<t id="3060">Bullet.Smoke</t>
<t id="3061">Bullet.Beam</t>
<t id="3062">Bullet.Lightning</t>
<t id="3063">Bullet.Expand</t>
<t id="3064">Bullet.Disable</t>
<t id="3065">Bullet.IgnoreShield</t>
<t id="3066">Bullet.NeedAmmunition</t>
<t id="3067">Bullet.Repair</t>
<t id="3068">Bullet.SelfDestruct</t>
<t id="3069">Bullet.ReduceSpeed</t>
<t id="3070">Bullet.DrainWeapon</t>
<t id="3071">Bullet.DamageOverTime</t>
<t id="3072">Bullet.Fragment</t>
<t id="3073">Bullet.Charge</t>
<t id="3074">Bullet.FireDelay</t>
-->
</page>


  
  
  
  
  
  
  
  
  
  
<!-- ********************************************************************************** -->
<!-- ********************************* OBJECT CLASSES ***************************** -->
<!-- ********************************************************************************** -->
  
  
<page id="2006" title="Object Classes">

<t id="1001">Components of the galaxy such as PLANETS, {TYPE:stars} and NEBULAE, as well as unique objects used in the plot.</t>       <!--Special-->
<t id="1650">{UNDOCUMENTED}</t>       <!--Debris-->
<t id="2088">{UNDOCUMENTED}</t>       <!--Debris-->
<t id="1652">{UNDOCUMENTED}</t>       <!--Wreck-->
<t id="2090">{UNDOCUMENTED}</t>       <!--Wreck-->


<t id="2001">Any sector.

{HEADING:Hierarchy}
[center]{COMMAND:Sector}[/center]</t>                 <!--Sector-->


<t id="2012">Any type of Asteroid.

{HEADING:Hierarchy}
[center]{COMMAND:Asteroid}[/center]</t>       <!--Asteroid-->


<t id="2014">Any Jump Gate.

{HEADING:Hierarchy}
[center]{COMMAND:Jump Gate}[/center]</t>              <!--Warp Gate-->


<t id="2064">Any pilot in a spacesuit.

{HEADING:Hierarchy}
[center]{CLASS:Ship}

|

{COMMAND:Astronaut}[/center]</t>               <!--Astronaut-->


<t id="2084">Any FLYINGWARE container in space.

{HEADING:Hierarchy}
[center]{COMMAND:Ware Container}[/center]</t>       <!--Ware Container-->


<t id="2085">Any MISSILE that is in flight.

{HEADING:Hierarchy}
[center]{COMMAND:Missile}[/center]</t>             <!--Missile-->

<!--Station-->
<t id="2016">Any Dock, Factory or Shipyard.

{HEADING:Hierarchy}
[center]{COMMAND:Station}

|

{CLASS:Dock}\t{CLASS:Factory}\t{CLASS:Shipyard}[/center]</t>      

<!--Factory-->
<t id="2006">A FACTORY is defined as a STATION that buys RESOURCES and sells PRODUCTS, wheras a DOCK sells RESOURCES and has no PRODUCTS.

{HEADING:Hierarchy}
[center]{CLASS:Station}

|

{COMMAND:Factory}

|

{CLASS:Shipyard}\t{CLASS:Complex Hub}[/center]
{HEADING:Related}

See the {CONSTANT:SSTYPE_DOCK} and {CONSTANT:SSTYPE_FACTORY} MAINTYPES for more information.</t>      


<!--Dock-->
<t id="2007">A DOCK is defined as a STATION that sells RESOURCES and has no PRODUCTS, whereas a FACTORY buys RESOURCES and sells PRODUCTS.

{HEADING:Hierarchy}
[center]{CLASS:Station}

|

{COMMAND:Dock}

|

{CLASS:Trading Dock}\t{CLASS:Equipment Dock}\t{CLASS:Goner Dock}

{CLASS:Pirate Dock}\t{CLASS:Museum Dock}\t{CLASS:Kh`ahk Dock}[/center]
{HEADING:Related}

See the {CONSTANT:SSTYPE_DOCK} and {CONSTANT:SSTYPE_FACTORY} MAINTYPES for more information.</t>    


<!--Shipyard-->
<t id="2037">Any SHIPYARD of any size and RACE.

{HEADING:Hierarchy}
[center]{CLASS:Factory}

|

{COMMAND:Shipyard}

|

{CLASS:Small Shipyard}\t{CLASS:Large Shipyard}[/center]</t>     

<!--Small Shipyard-->
<t id="2081">Any SHIPYARD that trades in the smallest of SHIPS, such as the {OBJECT:Federal Argon Wharf}.

{HEADING:Hierarchy}
[center]{CLASS:Shipyard}

|

{COMMAND:Small Shipyard}[/center]</t>       

<!--Big Shipyard-->
<t id="2082">Any SHIPYARD that trades in the largest of SHIPS, such as the {OBJECT:Federal Argon Shipyard}.

{HEADING:Hierarchy}
[center]{CLASS:Shipyard}

|

{COMMAND:Big Shipyard}[/center]</t>       


<!--Scrapyard-->
<t id="2086">{UNDOCUMENTED}</t>       


<!--Complex Hub-->
<t id="2044">A connected set of FACTORIES.

{HEADING:Hierarchy}
[center]{CLASS:Factory}

|

{COMMAND:Complex Hub}[/center]
{SUBMISSION:Nekomata}</t>       


<t id="2045">{UNDOCUMENTED}</t>       <!--Player Headquarters-->
<t id="2046">{UNDOCUMENTED}</t>       <!--Headquarters-->




<t id="2074">The trading STATIONS found in the centre of each SECTOR, such as the {OBJECT:Royal Boron Trading Station} or {OBJECT:Split Trading Port}.

{HEADING:Hierarchy}
[center]{CLASS:Dock}

|

{COMMAND:Trading Dock}[/center]</t>      <!--Trading Dock--> 



<t id="2075">The equipment DOCKS operated by each RACE, such as the {OBJECT:Paranid Equipment Dock} or the {OBJECT:Teladi Space Equipment Dock}

{HEADING:Hierarchy}
[center]{CLASS:Dock}

|

{COMMAND:Equipment Dock}[/center]</t>     <!--Equipment Dock-->  



<t id="2076">The Pirate STATIONS in the game that are not FACTORIES.

{HEADING:Hierarchy}
[center]{CLASS:Dock}

|

{COMMAND:Pirate Dock}[/center]</t>       <!--Pirate Dock-->



<t id="2077">{TODO:Determine what a museum dock is}
  
{HEADING:Hierarchy}
[center]{CLASS:Dock}

|

{COMMAND:Museum Dock}[/center]</t>       <!--Museum Dock-->



<t id="2078">There are only two Kh`aak STATIONS, both are {CLASS:Kha`ak Dock}.

{HEADING:Hierarchy}
[center]{CLASS:Dock}

|

{COMMAND:Kha`ak Dock}[/center]</t>       <!--Kha`ak Dock-->



<t id="2042">There are only two Goner STATIONS, both are {CLASS:Goner Dock}.

{HEADING:Hierarchy}
[center]{CLASS:Dock}

|

{COMMAND:Goner Dock}[/center]</t>       <!--Goner Dock-->



<!--Ship-->
<t id="2004">Any Ship, Astonaut, Satellite, Mine, Orbital Laser, Space Fly, Drone or UFO in the game.

{HEADING:Hierarchy}
[center]{COMMAND:Ship}

|

{CLASS:Moveable Ship}\t{CLASS:Stationary Ship}

{CLASS:Special Ship}\t{CLASS:Astronaut}\t{CLASS:UFO}[/center]</t>    


<!--Moveable Ship-->
<t id="2134">Any SHIP with the capability to move. ie. All SHIPS except satellites, mines and orbital LASERS.

{HEADING:Hierarchy}
[center]{CLASS:Ship}

|

{COMMAND:Moveable Ship}

|

{CLASS:Little Ship}\t{CLASS:Big Ship}\t{CLASS:Huge Ship}\t{CLASS:Drone}[/center]</t>      
 

<!--Stationary Ship-->
<t id="2135">Most of the small stationary objects that can be {PROPERTY:player owned}.

{HEADING:Hierarchy}
[center]{CLASS:Ship}

|

{COMMAND:Stationary Ship}

|

{CLASS:Mine}\t{CLASS:Orbital Laser}\t{CLASS:Satellite}[/center]</t>       



<!--Huge Ship-->
<t id="2019">Any SHIP that is significantly larger than most ships in the game, such as {M1_OBJECT}, {M2_OBJECT} and {TL_OBJECT}.

{HEADING:Hierarchy}
[center]{CLASS:Moveable Ship}

|

{COMMAND:Huge Ship}

|

{CLASS:Carrier}[/center]</t>       


<!--Carrier-->
<t id="2033">Any SHIP that can contain smaller ships.

{HEADING:Hierarchy}
[center]{CLASS:Huge Ship}

|

{COMMAND:Carrier}

|

{M1_CLASS}\t{M2_CLASS}

{TL_CLASS}[/center]</t>     
  

<!--Big Ship-->
<t id="2073">Any SHIP that is large enough to contain smaller SHIPS, but is not gigantic.

{HEADING:Hierarchy}
[center]{CLASS:Moveable Ship}

|

{COMMAND:Big Ship}

|

{M6_CLASS}\t{M8_CLASS}

{TM_CLASS}[/center]</t>       


<!--Little Ship-->
<t id="2133">Any SHIP too small to contain other SHIPS, such as fighters and transports.

{HEADING:Hierarchy}
[center]{CLASS:Moveable Ship}

|

{COMMAND:Little Ship}

|

{CLASS:Fighter}\t{TS_CLASS}

{TP_CLASS}[/center]</t>     
  


<!--Fighter-->
<t id="2034">Any type of Fighter.

{HEADING:Hierarchy}
[center]{CLASS:Little Ship}

|

{COMMAND:Fighter}

|

{M3_CLASS}\t{M4_CLASS}

{M5_CLASS}[/center]</t>       

  
<!--Freighter-->
<t id="2038">{UNDOCUMENTED}</t>     
  

<!--M0-->
<t id="2020">Any type of {M0_OBJECT} - A unique size of vessel only used in the {X2} plot.

{HEADING:Hierarchy}
[center]{CLASS:Carrier}

|

{COMMAND:M0}[/center]</t>       


<!--M1-->
<t id="2021">Any type of {M1_OBJECT}.

{HEADING:Hierarchy}
[center]{CLASS:Carrier}

|

{COMMAND:M1}[/center]</t>          


<!--M2-->
<t id="2022">Any type of {M2_OBJECT}.

{HEADING:Hierarchy}
[center]{CLASS:Carrier}

|

{COMMAND:M2}[/center]</t>           

<!--M3-->
<t id="2023">Any type of {M3_OBJECT}.

{HEADING:Hierarchy}
[center]{CLASS:Fighter}

|

{COMMAND:M3}[/center]</t>       


<!--M4-->
<t id="2024">Any type of {M4_OBJECT}.

{HEADING:Hierarchy}
[center]{CLASS:Fighter}

|

{COMMAND:M4}[/center]</t>      


<!--M5-->
<t id="2025">Any type of {M5_OBJECT}.

{HEADING:Hierarchy}
[center]{CLASS:Fighter}

|

{COMMAND:M5}[/center]</t>       


<!--M6-->
<t id="2026">Any type of {M6_OBJECT}.

{HEADING:Hierarchy}
[center]{CLASS:Carrier}

|

{COMMAND:M6}[/center]</t>             


<!--M7-->
<t id="2027">Any type of {M7_OBJECT}.

{HEADING:Hierarchy}
[center]{CLASS:Big Ship}

|

{COMMAND:M7}[/center]</t>                  


<!--M8-->
<t id="2142">Any type of {M8_OBJECT}.

{HEADING:Hierarchy}
[center]{CLASS:Big Ship}

|

{COMMAND:M8}[/center]</t>                   


<!--TM-->
<t id="2141">Any type of {TM_OBJECT}.

{HEADING:Hierarchy}
[center]{CLASS:Big Ship}

|

{COMMAND:TM}[/center]</t>    


<!--TS-->
<t id="2031">Any type of {TS_OBJECT}.

{HEADING:Hierarchy}
[center]{CLASS:Little Ship}

|

{COMMAND:TS}

|

{PTS_CLASS}[/center]</t>        


<!--TP-->
<t id="2030">Any type of {TP_OBJECT}.

{HEADING:Hierarchy}
[center]{CLASS:Little Ship}

|

{COMMAND:TP}[/center]</t>   


<!--TL-->
<t id="2032">Any type of {TL_OBJECT}.

{HEADING:Hierarchy}
[center]{CLASS:Carrier}

|

{COMMAND:TL}

|

{PTL_CLASS}[/center]</t>            


<!--Pirate TS-->
<t id="2035">Any type of {PTS_OBJECT}.

{HEADING:Hierarchy}
[center]{TS_CLASS}

|

{COMMAND:Pirate TS}[/center]</t>       


<!--Pirate TL-->
<t id="2036">Any type of {PTL_OBJECT}.

{HEADING:Hierarchy}
[center]{TL_CLASS}

|

{COMMAND:Pirate TL}[/center]</t>       


<!--Goner Ship-->
<t id="2039">{UNDOCUMENTED}</t>       


<!--Kha`ak Cluster M3-->
<t id="2131">{UNDOCUMENTED}</t>       



<!--Beacon-->
<t id="2060">Any type of {OBJECT:Beacon}.

{HEADING:Hierarchy}
[center]{CLASS:Stationary Ship}

|

{COMMAND:Beacon}

|

{CLASS:Jump Beacon}[/center]</t>       


<!--Jump Beacon-->
<t id="2062">Any {OBJECT:Jump Beacon}.

{HEADING:Hierarchy}
[center]{CLASS:Beacon}

|

{COMMAND:Jump Beacon}[/center]</t>       



<!--UFO-->   
<t id="2068">Any of the flying saucers randomly roaming SECTORS.

{HEADING:Hierarchy}
[center]{CLASS:Ship}

|

{COMMAND:UFO}[/center]</t>        



<!--Space Fly-->
<t id="2070">A unique OBJCLASS that represents only {OBJECT:Space Flies}.  All {OBJECT:Space Flies} are of this OBJCLASS.

{HEADING:Hierarchy}
[center]{CLASS:Special Ship}

|

{COMMAND:Space Fly}[/center]</t>      
 

<!--Special Ship-->
<t id="2136">Unique objects, possibly just the {OBJECT:Space Fly}.

{HEADING:Hierarchy}
[center]{CLASS:Ship}

|

{COMMAND:Special Ship}

|

{CLASS:Space Fly}[/center]</t>       


<!--All Satellites-->
<t id="2079">Represents any type of {TYPE:satellite}.

{HEADING:Hierarchy}
[center]{CLASS:Stationary Ship}

|

{COMMAND:All Satellites}

|

{CLASS:Navigation Relay Satellite}\t{CLASS:Advanced Satellite}[/center]</t>       


<!--Navigation Relay Satellite-->
<t id="2065">Covers only {OBJECT:Navigation Relay Satellite}.

{HEADING:Hierarchy}
[center]{CLASS:All Satellites}

|

{COMMAND:Navigation Relay Satellite}[/center]</t>      


<!--Advanced Satellite-->
<t id="2080">Any {OBJECT:Advanced Satellite}.

{HEADING:Hierarchy}
[center]{CLASS:All Satellites}

|

{COMMAND:Advanced Satellite}[/center]</t>     


<!--Drone-->
<t id="2061">Represents any type of {TYPE:drone}.

{HEADING:Hierarchy}
[center]{CLASS:Moveable Ship}

|

{COMMAND:Drone}

|

{CLASS:Fight drone}\t{CLASS:Fighter Drone MKII}

{CLASS:Freight drone}\t{CLASS:Recon drone}[/center]
{CORRECTION:Nekomata}</t>      


<!--Fight drone-->
<t id="2067">Represents any {OBJECT:Fight drone}.

{HEADING:Hierarchy}
[center]{CLASS:Drone}

|

{COMMAND:Fight drone}[/center]</t>       


<t id="2146">Represents any {OBJECT:Fighter Drone MKII}.

{HEADING:Hierarchy}
[center]{CLASS:Drone}

|

{COMMAND:Fighter Drone MKII}[/center]</t>       <!--Fighter Drone MKII-->


<t id="2092">Represents any {OBJECT:Freight Drone}.

{HEADING:Hierarchy}
[center]{CLASS:Drone}

|

{COMMAND:Freight Drone}[/center]</t>       <!--Freight Drone-->


<t id="2150">Represents any {OBJECT:Recon Drone}.

{HEADING:Hierarchy}
[center]{CLASS:Drone}

|

{COMMAND:Recon Drone}[/center]</t>       <!--Recon Drone-->


<t id="2083">{UNDOCUMENTED}</t>       <!--Puller-->


<t id="2143">Represents any {OBJECT:Tracker Mine}.

{HEADING:Hierarchy}
[center]{CLASS:Stationary Ship}

|

{COMMAND:Tracker Mine}[/center]</t>       <!--Tracker Mine-->


<t id="2144">Represents any {OBJECT:Ion Mine}.

{HEADING:Hierarchy}
[center]{CLASS:Stationary Ship}

|

{COMMAND:Ion Mine}[/center]</t>       <!--Ion Mine-->


<t id="2145">Represents any {OBJECT:Matter/Anti-Matter Mine}.

{HEADING:Hierarchy}
[center]{CLASS:Stationary Ship}

|

{COMMAND:Matter/Anti-Matter Mine}[/center]</t>       <!--Matter/Anti-Matter Mine-->
  

<t id="2066">Represents any {OBJECT:SQUASH Mine}.

{HEADING:Hierarchy}
[center]{CLASS:Stationary Ship}

|

{COMMAND:SQUASH Mine}[/center]</t>                 <!--SQUASH Mine-->


<t id="2011">Any {OBJECT:Orbital Laser}

{HEADING:Hierarchy}
[center]{CLASS:Stationary Ship}

|

{COMMAND:Orbital Laser}[/center]</t>   <!--Orbital Laser-->


<t id="2149">Any {OBJECT:Terran Orbital Laser}

{HEADING:Hierarchy}
[center]{CLASS:Stationary Ship}

|

{COMMAND:Terran Orbital Laser}[/center]</t>       <!--Terran Orbital Laser-->


<t id="2147">{UNDOCUMENTED}</t>       <!--Keris-->


<t id="2148">{UNDOCUMENTED}</t>       <!--Stock Exchange-->


<t id="1000">Any OBJ within the game, such as SHIPS, STATIONS, PLANETS and {TYPE:stars}.

{HEADING:Hierarchy}
[center]{CLASS:GBODY}

|

{CLASS:Asteroid}\t{CLASS:Jump Gate}\t{CLASS:Missile}\t{CLASS:Ship}\t
{CLASS:Station}\t{CLASS:SpaceFly}\t{CLASS:Special}\t{CLASS:Ware Container}[/center]
[left]{HEADING:Information}

This is the base OBJCLASS for all objects in the galaxy except {TYPE:wings}, which have no physical representation.  There is no known use for this OBJCLASS within the scripting engine.[/left]{SUBMISSION:Jack08}</t>       <!--GBODY-->
    
    
</page>


</language>
